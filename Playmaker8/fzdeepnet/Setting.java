// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: setting.proto

package fzdeepnet;

public final class Setting {
  private Setting() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface LayerOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string lid = 1;
    /**
     * <code>required string lid = 1;</code>
     */
    boolean hasLid();
    /**
     * <code>required string lid = 1;</code>
     */
    java.lang.String getLid();
    /**
     * <code>required string lid = 1;</code>
     */
    com.google.protobuf.ByteString
        getLidBytes();

    // optional .fzdeepnet.Layer.UType type = 2 [default = INTER];
    /**
     * <code>optional .fzdeepnet.Layer.UType type = 2 [default = INTER];</code>
     */
    boolean hasType();
    /**
     * <code>optional .fzdeepnet.Layer.UType type = 2 [default = INTER];</code>
     */
    fzdeepnet.Setting.Layer.UType getType();

    // required int32 dimensions = 3;
    /**
     * <code>required int32 dimensions = 3;</code>
     */
    boolean hasDimensions();
    /**
     * <code>required int32 dimensions = 3;</code>
     */
    int getDimensions();

    // repeated int32 dx = 4;
    /**
     * <code>repeated int32 dx = 4;</code>
     */
    java.util.List<java.lang.Integer> getDxList();
    /**
     * <code>repeated int32 dx = 4;</code>
     */
    int getDxCount();
    /**
     * <code>repeated int32 dx = 4;</code>
     */
    int getDx(int index);

    // required .fzdeepnet.Layer.Unit unit = 5 [default = BINOMIAL];
    /**
     * <code>required .fzdeepnet.Layer.Unit unit = 5 [default = BINOMIAL];</code>
     */
    boolean hasUnit();
    /**
     * <code>required .fzdeepnet.Layer.Unit unit = 5 [default = BINOMIAL];</code>
     */
    fzdeepnet.Setting.Layer.Unit getUnit();

    // optional int32 threshold = 6;
    /**
     * <code>optional int32 threshold = 6;</code>
     */
    boolean hasThreshold();
    /**
     * <code>optional int32 threshold = 6;</code>
     */
    int getThreshold();

    // repeated .fzdeepnet.Dependence depend = 7;
    /**
     * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
     */
    java.util.List<fzdeepnet.Setting.Dependence> 
        getDependList();
    /**
     * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
     */
    fzdeepnet.Setting.Dependence getDepend(int index);
    /**
     * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
     */
    int getDependCount();
    /**
     * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
     */
    java.util.List<? extends fzdeepnet.Setting.DependenceOrBuilder> 
        getDependOrBuilderList();
    /**
     * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
     */
    fzdeepnet.Setting.DependenceOrBuilder getDependOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code fzdeepnet.Layer}
   */
  public static final class Layer extends
      com.google.protobuf.GeneratedMessage
      implements LayerOrBuilder {
    // Use Layer.newBuilder() to construct.
    private Layer(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Layer(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Layer defaultInstance;
    public static Layer getDefaultInstance() {
      return defaultInstance;
    }

    public Layer getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Layer(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              lid_ = input.readBytes();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              fzdeepnet.Setting.Layer.UType value = fzdeepnet.Setting.Layer.UType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                type_ = value;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              dimensions_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                dx_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              dx_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                dx_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                dx_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              fzdeepnet.Setting.Layer.Unit value = fzdeepnet.Setting.Layer.Unit.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                unit_ = value;
              }
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              threshold_ = input.readInt32();
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                depend_ = new java.util.ArrayList<fzdeepnet.Setting.Dependence>();
                mutable_bitField0_ |= 0x00000040;
              }
              depend_.add(input.readMessage(fzdeepnet.Setting.Dependence.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          dx_ = java.util.Collections.unmodifiableList(dx_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          depend_ = java.util.Collections.unmodifiableList(depend_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return fzdeepnet.Setting.internal_static_fzdeepnet_Layer_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return fzdeepnet.Setting.internal_static_fzdeepnet_Layer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              fzdeepnet.Setting.Layer.class, fzdeepnet.Setting.Layer.Builder.class);
    }

    public static com.google.protobuf.Parser<Layer> PARSER =
        new com.google.protobuf.AbstractParser<Layer>() {
      public Layer parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Layer(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Layer> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code fzdeepnet.Layer.UType}
     */
    public enum UType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>INPUT = 0;</code>
       */
      INPUT(0, 0),
      /**
       * <code>INTER = 1;</code>
       */
      INTER(1, 1),
      /**
       * <code>LABEL = 2;</code>
       */
      LABEL(2, 2),
      ;

      /**
       * <code>INPUT = 0;</code>
       */
      public static final int INPUT_VALUE = 0;
      /**
       * <code>INTER = 1;</code>
       */
      public static final int INTER_VALUE = 1;
      /**
       * <code>LABEL = 2;</code>
       */
      public static final int LABEL_VALUE = 2;


      public final int getNumber() { return value; }

      public static UType valueOf(int value) {
        switch (value) {
          case 0: return INPUT;
          case 1: return INTER;
          case 2: return LABEL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<UType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<UType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<UType>() {
              public UType findValueByNumber(int number) {
                return UType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return fzdeepnet.Setting.Layer.getDescriptor().getEnumTypes().get(0);
      }

      private static final UType[] VALUES = values();

      public static UType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private UType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:fzdeepnet.Layer.UType)
    }

    /**
     * Protobuf enum {@code fzdeepnet.Layer.Unit}
     */
    public enum Unit
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>LINEAR = 0;</code>
       */
      LINEAR(0, 0),
      /**
       * <code>LOGSIG = 1;</code>
       */
      LOGSIG(1, 1),
      /**
       * <code>BINOMIAL = 2;</code>
       */
      BINOMIAL(2, 2),
      /**
       * <code>GAUSSIAN = 3;</code>
       */
      GAUSSIAN(3, 3),
      /**
       * <code>TANSIG = 4;</code>
       */
      TANSIG(4, 4),
      /**
       * <code>RELU = 5;</code>
       */
      RELU(5, 5),
      /**
       * <code>RELUS = 6;</code>
       *
       * <pre>
       * Rectified Linear Smooth
       * </pre>
       */
      RELUS(6, 6),
      /**
       * <code>SOFTMAX = 7;</code>
       */
      SOFTMAX(7, 7),
      /**
       * <code>REPSOFTMAX = 8;</code>
       */
      REPSOFTMAX(8, 8),
      /**
       * <code>SIN = 9;</code>
       */
      SIN(9, 9),
      /**
       * <code>COS = 10;</code>
       */
      COS(10, 10),
      ;

      /**
       * <code>LINEAR = 0;</code>
       */
      public static final int LINEAR_VALUE = 0;
      /**
       * <code>LOGSIG = 1;</code>
       */
      public static final int LOGSIG_VALUE = 1;
      /**
       * <code>BINOMIAL = 2;</code>
       */
      public static final int BINOMIAL_VALUE = 2;
      /**
       * <code>GAUSSIAN = 3;</code>
       */
      public static final int GAUSSIAN_VALUE = 3;
      /**
       * <code>TANSIG = 4;</code>
       */
      public static final int TANSIG_VALUE = 4;
      /**
       * <code>RELU = 5;</code>
       */
      public static final int RELU_VALUE = 5;
      /**
       * <code>RELUS = 6;</code>
       *
       * <pre>
       * Rectified Linear Smooth
       * </pre>
       */
      public static final int RELUS_VALUE = 6;
      /**
       * <code>SOFTMAX = 7;</code>
       */
      public static final int SOFTMAX_VALUE = 7;
      /**
       * <code>REPSOFTMAX = 8;</code>
       */
      public static final int REPSOFTMAX_VALUE = 8;
      /**
       * <code>SIN = 9;</code>
       */
      public static final int SIN_VALUE = 9;
      /**
       * <code>COS = 10;</code>
       */
      public static final int COS_VALUE = 10;


      public final int getNumber() { return value; }

      public static Unit valueOf(int value) {
        switch (value) {
          case 0: return LINEAR;
          case 1: return LOGSIG;
          case 2: return BINOMIAL;
          case 3: return GAUSSIAN;
          case 4: return TANSIG;
          case 5: return RELU;
          case 6: return RELUS;
          case 7: return SOFTMAX;
          case 8: return REPSOFTMAX;
          case 9: return SIN;
          case 10: return COS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Unit>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Unit>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Unit>() {
              public Unit findValueByNumber(int number) {
                return Unit.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return fzdeepnet.Setting.Layer.getDescriptor().getEnumTypes().get(1);
      }

      private static final Unit[] VALUES = values();

      public static Unit valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Unit(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:fzdeepnet.Layer.Unit)
    }

    private int bitField0_;
    // required string lid = 1;
    public static final int LID_FIELD_NUMBER = 1;
    private java.lang.Object lid_;
    /**
     * <code>required string lid = 1;</code>
     */
    public boolean hasLid() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string lid = 1;</code>
     */
    public java.lang.String getLid() {
      java.lang.Object ref = lid_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          lid_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string lid = 1;</code>
     */
    public com.google.protobuf.ByteString
        getLidBytes() {
      java.lang.Object ref = lid_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        lid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .fzdeepnet.Layer.UType type = 2 [default = INTER];
    public static final int TYPE_FIELD_NUMBER = 2;
    private fzdeepnet.Setting.Layer.UType type_;
    /**
     * <code>optional .fzdeepnet.Layer.UType type = 2 [default = INTER];</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .fzdeepnet.Layer.UType type = 2 [default = INTER];</code>
     */
    public fzdeepnet.Setting.Layer.UType getType() {
      return type_;
    }

    // required int32 dimensions = 3;
    public static final int DIMENSIONS_FIELD_NUMBER = 3;
    private int dimensions_;
    /**
     * <code>required int32 dimensions = 3;</code>
     */
    public boolean hasDimensions() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 dimensions = 3;</code>
     */
    public int getDimensions() {
      return dimensions_;
    }

    // repeated int32 dx = 4;
    public static final int DX_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> dx_;
    /**
     * <code>repeated int32 dx = 4;</code>
     */
    public java.util.List<java.lang.Integer>
        getDxList() {
      return dx_;
    }
    /**
     * <code>repeated int32 dx = 4;</code>
     */
    public int getDxCount() {
      return dx_.size();
    }
    /**
     * <code>repeated int32 dx = 4;</code>
     */
    public int getDx(int index) {
      return dx_.get(index);
    }

    // required .fzdeepnet.Layer.Unit unit = 5 [default = BINOMIAL];
    public static final int UNIT_FIELD_NUMBER = 5;
    private fzdeepnet.Setting.Layer.Unit unit_;
    /**
     * <code>required .fzdeepnet.Layer.Unit unit = 5 [default = BINOMIAL];</code>
     */
    public boolean hasUnit() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .fzdeepnet.Layer.Unit unit = 5 [default = BINOMIAL];</code>
     */
    public fzdeepnet.Setting.Layer.Unit getUnit() {
      return unit_;
    }

    // optional int32 threshold = 6;
    public static final int THRESHOLD_FIELD_NUMBER = 6;
    private int threshold_;
    /**
     * <code>optional int32 threshold = 6;</code>
     */
    public boolean hasThreshold() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 threshold = 6;</code>
     */
    public int getThreshold() {
      return threshold_;
    }

    // repeated .fzdeepnet.Dependence depend = 7;
    public static final int DEPEND_FIELD_NUMBER = 7;
    private java.util.List<fzdeepnet.Setting.Dependence> depend_;
    /**
     * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
     */
    public java.util.List<fzdeepnet.Setting.Dependence> getDependList() {
      return depend_;
    }
    /**
     * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
     */
    public java.util.List<? extends fzdeepnet.Setting.DependenceOrBuilder> 
        getDependOrBuilderList() {
      return depend_;
    }
    /**
     * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
     */
    public int getDependCount() {
      return depend_.size();
    }
    /**
     * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
     */
    public fzdeepnet.Setting.Dependence getDepend(int index) {
      return depend_.get(index);
    }
    /**
     * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
     */
    public fzdeepnet.Setting.DependenceOrBuilder getDependOrBuilder(
        int index) {
      return depend_.get(index);
    }

    private void initFields() {
      lid_ = "";
      type_ = fzdeepnet.Setting.Layer.UType.INTER;
      dimensions_ = 0;
      dx_ = java.util.Collections.emptyList();
      unit_ = fzdeepnet.Setting.Layer.Unit.BINOMIAL;
      threshold_ = 0;
      depend_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasLid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDimensions()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasUnit()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getDependCount(); i++) {
        if (!getDepend(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getLidBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, type_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, dimensions_);
      }
      for (int i = 0; i < dx_.size(); i++) {
        output.writeInt32(4, dx_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(5, unit_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(6, threshold_);
      }
      for (int i = 0; i < depend_.size(); i++) {
        output.writeMessage(7, depend_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getLidBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, type_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, dimensions_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < dx_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dx_.get(i));
        }
        size += dataSize;
        size += 1 * getDxList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, unit_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, threshold_);
      }
      for (int i = 0; i < depend_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, depend_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static fzdeepnet.Setting.Layer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fzdeepnet.Setting.Layer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fzdeepnet.Setting.Layer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fzdeepnet.Setting.Layer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fzdeepnet.Setting.Layer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static fzdeepnet.Setting.Layer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static fzdeepnet.Setting.Layer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static fzdeepnet.Setting.Layer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static fzdeepnet.Setting.Layer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static fzdeepnet.Setting.Layer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(fzdeepnet.Setting.Layer prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code fzdeepnet.Layer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements fzdeepnet.Setting.LayerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return fzdeepnet.Setting.internal_static_fzdeepnet_Layer_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return fzdeepnet.Setting.internal_static_fzdeepnet_Layer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                fzdeepnet.Setting.Layer.class, fzdeepnet.Setting.Layer.Builder.class);
      }

      // Construct using fzdeepnet.Setting.Layer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDependFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        lid_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = fzdeepnet.Setting.Layer.UType.INTER;
        bitField0_ = (bitField0_ & ~0x00000002);
        dimensions_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        dx_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        unit_ = fzdeepnet.Setting.Layer.Unit.BINOMIAL;
        bitField0_ = (bitField0_ & ~0x00000010);
        threshold_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        if (dependBuilder_ == null) {
          depend_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          dependBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return fzdeepnet.Setting.internal_static_fzdeepnet_Layer_descriptor;
      }

      public fzdeepnet.Setting.Layer getDefaultInstanceForType() {
        return fzdeepnet.Setting.Layer.getDefaultInstance();
      }

      public fzdeepnet.Setting.Layer build() {
        fzdeepnet.Setting.Layer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public fzdeepnet.Setting.Layer buildPartial() {
        fzdeepnet.Setting.Layer result = new fzdeepnet.Setting.Layer(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.lid_ = lid_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.dimensions_ = dimensions_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          dx_ = java.util.Collections.unmodifiableList(dx_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.dx_ = dx_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.unit_ = unit_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.threshold_ = threshold_;
        if (dependBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            depend_ = java.util.Collections.unmodifiableList(depend_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.depend_ = depend_;
        } else {
          result.depend_ = dependBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof fzdeepnet.Setting.Layer) {
          return mergeFrom((fzdeepnet.Setting.Layer)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(fzdeepnet.Setting.Layer other) {
        if (other == fzdeepnet.Setting.Layer.getDefaultInstance()) return this;
        if (other.hasLid()) {
          bitField0_ |= 0x00000001;
          lid_ = other.lid_;
          onChanged();
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasDimensions()) {
          setDimensions(other.getDimensions());
        }
        if (!other.dx_.isEmpty()) {
          if (dx_.isEmpty()) {
            dx_ = other.dx_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureDxIsMutable();
            dx_.addAll(other.dx_);
          }
          onChanged();
        }
        if (other.hasUnit()) {
          setUnit(other.getUnit());
        }
        if (other.hasThreshold()) {
          setThreshold(other.getThreshold());
        }
        if (dependBuilder_ == null) {
          if (!other.depend_.isEmpty()) {
            if (depend_.isEmpty()) {
              depend_ = other.depend_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureDependIsMutable();
              depend_.addAll(other.depend_);
            }
            onChanged();
          }
        } else {
          if (!other.depend_.isEmpty()) {
            if (dependBuilder_.isEmpty()) {
              dependBuilder_.dispose();
              dependBuilder_ = null;
              depend_ = other.depend_;
              bitField0_ = (bitField0_ & ~0x00000040);
              dependBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDependFieldBuilder() : null;
            } else {
              dependBuilder_.addAllMessages(other.depend_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasLid()) {
          
          return false;
        }
        if (!hasDimensions()) {
          
          return false;
        }
        if (!hasUnit()) {
          
          return false;
        }
        for (int i = 0; i < getDependCount(); i++) {
          if (!getDepend(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        fzdeepnet.Setting.Layer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (fzdeepnet.Setting.Layer) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string lid = 1;
      private java.lang.Object lid_ = "";
      /**
       * <code>required string lid = 1;</code>
       */
      public boolean hasLid() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string lid = 1;</code>
       */
      public java.lang.String getLid() {
        java.lang.Object ref = lid_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          lid_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string lid = 1;</code>
       */
      public com.google.protobuf.ByteString
          getLidBytes() {
        java.lang.Object ref = lid_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          lid_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string lid = 1;</code>
       */
      public Builder setLid(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        lid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string lid = 1;</code>
       */
      public Builder clearLid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        lid_ = getDefaultInstance().getLid();
        onChanged();
        return this;
      }
      /**
       * <code>required string lid = 1;</code>
       */
      public Builder setLidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        lid_ = value;
        onChanged();
        return this;
      }

      // optional .fzdeepnet.Layer.UType type = 2 [default = INTER];
      private fzdeepnet.Setting.Layer.UType type_ = fzdeepnet.Setting.Layer.UType.INTER;
      /**
       * <code>optional .fzdeepnet.Layer.UType type = 2 [default = INTER];</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .fzdeepnet.Layer.UType type = 2 [default = INTER];</code>
       */
      public fzdeepnet.Setting.Layer.UType getType() {
        return type_;
      }
      /**
       * <code>optional .fzdeepnet.Layer.UType type = 2 [default = INTER];</code>
       */
      public Builder setType(fzdeepnet.Setting.Layer.UType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Layer.UType type = 2 [default = INTER];</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = fzdeepnet.Setting.Layer.UType.INTER;
        onChanged();
        return this;
      }

      // required int32 dimensions = 3;
      private int dimensions_ ;
      /**
       * <code>required int32 dimensions = 3;</code>
       */
      public boolean hasDimensions() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 dimensions = 3;</code>
       */
      public int getDimensions() {
        return dimensions_;
      }
      /**
       * <code>required int32 dimensions = 3;</code>
       */
      public Builder setDimensions(int value) {
        bitField0_ |= 0x00000004;
        dimensions_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 dimensions = 3;</code>
       */
      public Builder clearDimensions() {
        bitField0_ = (bitField0_ & ~0x00000004);
        dimensions_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 dx = 4;
      private java.util.List<java.lang.Integer> dx_ = java.util.Collections.emptyList();
      private void ensureDxIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          dx_ = new java.util.ArrayList<java.lang.Integer>(dx_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 dx = 4;</code>
       */
      public java.util.List<java.lang.Integer>
          getDxList() {
        return java.util.Collections.unmodifiableList(dx_);
      }
      /**
       * <code>repeated int32 dx = 4;</code>
       */
      public int getDxCount() {
        return dx_.size();
      }
      /**
       * <code>repeated int32 dx = 4;</code>
       */
      public int getDx(int index) {
        return dx_.get(index);
      }
      /**
       * <code>repeated int32 dx = 4;</code>
       */
      public Builder setDx(
          int index, int value) {
        ensureDxIsMutable();
        dx_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 dx = 4;</code>
       */
      public Builder addDx(int value) {
        ensureDxIsMutable();
        dx_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 dx = 4;</code>
       */
      public Builder addAllDx(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDxIsMutable();
        super.addAll(values, dx_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 dx = 4;</code>
       */
      public Builder clearDx() {
        dx_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // required .fzdeepnet.Layer.Unit unit = 5 [default = BINOMIAL];
      private fzdeepnet.Setting.Layer.Unit unit_ = fzdeepnet.Setting.Layer.Unit.BINOMIAL;
      /**
       * <code>required .fzdeepnet.Layer.Unit unit = 5 [default = BINOMIAL];</code>
       */
      public boolean hasUnit() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required .fzdeepnet.Layer.Unit unit = 5 [default = BINOMIAL];</code>
       */
      public fzdeepnet.Setting.Layer.Unit getUnit() {
        return unit_;
      }
      /**
       * <code>required .fzdeepnet.Layer.Unit unit = 5 [default = BINOMIAL];</code>
       */
      public Builder setUnit(fzdeepnet.Setting.Layer.Unit value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        unit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .fzdeepnet.Layer.Unit unit = 5 [default = BINOMIAL];</code>
       */
      public Builder clearUnit() {
        bitField0_ = (bitField0_ & ~0x00000010);
        unit_ = fzdeepnet.Setting.Layer.Unit.BINOMIAL;
        onChanged();
        return this;
      }

      // optional int32 threshold = 6;
      private int threshold_ ;
      /**
       * <code>optional int32 threshold = 6;</code>
       */
      public boolean hasThreshold() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 threshold = 6;</code>
       */
      public int getThreshold() {
        return threshold_;
      }
      /**
       * <code>optional int32 threshold = 6;</code>
       */
      public Builder setThreshold(int value) {
        bitField0_ |= 0x00000020;
        threshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 threshold = 6;</code>
       */
      public Builder clearThreshold() {
        bitField0_ = (bitField0_ & ~0x00000020);
        threshold_ = 0;
        onChanged();
        return this;
      }

      // repeated .fzdeepnet.Dependence depend = 7;
      private java.util.List<fzdeepnet.Setting.Dependence> depend_ =
        java.util.Collections.emptyList();
      private void ensureDependIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          depend_ = new java.util.ArrayList<fzdeepnet.Setting.Dependence>(depend_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          fzdeepnet.Setting.Dependence, fzdeepnet.Setting.Dependence.Builder, fzdeepnet.Setting.DependenceOrBuilder> dependBuilder_;

      /**
       * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
       */
      public java.util.List<fzdeepnet.Setting.Dependence> getDependList() {
        if (dependBuilder_ == null) {
          return java.util.Collections.unmodifiableList(depend_);
        } else {
          return dependBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
       */
      public int getDependCount() {
        if (dependBuilder_ == null) {
          return depend_.size();
        } else {
          return dependBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
       */
      public fzdeepnet.Setting.Dependence getDepend(int index) {
        if (dependBuilder_ == null) {
          return depend_.get(index);
        } else {
          return dependBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
       */
      public Builder setDepend(
          int index, fzdeepnet.Setting.Dependence value) {
        if (dependBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDependIsMutable();
          depend_.set(index, value);
          onChanged();
        } else {
          dependBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
       */
      public Builder setDepend(
          int index, fzdeepnet.Setting.Dependence.Builder builderForValue) {
        if (dependBuilder_ == null) {
          ensureDependIsMutable();
          depend_.set(index, builderForValue.build());
          onChanged();
        } else {
          dependBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
       */
      public Builder addDepend(fzdeepnet.Setting.Dependence value) {
        if (dependBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDependIsMutable();
          depend_.add(value);
          onChanged();
        } else {
          dependBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
       */
      public Builder addDepend(
          int index, fzdeepnet.Setting.Dependence value) {
        if (dependBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDependIsMutable();
          depend_.add(index, value);
          onChanged();
        } else {
          dependBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
       */
      public Builder addDepend(
          fzdeepnet.Setting.Dependence.Builder builderForValue) {
        if (dependBuilder_ == null) {
          ensureDependIsMutable();
          depend_.add(builderForValue.build());
          onChanged();
        } else {
          dependBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
       */
      public Builder addDepend(
          int index, fzdeepnet.Setting.Dependence.Builder builderForValue) {
        if (dependBuilder_ == null) {
          ensureDependIsMutable();
          depend_.add(index, builderForValue.build());
          onChanged();
        } else {
          dependBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
       */
      public Builder addAllDepend(
          java.lang.Iterable<? extends fzdeepnet.Setting.Dependence> values) {
        if (dependBuilder_ == null) {
          ensureDependIsMutable();
          super.addAll(values, depend_);
          onChanged();
        } else {
          dependBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
       */
      public Builder clearDepend() {
        if (dependBuilder_ == null) {
          depend_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          dependBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
       */
      public Builder removeDepend(int index) {
        if (dependBuilder_ == null) {
          ensureDependIsMutable();
          depend_.remove(index);
          onChanged();
        } else {
          dependBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
       */
      public fzdeepnet.Setting.Dependence.Builder getDependBuilder(
          int index) {
        return getDependFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
       */
      public fzdeepnet.Setting.DependenceOrBuilder getDependOrBuilder(
          int index) {
        if (dependBuilder_ == null) {
          return depend_.get(index);  } else {
          return dependBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
       */
      public java.util.List<? extends fzdeepnet.Setting.DependenceOrBuilder> 
           getDependOrBuilderList() {
        if (dependBuilder_ != null) {
          return dependBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(depend_);
        }
      }
      /**
       * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
       */
      public fzdeepnet.Setting.Dependence.Builder addDependBuilder() {
        return getDependFieldBuilder().addBuilder(
            fzdeepnet.Setting.Dependence.getDefaultInstance());
      }
      /**
       * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
       */
      public fzdeepnet.Setting.Dependence.Builder addDependBuilder(
          int index) {
        return getDependFieldBuilder().addBuilder(
            index, fzdeepnet.Setting.Dependence.getDefaultInstance());
      }
      /**
       * <code>repeated .fzdeepnet.Dependence depend = 7;</code>
       */
      public java.util.List<fzdeepnet.Setting.Dependence.Builder> 
           getDependBuilderList() {
        return getDependFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          fzdeepnet.Setting.Dependence, fzdeepnet.Setting.Dependence.Builder, fzdeepnet.Setting.DependenceOrBuilder> 
          getDependFieldBuilder() {
        if (dependBuilder_ == null) {
          dependBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              fzdeepnet.Setting.Dependence, fzdeepnet.Setting.Dependence.Builder, fzdeepnet.Setting.DependenceOrBuilder>(
                  depend_,
                  ((bitField0_ & 0x00000040) == 0x00000040),
                  getParentForChildren(),
                  isClean());
          depend_ = null;
        }
        return dependBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:fzdeepnet.Layer)
    }

    static {
      defaultInstance = new Layer(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:fzdeepnet.Layer)
  }

  public interface DependenceOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string layer_id = 1;
    /**
     * <code>required string layer_id = 1;</code>
     */
    boolean hasLayerId();
    /**
     * <code>required string layer_id = 1;</code>
     */
    java.lang.String getLayerId();
    /**
     * <code>required string layer_id = 1;</code>
     */
    com.google.protobuf.ByteString
        getLayerIdBytes();

    // optional .fzdeepnet.Dependence.Direction direction = 2 [default = FORWARD];
    /**
     * <code>optional .fzdeepnet.Dependence.Direction direction = 2 [default = FORWARD];</code>
     */
    boolean hasDirection();
    /**
     * <code>optional .fzdeepnet.Dependence.Direction direction = 2 [default = FORWARD];</code>
     */
    fzdeepnet.Setting.Dependence.Direction getDirection();

    // optional bool convolution = 3 [default = false];
    /**
     * <code>optional bool convolution = 3 [default = false];</code>
     */
    boolean hasConvolution();
    /**
     * <code>optional bool convolution = 3 [default = false];</code>
     */
    boolean getConvolution();
  }
  /**
   * Protobuf type {@code fzdeepnet.Dependence}
   */
  public static final class Dependence extends
      com.google.protobuf.GeneratedMessage
      implements DependenceOrBuilder {
    // Use Dependence.newBuilder() to construct.
    private Dependence(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Dependence(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Dependence defaultInstance;
    public static Dependence getDefaultInstance() {
      return defaultInstance;
    }

    public Dependence getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Dependence(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              layerId_ = input.readBytes();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              fzdeepnet.Setting.Dependence.Direction value = fzdeepnet.Setting.Dependence.Direction.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                direction_ = value;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              convolution_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return fzdeepnet.Setting.internal_static_fzdeepnet_Dependence_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return fzdeepnet.Setting.internal_static_fzdeepnet_Dependence_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              fzdeepnet.Setting.Dependence.class, fzdeepnet.Setting.Dependence.Builder.class);
    }

    public static com.google.protobuf.Parser<Dependence> PARSER =
        new com.google.protobuf.AbstractParser<Dependence>() {
      public Dependence parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Dependence(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Dependence> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code fzdeepnet.Dependence.Direction}
     */
    public enum Direction
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>FORWARD = 0;</code>
       *
       * <pre>
       * The weight matrix will be layer_id.dimension x lid.dimension
       * </pre>
       */
      FORWARD(0, 0),
      /**
       * <code>BIDIRECT = 1;</code>
       *
       * <pre>
       * This weight matrix is as the transpose of lid.dimension x layer_id.dimension if it already exists
       * </pre>
       */
      BIDIRECT(1, 1),
      ;

      /**
       * <code>FORWARD = 0;</code>
       *
       * <pre>
       * The weight matrix will be layer_id.dimension x lid.dimension
       * </pre>
       */
      public static final int FORWARD_VALUE = 0;
      /**
       * <code>BIDIRECT = 1;</code>
       *
       * <pre>
       * This weight matrix is as the transpose of lid.dimension x layer_id.dimension if it already exists
       * </pre>
       */
      public static final int BIDIRECT_VALUE = 1;


      public final int getNumber() { return value; }

      public static Direction valueOf(int value) {
        switch (value) {
          case 0: return FORWARD;
          case 1: return BIDIRECT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Direction>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Direction>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Direction>() {
              public Direction findValueByNumber(int number) {
                return Direction.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return fzdeepnet.Setting.Dependence.getDescriptor().getEnumTypes().get(0);
      }

      private static final Direction[] VALUES = values();

      public static Direction valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Direction(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:fzdeepnet.Dependence.Direction)
    }

    private int bitField0_;
    // required string layer_id = 1;
    public static final int LAYER_ID_FIELD_NUMBER = 1;
    private java.lang.Object layerId_;
    /**
     * <code>required string layer_id = 1;</code>
     */
    public boolean hasLayerId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string layer_id = 1;</code>
     */
    public java.lang.String getLayerId() {
      java.lang.Object ref = layerId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          layerId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string layer_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getLayerIdBytes() {
      java.lang.Object ref = layerId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        layerId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .fzdeepnet.Dependence.Direction direction = 2 [default = FORWARD];
    public static final int DIRECTION_FIELD_NUMBER = 2;
    private fzdeepnet.Setting.Dependence.Direction direction_;
    /**
     * <code>optional .fzdeepnet.Dependence.Direction direction = 2 [default = FORWARD];</code>
     */
    public boolean hasDirection() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .fzdeepnet.Dependence.Direction direction = 2 [default = FORWARD];</code>
     */
    public fzdeepnet.Setting.Dependence.Direction getDirection() {
      return direction_;
    }

    // optional bool convolution = 3 [default = false];
    public static final int CONVOLUTION_FIELD_NUMBER = 3;
    private boolean convolution_;
    /**
     * <code>optional bool convolution = 3 [default = false];</code>
     */
    public boolean hasConvolution() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool convolution = 3 [default = false];</code>
     */
    public boolean getConvolution() {
      return convolution_;
    }

    private void initFields() {
      layerId_ = "";
      direction_ = fzdeepnet.Setting.Dependence.Direction.FORWARD;
      convolution_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasLayerId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getLayerIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, direction_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, convolution_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getLayerIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, direction_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, convolution_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static fzdeepnet.Setting.Dependence parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fzdeepnet.Setting.Dependence parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fzdeepnet.Setting.Dependence parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fzdeepnet.Setting.Dependence parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fzdeepnet.Setting.Dependence parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static fzdeepnet.Setting.Dependence parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static fzdeepnet.Setting.Dependence parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static fzdeepnet.Setting.Dependence parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static fzdeepnet.Setting.Dependence parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static fzdeepnet.Setting.Dependence parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(fzdeepnet.Setting.Dependence prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code fzdeepnet.Dependence}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements fzdeepnet.Setting.DependenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return fzdeepnet.Setting.internal_static_fzdeepnet_Dependence_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return fzdeepnet.Setting.internal_static_fzdeepnet_Dependence_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                fzdeepnet.Setting.Dependence.class, fzdeepnet.Setting.Dependence.Builder.class);
      }

      // Construct using fzdeepnet.Setting.Dependence.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        layerId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        direction_ = fzdeepnet.Setting.Dependence.Direction.FORWARD;
        bitField0_ = (bitField0_ & ~0x00000002);
        convolution_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return fzdeepnet.Setting.internal_static_fzdeepnet_Dependence_descriptor;
      }

      public fzdeepnet.Setting.Dependence getDefaultInstanceForType() {
        return fzdeepnet.Setting.Dependence.getDefaultInstance();
      }

      public fzdeepnet.Setting.Dependence build() {
        fzdeepnet.Setting.Dependence result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public fzdeepnet.Setting.Dependence buildPartial() {
        fzdeepnet.Setting.Dependence result = new fzdeepnet.Setting.Dependence(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.layerId_ = layerId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.direction_ = direction_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.convolution_ = convolution_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof fzdeepnet.Setting.Dependence) {
          return mergeFrom((fzdeepnet.Setting.Dependence)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(fzdeepnet.Setting.Dependence other) {
        if (other == fzdeepnet.Setting.Dependence.getDefaultInstance()) return this;
        if (other.hasLayerId()) {
          bitField0_ |= 0x00000001;
          layerId_ = other.layerId_;
          onChanged();
        }
        if (other.hasDirection()) {
          setDirection(other.getDirection());
        }
        if (other.hasConvolution()) {
          setConvolution(other.getConvolution());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasLayerId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        fzdeepnet.Setting.Dependence parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (fzdeepnet.Setting.Dependence) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string layer_id = 1;
      private java.lang.Object layerId_ = "";
      /**
       * <code>required string layer_id = 1;</code>
       */
      public boolean hasLayerId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string layer_id = 1;</code>
       */
      public java.lang.String getLayerId() {
        java.lang.Object ref = layerId_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          layerId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string layer_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getLayerIdBytes() {
        java.lang.Object ref = layerId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          layerId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string layer_id = 1;</code>
       */
      public Builder setLayerId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        layerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string layer_id = 1;</code>
       */
      public Builder clearLayerId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        layerId_ = getDefaultInstance().getLayerId();
        onChanged();
        return this;
      }
      /**
       * <code>required string layer_id = 1;</code>
       */
      public Builder setLayerIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        layerId_ = value;
        onChanged();
        return this;
      }

      // optional .fzdeepnet.Dependence.Direction direction = 2 [default = FORWARD];
      private fzdeepnet.Setting.Dependence.Direction direction_ = fzdeepnet.Setting.Dependence.Direction.FORWARD;
      /**
       * <code>optional .fzdeepnet.Dependence.Direction direction = 2 [default = FORWARD];</code>
       */
      public boolean hasDirection() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .fzdeepnet.Dependence.Direction direction = 2 [default = FORWARD];</code>
       */
      public fzdeepnet.Setting.Dependence.Direction getDirection() {
        return direction_;
      }
      /**
       * <code>optional .fzdeepnet.Dependence.Direction direction = 2 [default = FORWARD];</code>
       */
      public Builder setDirection(fzdeepnet.Setting.Dependence.Direction value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        direction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Dependence.Direction direction = 2 [default = FORWARD];</code>
       */
      public Builder clearDirection() {
        bitField0_ = (bitField0_ & ~0x00000002);
        direction_ = fzdeepnet.Setting.Dependence.Direction.FORWARD;
        onChanged();
        return this;
      }

      // optional bool convolution = 3 [default = false];
      private boolean convolution_ ;
      /**
       * <code>optional bool convolution = 3 [default = false];</code>
       */
      public boolean hasConvolution() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool convolution = 3 [default = false];</code>
       */
      public boolean getConvolution() {
        return convolution_;
      }
      /**
       * <code>optional bool convolution = 3 [default = false];</code>
       */
      public Builder setConvolution(boolean value) {
        bitField0_ |= 0x00000004;
        convolution_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool convolution = 3 [default = false];</code>
       */
      public Builder clearConvolution() {
        bitField0_ = (bitField0_ & ~0x00000004);
        convolution_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:fzdeepnet.Dependence)
    }

    static {
      defaultInstance = new Dependence(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:fzdeepnet.Dependence)
  }

  public interface DeepLayerOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string vis_lid = 1;
    /**
     * <code>required string vis_lid = 1;</code>
     *
     * <pre>
     * visible layer 
     * </pre>
     */
    boolean hasVisLid();
    /**
     * <code>required string vis_lid = 1;</code>
     *
     * <pre>
     * visible layer 
     * </pre>
     */
    java.lang.String getVisLid();
    /**
     * <code>required string vis_lid = 1;</code>
     *
     * <pre>
     * visible layer 
     * </pre>
     */
    com.google.protobuf.ByteString
        getVisLidBytes();

    // required string hid_lid = 2;
    /**
     * <code>required string hid_lid = 2;</code>
     *
     * <pre>
     * hidden layer
     * </pre>
     */
    boolean hasHidLid();
    /**
     * <code>required string hid_lid = 2;</code>
     *
     * <pre>
     * hidden layer
     * </pre>
     */
    java.lang.String getHidLid();
    /**
     * <code>required string hid_lid = 2;</code>
     *
     * <pre>
     * hidden layer
     * </pre>
     */
    com.google.protobuf.ByteString
        getHidLidBytes();

    // required int32 order = 3;
    /**
     * <code>required int32 order = 3;</code>
     *
     * <pre>
     * Oder in pre_train
     * </pre>
     */
    boolean hasOrder();
    /**
     * <code>required int32 order = 3;</code>
     *
     * <pre>
     * Oder in pre_train
     * </pre>
     */
    int getOrder();

    // optional .fzdeepnet.Trainer pretrainer = 4;
    /**
     * <code>optional .fzdeepnet.Trainer pretrainer = 4;</code>
     */
    boolean hasPretrainer();
    /**
     * <code>optional .fzdeepnet.Trainer pretrainer = 4;</code>
     */
    fzdeepnet.Setting.Trainer getPretrainer();
    /**
     * <code>optional .fzdeepnet.Trainer pretrainer = 4;</code>
     */
    fzdeepnet.Setting.TrainerOrBuilder getPretrainerOrBuilder();

    // optional float weight_seed = 5 [default = 0.01];
    /**
     * <code>optional float weight_seed = 5 [default = 0.01];</code>
     */
    boolean hasWeightSeed();
    /**
     * <code>optional float weight_seed = 5 [default = 0.01];</code>
     */
    float getWeightSeed();

    // optional float vbias_seed = 6 [default = 0];
    /**
     * <code>optional float vbias_seed = 6 [default = 0];</code>
     */
    boolean hasVbiasSeed();
    /**
     * <code>optional float vbias_seed = 6 [default = 0];</code>
     */
    float getVbiasSeed();

    // optional float hbias_seed = 7 [default = 0];
    /**
     * <code>optional float hbias_seed = 7 [default = 0];</code>
     */
    boolean hasHbiasSeed();
    /**
     * <code>optional float hbias_seed = 7 [default = 0];</code>
     */
    float getHbiasSeed();

    // optional .fzdeepnet.DeepLayer.INFERENCE inference = 8 [default = PROPAGATION];
    /**
     * <code>optional .fzdeepnet.DeepLayer.INFERENCE inference = 8 [default = PROPAGATION];</code>
     */
    boolean hasInference();
    /**
     * <code>optional .fzdeepnet.DeepLayer.INFERENCE inference = 8 [default = PROPAGATION];</code>
     */
    fzdeepnet.Setting.DeepLayer.INFERENCE getInference();
  }
  /**
   * Protobuf type {@code fzdeepnet.DeepLayer}
   */
  public static final class DeepLayer extends
      com.google.protobuf.GeneratedMessage
      implements DeepLayerOrBuilder {
    // Use DeepLayer.newBuilder() to construct.
    private DeepLayer(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DeepLayer(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DeepLayer defaultInstance;
    public static DeepLayer getDefaultInstance() {
      return defaultInstance;
    }

    public DeepLayer getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DeepLayer(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              visLid_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              hidLid_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              order_ = input.readInt32();
              break;
            }
            case 34: {
              fzdeepnet.Setting.Trainer.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = pretrainer_.toBuilder();
              }
              pretrainer_ = input.readMessage(fzdeepnet.Setting.Trainer.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pretrainer_);
                pretrainer_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              weightSeed_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              vbiasSeed_ = input.readFloat();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              hbiasSeed_ = input.readFloat();
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
              fzdeepnet.Setting.DeepLayer.INFERENCE value = fzdeepnet.Setting.DeepLayer.INFERENCE.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000080;
                inference_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return fzdeepnet.Setting.internal_static_fzdeepnet_DeepLayer_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return fzdeepnet.Setting.internal_static_fzdeepnet_DeepLayer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              fzdeepnet.Setting.DeepLayer.class, fzdeepnet.Setting.DeepLayer.Builder.class);
    }

    public static com.google.protobuf.Parser<DeepLayer> PARSER =
        new com.google.protobuf.AbstractParser<DeepLayer>() {
      public DeepLayer parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DeepLayer(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DeepLayer> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code fzdeepnet.DeepLayer.INFERENCE}
     */
    public enum INFERENCE
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>PROPAGATION = 0;</code>
       */
      PROPAGATION(0, 0),
      /**
       * <code>RECONSTRUC = 1;</code>
       */
      RECONSTRUC(1, 1),
      ;

      /**
       * <code>PROPAGATION = 0;</code>
       */
      public static final int PROPAGATION_VALUE = 0;
      /**
       * <code>RECONSTRUC = 1;</code>
       */
      public static final int RECONSTRUC_VALUE = 1;


      public final int getNumber() { return value; }

      public static INFERENCE valueOf(int value) {
        switch (value) {
          case 0: return PROPAGATION;
          case 1: return RECONSTRUC;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<INFERENCE>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<INFERENCE>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<INFERENCE>() {
              public INFERENCE findValueByNumber(int number) {
                return INFERENCE.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return fzdeepnet.Setting.DeepLayer.getDescriptor().getEnumTypes().get(0);
      }

      private static final INFERENCE[] VALUES = values();

      public static INFERENCE valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private INFERENCE(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:fzdeepnet.DeepLayer.INFERENCE)
    }

    private int bitField0_;
    // required string vis_lid = 1;
    public static final int VIS_LID_FIELD_NUMBER = 1;
    private java.lang.Object visLid_;
    /**
     * <code>required string vis_lid = 1;</code>
     *
     * <pre>
     * visible layer 
     * </pre>
     */
    public boolean hasVisLid() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string vis_lid = 1;</code>
     *
     * <pre>
     * visible layer 
     * </pre>
     */
    public java.lang.String getVisLid() {
      java.lang.Object ref = visLid_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          visLid_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string vis_lid = 1;</code>
     *
     * <pre>
     * visible layer 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getVisLidBytes() {
      java.lang.Object ref = visLid_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        visLid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string hid_lid = 2;
    public static final int HID_LID_FIELD_NUMBER = 2;
    private java.lang.Object hidLid_;
    /**
     * <code>required string hid_lid = 2;</code>
     *
     * <pre>
     * hidden layer
     * </pre>
     */
    public boolean hasHidLid() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string hid_lid = 2;</code>
     *
     * <pre>
     * hidden layer
     * </pre>
     */
    public java.lang.String getHidLid() {
      java.lang.Object ref = hidLid_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          hidLid_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string hid_lid = 2;</code>
     *
     * <pre>
     * hidden layer
     * </pre>
     */
    public com.google.protobuf.ByteString
        getHidLidBytes() {
      java.lang.Object ref = hidLid_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        hidLid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required int32 order = 3;
    public static final int ORDER_FIELD_NUMBER = 3;
    private int order_;
    /**
     * <code>required int32 order = 3;</code>
     *
     * <pre>
     * Oder in pre_train
     * </pre>
     */
    public boolean hasOrder() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 order = 3;</code>
     *
     * <pre>
     * Oder in pre_train
     * </pre>
     */
    public int getOrder() {
      return order_;
    }

    // optional .fzdeepnet.Trainer pretrainer = 4;
    public static final int PRETRAINER_FIELD_NUMBER = 4;
    private fzdeepnet.Setting.Trainer pretrainer_;
    /**
     * <code>optional .fzdeepnet.Trainer pretrainer = 4;</code>
     */
    public boolean hasPretrainer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .fzdeepnet.Trainer pretrainer = 4;</code>
     */
    public fzdeepnet.Setting.Trainer getPretrainer() {
      return pretrainer_;
    }
    /**
     * <code>optional .fzdeepnet.Trainer pretrainer = 4;</code>
     */
    public fzdeepnet.Setting.TrainerOrBuilder getPretrainerOrBuilder() {
      return pretrainer_;
    }

    // optional float weight_seed = 5 [default = 0.01];
    public static final int WEIGHT_SEED_FIELD_NUMBER = 5;
    private float weightSeed_;
    /**
     * <code>optional float weight_seed = 5 [default = 0.01];</code>
     */
    public boolean hasWeightSeed() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float weight_seed = 5 [default = 0.01];</code>
     */
    public float getWeightSeed() {
      return weightSeed_;
    }

    // optional float vbias_seed = 6 [default = 0];
    public static final int VBIAS_SEED_FIELD_NUMBER = 6;
    private float vbiasSeed_;
    /**
     * <code>optional float vbias_seed = 6 [default = 0];</code>
     */
    public boolean hasVbiasSeed() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float vbias_seed = 6 [default = 0];</code>
     */
    public float getVbiasSeed() {
      return vbiasSeed_;
    }

    // optional float hbias_seed = 7 [default = 0];
    public static final int HBIAS_SEED_FIELD_NUMBER = 7;
    private float hbiasSeed_;
    /**
     * <code>optional float hbias_seed = 7 [default = 0];</code>
     */
    public boolean hasHbiasSeed() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float hbias_seed = 7 [default = 0];</code>
     */
    public float getHbiasSeed() {
      return hbiasSeed_;
    }

    // optional .fzdeepnet.DeepLayer.INFERENCE inference = 8 [default = PROPAGATION];
    public static final int INFERENCE_FIELD_NUMBER = 8;
    private fzdeepnet.Setting.DeepLayer.INFERENCE inference_;
    /**
     * <code>optional .fzdeepnet.DeepLayer.INFERENCE inference = 8 [default = PROPAGATION];</code>
     */
    public boolean hasInference() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .fzdeepnet.DeepLayer.INFERENCE inference = 8 [default = PROPAGATION];</code>
     */
    public fzdeepnet.Setting.DeepLayer.INFERENCE getInference() {
      return inference_;
    }

    private void initFields() {
      visLid_ = "";
      hidLid_ = "";
      order_ = 0;
      pretrainer_ = fzdeepnet.Setting.Trainer.getDefaultInstance();
      weightSeed_ = 0.01F;
      vbiasSeed_ = 0F;
      hbiasSeed_ = 0F;
      inference_ = fzdeepnet.Setting.DeepLayer.INFERENCE.PROPAGATION;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasVisLid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHidLid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasOrder()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasPretrainer()) {
        if (!getPretrainer().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getVisLidBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getHidLidBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, order_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, pretrainer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, weightSeed_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, vbiasSeed_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(7, hbiasSeed_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(8, inference_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getVisLidBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getHidLidBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, order_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, pretrainer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, weightSeed_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, vbiasSeed_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, hbiasSeed_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, inference_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static fzdeepnet.Setting.DeepLayer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fzdeepnet.Setting.DeepLayer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fzdeepnet.Setting.DeepLayer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fzdeepnet.Setting.DeepLayer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fzdeepnet.Setting.DeepLayer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static fzdeepnet.Setting.DeepLayer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static fzdeepnet.Setting.DeepLayer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static fzdeepnet.Setting.DeepLayer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static fzdeepnet.Setting.DeepLayer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static fzdeepnet.Setting.DeepLayer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(fzdeepnet.Setting.DeepLayer prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code fzdeepnet.DeepLayer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements fzdeepnet.Setting.DeepLayerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return fzdeepnet.Setting.internal_static_fzdeepnet_DeepLayer_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return fzdeepnet.Setting.internal_static_fzdeepnet_DeepLayer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                fzdeepnet.Setting.DeepLayer.class, fzdeepnet.Setting.DeepLayer.Builder.class);
      }

      // Construct using fzdeepnet.Setting.DeepLayer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPretrainerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        visLid_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        hidLid_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        order_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (pretrainerBuilder_ == null) {
          pretrainer_ = fzdeepnet.Setting.Trainer.getDefaultInstance();
        } else {
          pretrainerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        weightSeed_ = 0.01F;
        bitField0_ = (bitField0_ & ~0x00000010);
        vbiasSeed_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        hbiasSeed_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        inference_ = fzdeepnet.Setting.DeepLayer.INFERENCE.PROPAGATION;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return fzdeepnet.Setting.internal_static_fzdeepnet_DeepLayer_descriptor;
      }

      public fzdeepnet.Setting.DeepLayer getDefaultInstanceForType() {
        return fzdeepnet.Setting.DeepLayer.getDefaultInstance();
      }

      public fzdeepnet.Setting.DeepLayer build() {
        fzdeepnet.Setting.DeepLayer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public fzdeepnet.Setting.DeepLayer buildPartial() {
        fzdeepnet.Setting.DeepLayer result = new fzdeepnet.Setting.DeepLayer(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.visLid_ = visLid_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.hidLid_ = hidLid_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.order_ = order_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (pretrainerBuilder_ == null) {
          result.pretrainer_ = pretrainer_;
        } else {
          result.pretrainer_ = pretrainerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.weightSeed_ = weightSeed_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.vbiasSeed_ = vbiasSeed_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.hbiasSeed_ = hbiasSeed_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.inference_ = inference_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof fzdeepnet.Setting.DeepLayer) {
          return mergeFrom((fzdeepnet.Setting.DeepLayer)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(fzdeepnet.Setting.DeepLayer other) {
        if (other == fzdeepnet.Setting.DeepLayer.getDefaultInstance()) return this;
        if (other.hasVisLid()) {
          bitField0_ |= 0x00000001;
          visLid_ = other.visLid_;
          onChanged();
        }
        if (other.hasHidLid()) {
          bitField0_ |= 0x00000002;
          hidLid_ = other.hidLid_;
          onChanged();
        }
        if (other.hasOrder()) {
          setOrder(other.getOrder());
        }
        if (other.hasPretrainer()) {
          mergePretrainer(other.getPretrainer());
        }
        if (other.hasWeightSeed()) {
          setWeightSeed(other.getWeightSeed());
        }
        if (other.hasVbiasSeed()) {
          setVbiasSeed(other.getVbiasSeed());
        }
        if (other.hasHbiasSeed()) {
          setHbiasSeed(other.getHbiasSeed());
        }
        if (other.hasInference()) {
          setInference(other.getInference());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasVisLid()) {
          
          return false;
        }
        if (!hasHidLid()) {
          
          return false;
        }
        if (!hasOrder()) {
          
          return false;
        }
        if (hasPretrainer()) {
          if (!getPretrainer().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        fzdeepnet.Setting.DeepLayer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (fzdeepnet.Setting.DeepLayer) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string vis_lid = 1;
      private java.lang.Object visLid_ = "";
      /**
       * <code>required string vis_lid = 1;</code>
       *
       * <pre>
       * visible layer 
       * </pre>
       */
      public boolean hasVisLid() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string vis_lid = 1;</code>
       *
       * <pre>
       * visible layer 
       * </pre>
       */
      public java.lang.String getVisLid() {
        java.lang.Object ref = visLid_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          visLid_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string vis_lid = 1;</code>
       *
       * <pre>
       * visible layer 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getVisLidBytes() {
        java.lang.Object ref = visLid_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          visLid_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string vis_lid = 1;</code>
       *
       * <pre>
       * visible layer 
       * </pre>
       */
      public Builder setVisLid(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        visLid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string vis_lid = 1;</code>
       *
       * <pre>
       * visible layer 
       * </pre>
       */
      public Builder clearVisLid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        visLid_ = getDefaultInstance().getVisLid();
        onChanged();
        return this;
      }
      /**
       * <code>required string vis_lid = 1;</code>
       *
       * <pre>
       * visible layer 
       * </pre>
       */
      public Builder setVisLidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        visLid_ = value;
        onChanged();
        return this;
      }

      // required string hid_lid = 2;
      private java.lang.Object hidLid_ = "";
      /**
       * <code>required string hid_lid = 2;</code>
       *
       * <pre>
       * hidden layer
       * </pre>
       */
      public boolean hasHidLid() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string hid_lid = 2;</code>
       *
       * <pre>
       * hidden layer
       * </pre>
       */
      public java.lang.String getHidLid() {
        java.lang.Object ref = hidLid_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          hidLid_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string hid_lid = 2;</code>
       *
       * <pre>
       * hidden layer
       * </pre>
       */
      public com.google.protobuf.ByteString
          getHidLidBytes() {
        java.lang.Object ref = hidLid_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          hidLid_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string hid_lid = 2;</code>
       *
       * <pre>
       * hidden layer
       * </pre>
       */
      public Builder setHidLid(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        hidLid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string hid_lid = 2;</code>
       *
       * <pre>
       * hidden layer
       * </pre>
       */
      public Builder clearHidLid() {
        bitField0_ = (bitField0_ & ~0x00000002);
        hidLid_ = getDefaultInstance().getHidLid();
        onChanged();
        return this;
      }
      /**
       * <code>required string hid_lid = 2;</code>
       *
       * <pre>
       * hidden layer
       * </pre>
       */
      public Builder setHidLidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        hidLid_ = value;
        onChanged();
        return this;
      }

      // required int32 order = 3;
      private int order_ ;
      /**
       * <code>required int32 order = 3;</code>
       *
       * <pre>
       * Oder in pre_train
       * </pre>
       */
      public boolean hasOrder() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 order = 3;</code>
       *
       * <pre>
       * Oder in pre_train
       * </pre>
       */
      public int getOrder() {
        return order_;
      }
      /**
       * <code>required int32 order = 3;</code>
       *
       * <pre>
       * Oder in pre_train
       * </pre>
       */
      public Builder setOrder(int value) {
        bitField0_ |= 0x00000004;
        order_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 order = 3;</code>
       *
       * <pre>
       * Oder in pre_train
       * </pre>
       */
      public Builder clearOrder() {
        bitField0_ = (bitField0_ & ~0x00000004);
        order_ = 0;
        onChanged();
        return this;
      }

      // optional .fzdeepnet.Trainer pretrainer = 4;
      private fzdeepnet.Setting.Trainer pretrainer_ = fzdeepnet.Setting.Trainer.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          fzdeepnet.Setting.Trainer, fzdeepnet.Setting.Trainer.Builder, fzdeepnet.Setting.TrainerOrBuilder> pretrainerBuilder_;
      /**
       * <code>optional .fzdeepnet.Trainer pretrainer = 4;</code>
       */
      public boolean hasPretrainer() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .fzdeepnet.Trainer pretrainer = 4;</code>
       */
      public fzdeepnet.Setting.Trainer getPretrainer() {
        if (pretrainerBuilder_ == null) {
          return pretrainer_;
        } else {
          return pretrainerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .fzdeepnet.Trainer pretrainer = 4;</code>
       */
      public Builder setPretrainer(fzdeepnet.Setting.Trainer value) {
        if (pretrainerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pretrainer_ = value;
          onChanged();
        } else {
          pretrainerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer pretrainer = 4;</code>
       */
      public Builder setPretrainer(
          fzdeepnet.Setting.Trainer.Builder builderForValue) {
        if (pretrainerBuilder_ == null) {
          pretrainer_ = builderForValue.build();
          onChanged();
        } else {
          pretrainerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer pretrainer = 4;</code>
       */
      public Builder mergePretrainer(fzdeepnet.Setting.Trainer value) {
        if (pretrainerBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              pretrainer_ != fzdeepnet.Setting.Trainer.getDefaultInstance()) {
            pretrainer_ =
              fzdeepnet.Setting.Trainer.newBuilder(pretrainer_).mergeFrom(value).buildPartial();
          } else {
            pretrainer_ = value;
          }
          onChanged();
        } else {
          pretrainerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer pretrainer = 4;</code>
       */
      public Builder clearPretrainer() {
        if (pretrainerBuilder_ == null) {
          pretrainer_ = fzdeepnet.Setting.Trainer.getDefaultInstance();
          onChanged();
        } else {
          pretrainerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer pretrainer = 4;</code>
       */
      public fzdeepnet.Setting.Trainer.Builder getPretrainerBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getPretrainerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .fzdeepnet.Trainer pretrainer = 4;</code>
       */
      public fzdeepnet.Setting.TrainerOrBuilder getPretrainerOrBuilder() {
        if (pretrainerBuilder_ != null) {
          return pretrainerBuilder_.getMessageOrBuilder();
        } else {
          return pretrainer_;
        }
      }
      /**
       * <code>optional .fzdeepnet.Trainer pretrainer = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          fzdeepnet.Setting.Trainer, fzdeepnet.Setting.Trainer.Builder, fzdeepnet.Setting.TrainerOrBuilder> 
          getPretrainerFieldBuilder() {
        if (pretrainerBuilder_ == null) {
          pretrainerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              fzdeepnet.Setting.Trainer, fzdeepnet.Setting.Trainer.Builder, fzdeepnet.Setting.TrainerOrBuilder>(
                  pretrainer_,
                  getParentForChildren(),
                  isClean());
          pretrainer_ = null;
        }
        return pretrainerBuilder_;
      }

      // optional float weight_seed = 5 [default = 0.01];
      private float weightSeed_ = 0.01F;
      /**
       * <code>optional float weight_seed = 5 [default = 0.01];</code>
       */
      public boolean hasWeightSeed() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float weight_seed = 5 [default = 0.01];</code>
       */
      public float getWeightSeed() {
        return weightSeed_;
      }
      /**
       * <code>optional float weight_seed = 5 [default = 0.01];</code>
       */
      public Builder setWeightSeed(float value) {
        bitField0_ |= 0x00000010;
        weightSeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float weight_seed = 5 [default = 0.01];</code>
       */
      public Builder clearWeightSeed() {
        bitField0_ = (bitField0_ & ~0x00000010);
        weightSeed_ = 0.01F;
        onChanged();
        return this;
      }

      // optional float vbias_seed = 6 [default = 0];
      private float vbiasSeed_ ;
      /**
       * <code>optional float vbias_seed = 6 [default = 0];</code>
       */
      public boolean hasVbiasSeed() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float vbias_seed = 6 [default = 0];</code>
       */
      public float getVbiasSeed() {
        return vbiasSeed_;
      }
      /**
       * <code>optional float vbias_seed = 6 [default = 0];</code>
       */
      public Builder setVbiasSeed(float value) {
        bitField0_ |= 0x00000020;
        vbiasSeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vbias_seed = 6 [default = 0];</code>
       */
      public Builder clearVbiasSeed() {
        bitField0_ = (bitField0_ & ~0x00000020);
        vbiasSeed_ = 0F;
        onChanged();
        return this;
      }

      // optional float hbias_seed = 7 [default = 0];
      private float hbiasSeed_ ;
      /**
       * <code>optional float hbias_seed = 7 [default = 0];</code>
       */
      public boolean hasHbiasSeed() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float hbias_seed = 7 [default = 0];</code>
       */
      public float getHbiasSeed() {
        return hbiasSeed_;
      }
      /**
       * <code>optional float hbias_seed = 7 [default = 0];</code>
       */
      public Builder setHbiasSeed(float value) {
        bitField0_ |= 0x00000040;
        hbiasSeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float hbias_seed = 7 [default = 0];</code>
       */
      public Builder clearHbiasSeed() {
        bitField0_ = (bitField0_ & ~0x00000040);
        hbiasSeed_ = 0F;
        onChanged();
        return this;
      }

      // optional .fzdeepnet.DeepLayer.INFERENCE inference = 8 [default = PROPAGATION];
      private fzdeepnet.Setting.DeepLayer.INFERENCE inference_ = fzdeepnet.Setting.DeepLayer.INFERENCE.PROPAGATION;
      /**
       * <code>optional .fzdeepnet.DeepLayer.INFERENCE inference = 8 [default = PROPAGATION];</code>
       */
      public boolean hasInference() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .fzdeepnet.DeepLayer.INFERENCE inference = 8 [default = PROPAGATION];</code>
       */
      public fzdeepnet.Setting.DeepLayer.INFERENCE getInference() {
        return inference_;
      }
      /**
       * <code>optional .fzdeepnet.DeepLayer.INFERENCE inference = 8 [default = PROPAGATION];</code>
       */
      public Builder setInference(fzdeepnet.Setting.DeepLayer.INFERENCE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        inference_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .fzdeepnet.DeepLayer.INFERENCE inference = 8 [default = PROPAGATION];</code>
       */
      public Builder clearInference() {
        bitField0_ = (bitField0_ & ~0x00000080);
        inference_ = fzdeepnet.Setting.DeepLayer.INFERENCE.PROPAGATION;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:fzdeepnet.DeepLayer)
    }

    static {
      defaultInstance = new DeepLayer(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:fzdeepnet.DeepLayer)
  }

  public interface TrainerOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 epochs = 1;
    /**
     * <code>required int32 epochs = 1;</code>
     */
    boolean hasEpochs();
    /**
     * <code>required int32 epochs = 1;</code>
     */
    int getEpochs();

    // optional int32 batches = 2 [default = 0];
    /**
     * <code>optional int32 batches = 2 [default = 0];</code>
     */
    boolean hasBatches();
    /**
     * <code>optional int32 batches = 2 [default = 0];</code>
     */
    int getBatches();

    // required int32 batch_size = 3;
    /**
     * <code>required int32 batch_size = 3;</code>
     */
    boolean hasBatchSize();
    /**
     * <code>required int32 batch_size = 3;</code>
     */
    int getBatchSize();

    // optional float learning_rate = 4 [default = 0.001];
    /**
     * <code>optional float learning_rate = 4 [default = 0.001];</code>
     */
    boolean hasLearningRate();
    /**
     * <code>optional float learning_rate = 4 [default = 0.001];</code>
     */
    float getLearningRate();

    // optional .fzdeepnet.Trainer.Decay learning_rate_decay = 5 [default = NO_DECAY];
    /**
     * <code>optional .fzdeepnet.Trainer.Decay learning_rate_decay = 5 [default = NO_DECAY];</code>
     */
    boolean hasLearningRateDecay();
    /**
     * <code>optional .fzdeepnet.Trainer.Decay learning_rate_decay = 5 [default = NO_DECAY];</code>
     */
    fzdeepnet.Setting.Trainer.Decay getLearningRateDecay();

    // optional float learning_rate_decay_param = 6 [default = 0.1];
    /**
     * <code>optional float learning_rate_decay_param = 6 [default = 0.1];</code>
     */
    boolean hasLearningRateDecayParam();
    /**
     * <code>optional float learning_rate_decay_param = 6 [default = 0.1];</code>
     */
    float getLearningRateDecayParam();

    // optional float learning_rate_final = 7 [default = 0.001];
    /**
     * <code>optional float learning_rate_final = 7 [default = 0.001];</code>
     *
     * <pre>
     * use the step to change
     * </pre>
     */
    boolean hasLearningRateFinal();
    /**
     * <code>optional float learning_rate_final = 7 [default = 0.001];</code>
     *
     * <pre>
     * use the step to change
     * </pre>
     */
    float getLearningRateFinal();

    // optional float initial_momentum = 8 [default = 0];
    /**
     * <code>optional float initial_momentum = 8 [default = 0];</code>
     *
     * <pre>
     * momentum
     * </pre>
     */
    boolean hasInitialMomentum();
    /**
     * <code>optional float initial_momentum = 8 [default = 0];</code>
     *
     * <pre>
     * momentum
     * </pre>
     */
    float getInitialMomentum();

    // optional .fzdeepnet.Trainer.Decay momentum_decay = 9 [default = NO_DECAY];
    /**
     * <code>optional .fzdeepnet.Trainer.Decay momentum_decay = 9 [default = NO_DECAY];</code>
     */
    boolean hasMomentumDecay();
    /**
     * <code>optional .fzdeepnet.Trainer.Decay momentum_decay = 9 [default = NO_DECAY];</code>
     */
    fzdeepnet.Setting.Trainer.Decay getMomentumDecay();

    // optional float momentum_decay_param = 10 [default = 0.1];
    /**
     * <code>optional float momentum_decay_param = 10 [default = 0.1];</code>
     */
    boolean hasMomentumDecayParam();
    /**
     * <code>optional float momentum_decay_param = 10 [default = 0.1];</code>
     */
    float getMomentumDecayParam();

    // optional float final_momentum = 11 [default = 0];
    /**
     * <code>optional float final_momentum = 11 [default = 0];</code>
     */
    boolean hasFinalMomentum();
    /**
     * <code>optional float final_momentum = 11 [default = 0];</code>
     */
    float getFinalMomentum();

    // optional .fzdeepnet.Trainer.TType type = 12 [default = NONE];
    /**
     * <code>optional .fzdeepnet.Trainer.TType type = 12 [default = NONE];</code>
     */
    boolean hasType();
    /**
     * <code>optional .fzdeepnet.Trainer.TType type = 12 [default = NONE];</code>
     */
    fzdeepnet.Setting.Trainer.TType getType();

    // optional .fzdeepnet.Trainer.RBMBASE rbm_train = 13 [default = NORBM];
    /**
     * <code>optional .fzdeepnet.Trainer.RBMBASE rbm_train = 13 [default = NORBM];</code>
     */
    boolean hasRbmTrain();
    /**
     * <code>optional .fzdeepnet.Trainer.RBMBASE rbm_train = 13 [default = NORBM];</code>
     */
    fzdeepnet.Setting.Trainer.RBMBASE getRbmTrain();

    // optional int32 gibbs_num = 14 [default = 1];
    /**
     * <code>optional int32 gibbs_num = 14 [default = 1];</code>
     */
    boolean hasGibbsNum();
    /**
     * <code>optional int32 gibbs_num = 14 [default = 1];</code>
     */
    int getGibbsNum();

    // optional .fzdeepnet.Trainer.AEBASE ae_train = 15 [default = NOAE];
    /**
     * <code>optional .fzdeepnet.Trainer.AEBASE ae_train = 15 [default = NOAE];</code>
     */
    boolean hasAeTrain();
    /**
     * <code>optional .fzdeepnet.Trainer.AEBASE ae_train = 15 [default = NOAE];</code>
     */
    fzdeepnet.Setting.Trainer.AEBASE getAeTrain();

    // optional .fzdeepnet.Trainer.BAMBASE bam_train = 16 [default = NOBAM];
    /**
     * <code>optional .fzdeepnet.Trainer.BAMBASE bam_train = 16 [default = NOBAM];</code>
     */
    boolean hasBamTrain();
    /**
     * <code>optional .fzdeepnet.Trainer.BAMBASE bam_train = 16 [default = NOBAM];</code>
     */
    fzdeepnet.Setting.Trainer.BAMBASE getBamTrain();

    // optional int32 pseudo_gibbs_num = 17 [default = 0];
    /**
     * <code>optional int32 pseudo_gibbs_num = 17 [default = 0];</code>
     */
    boolean hasPseudoGibbsNum();
    /**
     * <code>optional int32 pseudo_gibbs_num = 17 [default = 0];</code>
     */
    int getPseudoGibbsNum();

    // optional .fzdeepnet.Trainer.DBNBASE dbn_train = 18 [default = NODBN];
    /**
     * <code>optional .fzdeepnet.Trainer.DBNBASE dbn_train = 18 [default = NODBN];</code>
     */
    boolean hasDbnTrain();
    /**
     * <code>optional .fzdeepnet.Trainer.DBNBASE dbn_train = 18 [default = NODBN];</code>
     */
    fzdeepnet.Setting.Trainer.DBNBASE getDbnTrain();

    // optional .fzdeepnet.Trainer.DBMBASE dbm_train = 19 [default = NODBM];
    /**
     * <code>optional .fzdeepnet.Trainer.DBMBASE dbm_train = 19 [default = NODBM];</code>
     */
    boolean hasDbmTrain();
    /**
     * <code>optional .fzdeepnet.Trainer.DBMBASE dbm_train = 19 [default = NODBM];</code>
     */
    fzdeepnet.Setting.Trainer.DBMBASE getDbmTrain();

    // optional .fzdeepnet.Trainer.DBAMBASE dbam_train = 20 [default = NODBAM];
    /**
     * <code>optional .fzdeepnet.Trainer.DBAMBASE dbam_train = 20 [default = NODBAM];</code>
     */
    boolean hasDbamTrain();
    /**
     * <code>optional .fzdeepnet.Trainer.DBAMBASE dbam_train = 20 [default = NODBAM];</code>
     */
    fzdeepnet.Setting.Trainer.DBAMBASE getDbamTrain();

    // optional .fzdeepnet.Trainer.NNBASE nn_train = 21;
    /**
     * <code>optional .fzdeepnet.Trainer.NNBASE nn_train = 21;</code>
     */
    boolean hasNnTrain();
    /**
     * <code>optional .fzdeepnet.Trainer.NNBASE nn_train = 21;</code>
     */
    fzdeepnet.Setting.Trainer.NNBASE getNnTrain();

    // optional .fzdeepnet.Trainer.COSTFUNC nn_cost = 22;
    /**
     * <code>optional .fzdeepnet.Trainer.COSTFUNC nn_cost = 22;</code>
     */
    boolean hasNnCost();
    /**
     * <code>optional .fzdeepnet.Trainer.COSTFUNC nn_cost = 22;</code>
     */
    fzdeepnet.Setting.Trainer.COSTFUNC getNnCost();

    // optional float weight_norm = 23 [default = 0];
    /**
     * <code>optional float weight_norm = 23 [default = 0];</code>
     *
     * <pre>
     *------------ REGULARIZATION ------
     * Weight  L2 norm	
     * </pre>
     */
    boolean hasWeightNorm();
    /**
     * <code>optional float weight_norm = 23 [default = 0];</code>
     *
     * <pre>
     *------------ REGULARIZATION ------
     * Weight  L2 norm	
     * </pre>
     */
    float getWeightNorm();

    // optional .fzdeepnet.Trainer.SPARSITY sparsity = 24 [default = NOSPARSE];
    /**
     * <code>optional .fzdeepnet.Trainer.SPARSITY sparsity = 24 [default = NOSPARSE];</code>
     */
    boolean hasSparsity();
    /**
     * <code>optional .fzdeepnet.Trainer.SPARSITY sparsity = 24 [default = NOSPARSE];</code>
     */
    fzdeepnet.Setting.Trainer.SPARSITY getSparsity();

    // optional float s_lambda = 25 [default = 0];
    /**
     * <code>optional float s_lambda = 25 [default = 0];</code>
     */
    boolean hasSLambda();
    /**
     * <code>optional float s_lambda = 25 [default = 0];</code>
     */
    float getSLambda();

    // optional float p = 26 [default = 0];
    /**
     * <code>optional float p = 26 [default = 0];</code>
     */
    boolean hasP();
    /**
     * <code>optional float p = 26 [default = 0];</code>
     */
    float getP();

    // optional int32 early_stopping = 27 [default = 0];
    /**
     * <code>optional int32 early_stopping = 27 [default = 0];</code>
     *
     * <pre>
     * ----------- EARLY STOPPING
     * </pre>
     */
    boolean hasEarlyStopping();
    /**
     * <code>optional int32 early_stopping = 27 [default = 0];</code>
     *
     * <pre>
     * ----------- EARLY STOPPING
     * </pre>
     */
    int getEarlyStopping();

    // optional float es_learning_rate_decay = 28 [default = 0];
    /**
     * <code>optional float es_learning_rate_decay = 28 [default = 0];</code>
     *
     * <pre>
     * Exponential param
     * </pre>
     */
    boolean hasEsLearningRateDecay();
    /**
     * <code>optional float es_learning_rate_decay = 28 [default = 0];</code>
     *
     * <pre>
     * Exponential param
     * </pre>
     */
    float getEsLearningRateDecay();

    // optional float es_momentum_decay = 29 [default = 0];
    /**
     * <code>optional float es_momentum_decay = 29 [default = 0];</code>
     *
     * <pre>
     * Exponential param
     * </pre>
     */
    boolean hasEsMomentumDecay();
    /**
     * <code>optional float es_momentum_decay = 29 [default = 0];</code>
     *
     * <pre>
     * Exponential param
     * </pre>
     */
    float getEsMomentumDecay();
  }
  /**
   * Protobuf type {@code fzdeepnet.Trainer}
   */
  public static final class Trainer extends
      com.google.protobuf.GeneratedMessage
      implements TrainerOrBuilder {
    // Use Trainer.newBuilder() to construct.
    private Trainer(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Trainer(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Trainer defaultInstance;
    public static Trainer getDefaultInstance() {
      return defaultInstance;
    }

    public Trainer getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Trainer(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              epochs_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              batches_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              batchSize_ = input.readInt32();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              learningRate_ = input.readFloat();
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              fzdeepnet.Setting.Trainer.Decay value = fzdeepnet.Setting.Trainer.Decay.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                learningRateDecay_ = value;
              }
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              learningRateDecayParam_ = input.readFloat();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              learningRateFinal_ = input.readFloat();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              initialMomentum_ = input.readFloat();
              break;
            }
            case 72: {
              int rawValue = input.readEnum();
              fzdeepnet.Setting.Trainer.Decay value = fzdeepnet.Setting.Trainer.Decay.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(9, rawValue);
              } else {
                bitField0_ |= 0x00000100;
                momentumDecay_ = value;
              }
              break;
            }
            case 85: {
              bitField0_ |= 0x00000200;
              momentumDecayParam_ = input.readFloat();
              break;
            }
            case 93: {
              bitField0_ |= 0x00000400;
              finalMomentum_ = input.readFloat();
              break;
            }
            case 96: {
              int rawValue = input.readEnum();
              fzdeepnet.Setting.Trainer.TType value = fzdeepnet.Setting.Trainer.TType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(12, rawValue);
              } else {
                bitField0_ |= 0x00000800;
                type_ = value;
              }
              break;
            }
            case 104: {
              int rawValue = input.readEnum();
              fzdeepnet.Setting.Trainer.RBMBASE value = fzdeepnet.Setting.Trainer.RBMBASE.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(13, rawValue);
              } else {
                bitField0_ |= 0x00001000;
                rbmTrain_ = value;
              }
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              gibbsNum_ = input.readInt32();
              break;
            }
            case 120: {
              int rawValue = input.readEnum();
              fzdeepnet.Setting.Trainer.AEBASE value = fzdeepnet.Setting.Trainer.AEBASE.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(15, rawValue);
              } else {
                bitField0_ |= 0x00004000;
                aeTrain_ = value;
              }
              break;
            }
            case 128: {
              int rawValue = input.readEnum();
              fzdeepnet.Setting.Trainer.BAMBASE value = fzdeepnet.Setting.Trainer.BAMBASE.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(16, rawValue);
              } else {
                bitField0_ |= 0x00008000;
                bamTrain_ = value;
              }
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              pseudoGibbsNum_ = input.readInt32();
              break;
            }
            case 144: {
              int rawValue = input.readEnum();
              fzdeepnet.Setting.Trainer.DBNBASE value = fzdeepnet.Setting.Trainer.DBNBASE.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(18, rawValue);
              } else {
                bitField0_ |= 0x00020000;
                dbnTrain_ = value;
              }
              break;
            }
            case 152: {
              int rawValue = input.readEnum();
              fzdeepnet.Setting.Trainer.DBMBASE value = fzdeepnet.Setting.Trainer.DBMBASE.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(19, rawValue);
              } else {
                bitField0_ |= 0x00040000;
                dbmTrain_ = value;
              }
              break;
            }
            case 160: {
              int rawValue = input.readEnum();
              fzdeepnet.Setting.Trainer.DBAMBASE value = fzdeepnet.Setting.Trainer.DBAMBASE.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(20, rawValue);
              } else {
                bitField0_ |= 0x00080000;
                dbamTrain_ = value;
              }
              break;
            }
            case 168: {
              int rawValue = input.readEnum();
              fzdeepnet.Setting.Trainer.NNBASE value = fzdeepnet.Setting.Trainer.NNBASE.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(21, rawValue);
              } else {
                bitField0_ |= 0x00100000;
                nnTrain_ = value;
              }
              break;
            }
            case 176: {
              int rawValue = input.readEnum();
              fzdeepnet.Setting.Trainer.COSTFUNC value = fzdeepnet.Setting.Trainer.COSTFUNC.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(22, rawValue);
              } else {
                bitField0_ |= 0x00200000;
                nnCost_ = value;
              }
              break;
            }
            case 189: {
              bitField0_ |= 0x00400000;
              weightNorm_ = input.readFloat();
              break;
            }
            case 192: {
              int rawValue = input.readEnum();
              fzdeepnet.Setting.Trainer.SPARSITY value = fzdeepnet.Setting.Trainer.SPARSITY.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(24, rawValue);
              } else {
                bitField0_ |= 0x00800000;
                sparsity_ = value;
              }
              break;
            }
            case 205: {
              bitField0_ |= 0x01000000;
              sLambda_ = input.readFloat();
              break;
            }
            case 213: {
              bitField0_ |= 0x02000000;
              p_ = input.readFloat();
              break;
            }
            case 216: {
              bitField0_ |= 0x04000000;
              earlyStopping_ = input.readInt32();
              break;
            }
            case 229: {
              bitField0_ |= 0x08000000;
              esLearningRateDecay_ = input.readFloat();
              break;
            }
            case 237: {
              bitField0_ |= 0x10000000;
              esMomentumDecay_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return fzdeepnet.Setting.internal_static_fzdeepnet_Trainer_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return fzdeepnet.Setting.internal_static_fzdeepnet_Trainer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              fzdeepnet.Setting.Trainer.class, fzdeepnet.Setting.Trainer.Builder.class);
    }

    public static com.google.protobuf.Parser<Trainer> PARSER =
        new com.google.protobuf.AbstractParser<Trainer>() {
      public Trainer parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Trainer(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Trainer> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code fzdeepnet.Trainer.Decay}
     *
     * <pre>
     * learning rate
     * </pre>
     */
    public enum Decay
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NO_DECAY = 0;</code>
       */
      NO_DECAY(0, 0),
      /**
       * <code>INVERSE_T = 1;</code>
       *
       * <pre>
       * a = a0/t
       * </pre>
       */
      INVERSE_T(1, 1),
      /**
       * <code>EXPONENTIAL = 2;</code>
       *
       * <pre>
       * a = a0/(1+param)^t
       * </pre>
       */
      EXPONENTIAL(2, 2),
      /**
       * <code>TWO_STEP = 3;</code>
       *
       * <pre>
       * a = final at step param
       * </pre>
       */
      TWO_STEP(3, 3),
      ;

      /**
       * <code>NO_DECAY = 0;</code>
       */
      public static final int NO_DECAY_VALUE = 0;
      /**
       * <code>INVERSE_T = 1;</code>
       *
       * <pre>
       * a = a0/t
       * </pre>
       */
      public static final int INVERSE_T_VALUE = 1;
      /**
       * <code>EXPONENTIAL = 2;</code>
       *
       * <pre>
       * a = a0/(1+param)^t
       * </pre>
       */
      public static final int EXPONENTIAL_VALUE = 2;
      /**
       * <code>TWO_STEP = 3;</code>
       *
       * <pre>
       * a = final at step param
       * </pre>
       */
      public static final int TWO_STEP_VALUE = 3;


      public final int getNumber() { return value; }

      public static Decay valueOf(int value) {
        switch (value) {
          case 0: return NO_DECAY;
          case 1: return INVERSE_T;
          case 2: return EXPONENTIAL;
          case 3: return TWO_STEP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Decay>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Decay>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Decay>() {
              public Decay findValueByNumber(int number) {
                return Decay.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return fzdeepnet.Setting.Trainer.getDescriptor().getEnumTypes().get(0);
      }

      private static final Decay[] VALUES = values();

      public static Decay valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Decay(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:fzdeepnet.Trainer.Decay)
    }

    /**
     * Protobuf enum {@code fzdeepnet.Trainer.TType}
     */
    public enum TType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NONE = 0;</code>
       */
      NONE(0, 0),
      /**
       * <code>PRE_TRAIN = 1;</code>
       */
      PRE_TRAIN(1, 1),
      /**
       * <code>GEN_FINETUNE = 2;</code>
       */
      GEN_FINETUNE(2, 2),
      /**
       * <code>DIS_FINETUNE = 3;</code>
       */
      DIS_FINETUNE(3, 3),
      ;

      /**
       * <code>NONE = 0;</code>
       */
      public static final int NONE_VALUE = 0;
      /**
       * <code>PRE_TRAIN = 1;</code>
       */
      public static final int PRE_TRAIN_VALUE = 1;
      /**
       * <code>GEN_FINETUNE = 2;</code>
       */
      public static final int GEN_FINETUNE_VALUE = 2;
      /**
       * <code>DIS_FINETUNE = 3;</code>
       */
      public static final int DIS_FINETUNE_VALUE = 3;


      public final int getNumber() { return value; }

      public static TType valueOf(int value) {
        switch (value) {
          case 0: return NONE;
          case 1: return PRE_TRAIN;
          case 2: return GEN_FINETUNE;
          case 3: return DIS_FINETUNE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<TType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TType>() {
              public TType findValueByNumber(int number) {
                return TType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return fzdeepnet.Setting.Trainer.getDescriptor().getEnumTypes().get(1);
      }

      private static final TType[] VALUES = values();

      public static TType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private TType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:fzdeepnet.Trainer.TType)
    }

    /**
     * Protobuf enum {@code fzdeepnet.Trainer.RBMBASE}
     *
     * <pre>
     * ------------ RBM style ----------
     * </pre>
     */
    public enum RBMBASE
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NORBM = 0;</code>
       */
      NORBM(0, 0),
      /**
       * <code>CD = 1;</code>
       *
       * <pre>
       * Hinton's
       * </pre>
       */
      CD(1, 1),
      /**
       * <code>PCD = 2;</code>
       *
       * <pre>
       * Tieleman's
       * </pre>
       */
      PCD(2, 2),
      /**
       * <code>FAST_WEIGHT = 3;</code>
       *
       * <pre>
       *Tieleman's 
       * </pre>
       */
      FAST_WEIGHT(3, 3),
      /**
       * <code>ADAPTIVE_LR = 4;</code>
       *
       * <pre>
       * Cho's
       * </pre>
       */
      ADAPTIVE_LR(4, 4),
      ;

      /**
       * <code>NORBM = 0;</code>
       */
      public static final int NORBM_VALUE = 0;
      /**
       * <code>CD = 1;</code>
       *
       * <pre>
       * Hinton's
       * </pre>
       */
      public static final int CD_VALUE = 1;
      /**
       * <code>PCD = 2;</code>
       *
       * <pre>
       * Tieleman's
       * </pre>
       */
      public static final int PCD_VALUE = 2;
      /**
       * <code>FAST_WEIGHT = 3;</code>
       *
       * <pre>
       *Tieleman's 
       * </pre>
       */
      public static final int FAST_WEIGHT_VALUE = 3;
      /**
       * <code>ADAPTIVE_LR = 4;</code>
       *
       * <pre>
       * Cho's
       * </pre>
       */
      public static final int ADAPTIVE_LR_VALUE = 4;


      public final int getNumber() { return value; }

      public static RBMBASE valueOf(int value) {
        switch (value) {
          case 0: return NORBM;
          case 1: return CD;
          case 2: return PCD;
          case 3: return FAST_WEIGHT;
          case 4: return ADAPTIVE_LR;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<RBMBASE>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<RBMBASE>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RBMBASE>() {
              public RBMBASE findValueByNumber(int number) {
                return RBMBASE.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return fzdeepnet.Setting.Trainer.getDescriptor().getEnumTypes().get(2);
      }

      private static final RBMBASE[] VALUES = values();

      public static RBMBASE valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private RBMBASE(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:fzdeepnet.Trainer.RBMBASE)
    }

    /**
     * Protobuf enum {@code fzdeepnet.Trainer.AEBASE}
     *
     * <pre>
     * ------------ AE style ------------
     * </pre>
     */
    public enum AEBASE
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NOAE = 0;</code>
       */
      NOAE(0, 0),
      /**
       * <code>CROSS_ENTROPY = 1;</code>
       *
       * <pre>
       * Bengio's
       * </pre>
       */
      CROSS_ENTROPY(1, 1),
      /**
       * <code>BACK_PROB = 2;</code>
       *
       * <pre>
       * Ng's
       * </pre>
       */
      BACK_PROB(2, 2),
      ;

      /**
       * <code>NOAE = 0;</code>
       */
      public static final int NOAE_VALUE = 0;
      /**
       * <code>CROSS_ENTROPY = 1;</code>
       *
       * <pre>
       * Bengio's
       * </pre>
       */
      public static final int CROSS_ENTROPY_VALUE = 1;
      /**
       * <code>BACK_PROB = 2;</code>
       *
       * <pre>
       * Ng's
       * </pre>
       */
      public static final int BACK_PROB_VALUE = 2;


      public final int getNumber() { return value; }

      public static AEBASE valueOf(int value) {
        switch (value) {
          case 0: return NOAE;
          case 1: return CROSS_ENTROPY;
          case 2: return BACK_PROB;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<AEBASE>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<AEBASE>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<AEBASE>() {
              public AEBASE findValueByNumber(int number) {
                return AEBASE.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return fzdeepnet.Setting.Trainer.getDescriptor().getEnumTypes().get(3);
      }

      private static final AEBASE[] VALUES = values();

      public static AEBASE valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private AEBASE(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:fzdeepnet.Trainer.AEBASE)
    }

    /**
     * Protobuf enum {@code fzdeepnet.Trainer.BAMBASE}
     *
     * <pre>
     * ------------ BAM style -----------
     * </pre>
     */
    public enum BAMBASE
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NOBAM = 0;</code>
       */
      NOBAM(0, 0),
      /**
       * <code>EN_MIN = 1;</code>
       *
       * <pre>
       * Minimize energy different
       * </pre>
       */
      EN_MIN(1, 1),
      ;

      /**
       * <code>NOBAM = 0;</code>
       */
      public static final int NOBAM_VALUE = 0;
      /**
       * <code>EN_MIN = 1;</code>
       *
       * <pre>
       * Minimize energy different
       * </pre>
       */
      public static final int EN_MIN_VALUE = 1;


      public final int getNumber() { return value; }

      public static BAMBASE valueOf(int value) {
        switch (value) {
          case 0: return NOBAM;
          case 1: return EN_MIN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<BAMBASE>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<BAMBASE>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<BAMBASE>() {
              public BAMBASE findValueByNumber(int number) {
                return BAMBASE.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return fzdeepnet.Setting.Trainer.getDescriptor().getEnumTypes().get(4);
      }

      private static final BAMBASE[] VALUES = values();

      public static BAMBASE valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private BAMBASE(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:fzdeepnet.Trainer.BAMBASE)
    }

    /**
     * Protobuf enum {@code fzdeepnet.Trainer.DBNBASE}
     *
     * <pre>
     * ------------- DBN style ---------
     * </pre>
     */
    public enum DBNBASE
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NODBN = 0;</code>
       */
      NODBN(0, 0),
      /**
       * <code>SLEEP_AWAKE = 1;</code>
       */
      SLEEP_AWAKE(1, 1),
      ;

      /**
       * <code>NODBN = 0;</code>
       */
      public static final int NODBN_VALUE = 0;
      /**
       * <code>SLEEP_AWAKE = 1;</code>
       */
      public static final int SLEEP_AWAKE_VALUE = 1;


      public final int getNumber() { return value; }

      public static DBNBASE valueOf(int value) {
        switch (value) {
          case 0: return NODBN;
          case 1: return SLEEP_AWAKE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DBNBASE>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<DBNBASE>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DBNBASE>() {
              public DBNBASE findValueByNumber(int number) {
                return DBNBASE.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return fzdeepnet.Setting.Trainer.getDescriptor().getEnumTypes().get(5);
      }

      private static final DBNBASE[] VALUES = values();

      public static DBNBASE valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private DBNBASE(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:fzdeepnet.Trainer.DBNBASE)
    }

    /**
     * Protobuf enum {@code fzdeepnet.Trainer.DBMBASE}
     *
     * <pre>
     * ------------- DBM style ---------
     * </pre>
     */
    public enum DBMBASE
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NODBM = 0;</code>
       */
      NODBM(0, 0),
      /**
       * <code>MEAN_FIELD = 1;</code>
       */
      MEAN_FIELD(1, 1),
      /**
       * <code>ADAPTIVE_MC = 2;</code>
       */
      ADAPTIVE_MC(2, 2),
      ;

      /**
       * <code>NODBM = 0;</code>
       */
      public static final int NODBM_VALUE = 0;
      /**
       * <code>MEAN_FIELD = 1;</code>
       */
      public static final int MEAN_FIELD_VALUE = 1;
      /**
       * <code>ADAPTIVE_MC = 2;</code>
       */
      public static final int ADAPTIVE_MC_VALUE = 2;


      public final int getNumber() { return value; }

      public static DBMBASE valueOf(int value) {
        switch (value) {
          case 0: return NODBM;
          case 1: return MEAN_FIELD;
          case 2: return ADAPTIVE_MC;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DBMBASE>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<DBMBASE>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DBMBASE>() {
              public DBMBASE findValueByNumber(int number) {
                return DBMBASE.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return fzdeepnet.Setting.Trainer.getDescriptor().getEnumTypes().get(6);
      }

      private static final DBMBASE[] VALUES = values();

      public static DBMBASE valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private DBMBASE(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:fzdeepnet.Trainer.DBMBASE)
    }

    /**
     * Protobuf enum {@code fzdeepnet.Trainer.DBAMBASE}
     *
     * <pre>
     * ------------ DBAM style --------
     * </pre>
     */
    public enum DBAMBASE
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NODBAM = 0;</code>
       */
      NODBAM(0, 0),
      /**
       * <code>ALL_EN_MIN = 1;</code>
       */
      ALL_EN_MIN(1, 1),
      ;

      /**
       * <code>NODBAM = 0;</code>
       */
      public static final int NODBAM_VALUE = 0;
      /**
       * <code>ALL_EN_MIN = 1;</code>
       */
      public static final int ALL_EN_MIN_VALUE = 1;


      public final int getNumber() { return value; }

      public static DBAMBASE valueOf(int value) {
        switch (value) {
          case 0: return NODBAM;
          case 1: return ALL_EN_MIN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DBAMBASE>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<DBAMBASE>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DBAMBASE>() {
              public DBAMBASE findValueByNumber(int number) {
                return DBAMBASE.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return fzdeepnet.Setting.Trainer.getDescriptor().getEnumTypes().get(7);
      }

      private static final DBAMBASE[] VALUES = values();

      public static DBAMBASE valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private DBAMBASE(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:fzdeepnet.Trainer.DBAMBASE)
    }

    /**
     * Protobuf enum {@code fzdeepnet.Trainer.NNBASE}
     *
     * <pre>
     * -------------- NN style ---------
     * </pre>
     */
    public enum NNBASE
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>GRAD_DESCEND = 0;</code>
       *
       * <pre>
       *discriminative fine-tune
       * </pre>
       */
      GRAD_DESCEND(0, 0),
      /**
       * <code>CONJUGATE = 1;</code>
       *
       * <pre>
       * Support GPU?? haven't found the library
       * </pre>
       */
      CONJUGATE(1, 1),
      /**
       * <code>L_BFGS = 2;</code>
       *
       * <pre>
       * Support GPU?? haven't found the library
       * </pre>
       */
      L_BFGS(2, 2),
      ;

      /**
       * <code>GRAD_DESCEND = 0;</code>
       *
       * <pre>
       *discriminative fine-tune
       * </pre>
       */
      public static final int GRAD_DESCEND_VALUE = 0;
      /**
       * <code>CONJUGATE = 1;</code>
       *
       * <pre>
       * Support GPU?? haven't found the library
       * </pre>
       */
      public static final int CONJUGATE_VALUE = 1;
      /**
       * <code>L_BFGS = 2;</code>
       *
       * <pre>
       * Support GPU?? haven't found the library
       * </pre>
       */
      public static final int L_BFGS_VALUE = 2;


      public final int getNumber() { return value; }

      public static NNBASE valueOf(int value) {
        switch (value) {
          case 0: return GRAD_DESCEND;
          case 1: return CONJUGATE;
          case 2: return L_BFGS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<NNBASE>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<NNBASE>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<NNBASE>() {
              public NNBASE findValueByNumber(int number) {
                return NNBASE.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return fzdeepnet.Setting.Trainer.getDescriptor().getEnumTypes().get(8);
      }

      private static final NNBASE[] VALUES = values();

      public static NNBASE valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private NNBASE(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:fzdeepnet.Trainer.NNBASE)
    }

    /**
     * Protobuf enum {@code fzdeepnet.Trainer.COSTFUNC}
     */
    public enum COSTFUNC
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>L2NORM = 0;</code>
       *
       * <pre>
       *cost function
       * </pre>
       */
      L2NORM(0, 0),
      /**
       * <code>MLE = 1;</code>
       *
       * <pre>
       * Maximize likelihood Estimation
       * </pre>
       */
      MLE(1, 1),
      /**
       * <code>C_EN = 2;</code>
       *
       * <pre>
       * Cross entropy	
       * </pre>
       */
      C_EN(2, 2),
      ;

      /**
       * <code>L2NORM = 0;</code>
       *
       * <pre>
       *cost function
       * </pre>
       */
      public static final int L2NORM_VALUE = 0;
      /**
       * <code>MLE = 1;</code>
       *
       * <pre>
       * Maximize likelihood Estimation
       * </pre>
       */
      public static final int MLE_VALUE = 1;
      /**
       * <code>C_EN = 2;</code>
       *
       * <pre>
       * Cross entropy	
       * </pre>
       */
      public static final int C_EN_VALUE = 2;


      public final int getNumber() { return value; }

      public static COSTFUNC valueOf(int value) {
        switch (value) {
          case 0: return L2NORM;
          case 1: return MLE;
          case 2: return C_EN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<COSTFUNC>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<COSTFUNC>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<COSTFUNC>() {
              public COSTFUNC findValueByNumber(int number) {
                return COSTFUNC.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return fzdeepnet.Setting.Trainer.getDescriptor().getEnumTypes().get(9);
      }

      private static final COSTFUNC[] VALUES = values();

      public static COSTFUNC valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private COSTFUNC(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:fzdeepnet.Trainer.COSTFUNC)
    }

    /**
     * Protobuf enum {@code fzdeepnet.Trainer.SPARSITY}
     *
     * <pre>
     * Sparsity
     * </pre>
     */
    public enum SPARSITY
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NOSPARSE = 0;</code>
       */
      NOSPARSE(0, 0),
      /**
       * <code>EMIN = 1;</code>
       *
       * <pre>
       * Expectation min Lee's paper
       * </pre>
       */
      EMIN(1, 1),
      /**
       * <code>KLMIN = 2;</code>
       *
       * <pre>
       * KL-min Ng's note
       * </pre>
       */
      KLMIN(2, 2),
      /**
       * <code>PROJ = 3;</code>
       *
       * <pre>
       * Projecting vectors Hoyer's
       * </pre>
       */
      PROJ(3, 3),
      ;

      /**
       * <code>NOSPARSE = 0;</code>
       */
      public static final int NOSPARSE_VALUE = 0;
      /**
       * <code>EMIN = 1;</code>
       *
       * <pre>
       * Expectation min Lee's paper
       * </pre>
       */
      public static final int EMIN_VALUE = 1;
      /**
       * <code>KLMIN = 2;</code>
       *
       * <pre>
       * KL-min Ng's note
       * </pre>
       */
      public static final int KLMIN_VALUE = 2;
      /**
       * <code>PROJ = 3;</code>
       *
       * <pre>
       * Projecting vectors Hoyer's
       * </pre>
       */
      public static final int PROJ_VALUE = 3;


      public final int getNumber() { return value; }

      public static SPARSITY valueOf(int value) {
        switch (value) {
          case 0: return NOSPARSE;
          case 1: return EMIN;
          case 2: return KLMIN;
          case 3: return PROJ;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SPARSITY>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<SPARSITY>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SPARSITY>() {
              public SPARSITY findValueByNumber(int number) {
                return SPARSITY.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return fzdeepnet.Setting.Trainer.getDescriptor().getEnumTypes().get(10);
      }

      private static final SPARSITY[] VALUES = values();

      public static SPARSITY valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private SPARSITY(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:fzdeepnet.Trainer.SPARSITY)
    }

    private int bitField0_;
    // required int32 epochs = 1;
    public static final int EPOCHS_FIELD_NUMBER = 1;
    private int epochs_;
    /**
     * <code>required int32 epochs = 1;</code>
     */
    public boolean hasEpochs() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 epochs = 1;</code>
     */
    public int getEpochs() {
      return epochs_;
    }

    // optional int32 batches = 2 [default = 0];
    public static final int BATCHES_FIELD_NUMBER = 2;
    private int batches_;
    /**
     * <code>optional int32 batches = 2 [default = 0];</code>
     */
    public boolean hasBatches() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 batches = 2 [default = 0];</code>
     */
    public int getBatches() {
      return batches_;
    }

    // required int32 batch_size = 3;
    public static final int BATCH_SIZE_FIELD_NUMBER = 3;
    private int batchSize_;
    /**
     * <code>required int32 batch_size = 3;</code>
     */
    public boolean hasBatchSize() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 batch_size = 3;</code>
     */
    public int getBatchSize() {
      return batchSize_;
    }

    // optional float learning_rate = 4 [default = 0.001];
    public static final int LEARNING_RATE_FIELD_NUMBER = 4;
    private float learningRate_;
    /**
     * <code>optional float learning_rate = 4 [default = 0.001];</code>
     */
    public boolean hasLearningRate() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float learning_rate = 4 [default = 0.001];</code>
     */
    public float getLearningRate() {
      return learningRate_;
    }

    // optional .fzdeepnet.Trainer.Decay learning_rate_decay = 5 [default = NO_DECAY];
    public static final int LEARNING_RATE_DECAY_FIELD_NUMBER = 5;
    private fzdeepnet.Setting.Trainer.Decay learningRateDecay_;
    /**
     * <code>optional .fzdeepnet.Trainer.Decay learning_rate_decay = 5 [default = NO_DECAY];</code>
     */
    public boolean hasLearningRateDecay() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .fzdeepnet.Trainer.Decay learning_rate_decay = 5 [default = NO_DECAY];</code>
     */
    public fzdeepnet.Setting.Trainer.Decay getLearningRateDecay() {
      return learningRateDecay_;
    }

    // optional float learning_rate_decay_param = 6 [default = 0.1];
    public static final int LEARNING_RATE_DECAY_PARAM_FIELD_NUMBER = 6;
    private float learningRateDecayParam_;
    /**
     * <code>optional float learning_rate_decay_param = 6 [default = 0.1];</code>
     */
    public boolean hasLearningRateDecayParam() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float learning_rate_decay_param = 6 [default = 0.1];</code>
     */
    public float getLearningRateDecayParam() {
      return learningRateDecayParam_;
    }

    // optional float learning_rate_final = 7 [default = 0.001];
    public static final int LEARNING_RATE_FINAL_FIELD_NUMBER = 7;
    private float learningRateFinal_;
    /**
     * <code>optional float learning_rate_final = 7 [default = 0.001];</code>
     *
     * <pre>
     * use the step to change
     * </pre>
     */
    public boolean hasLearningRateFinal() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float learning_rate_final = 7 [default = 0.001];</code>
     *
     * <pre>
     * use the step to change
     * </pre>
     */
    public float getLearningRateFinal() {
      return learningRateFinal_;
    }

    // optional float initial_momentum = 8 [default = 0];
    public static final int INITIAL_MOMENTUM_FIELD_NUMBER = 8;
    private float initialMomentum_;
    /**
     * <code>optional float initial_momentum = 8 [default = 0];</code>
     *
     * <pre>
     * momentum
     * </pre>
     */
    public boolean hasInitialMomentum() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float initial_momentum = 8 [default = 0];</code>
     *
     * <pre>
     * momentum
     * </pre>
     */
    public float getInitialMomentum() {
      return initialMomentum_;
    }

    // optional .fzdeepnet.Trainer.Decay momentum_decay = 9 [default = NO_DECAY];
    public static final int MOMENTUM_DECAY_FIELD_NUMBER = 9;
    private fzdeepnet.Setting.Trainer.Decay momentumDecay_;
    /**
     * <code>optional .fzdeepnet.Trainer.Decay momentum_decay = 9 [default = NO_DECAY];</code>
     */
    public boolean hasMomentumDecay() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .fzdeepnet.Trainer.Decay momentum_decay = 9 [default = NO_DECAY];</code>
     */
    public fzdeepnet.Setting.Trainer.Decay getMomentumDecay() {
      return momentumDecay_;
    }

    // optional float momentum_decay_param = 10 [default = 0.1];
    public static final int MOMENTUM_DECAY_PARAM_FIELD_NUMBER = 10;
    private float momentumDecayParam_;
    /**
     * <code>optional float momentum_decay_param = 10 [default = 0.1];</code>
     */
    public boolean hasMomentumDecayParam() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional float momentum_decay_param = 10 [default = 0.1];</code>
     */
    public float getMomentumDecayParam() {
      return momentumDecayParam_;
    }

    // optional float final_momentum = 11 [default = 0];
    public static final int FINAL_MOMENTUM_FIELD_NUMBER = 11;
    private float finalMomentum_;
    /**
     * <code>optional float final_momentum = 11 [default = 0];</code>
     */
    public boolean hasFinalMomentum() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float final_momentum = 11 [default = 0];</code>
     */
    public float getFinalMomentum() {
      return finalMomentum_;
    }

    // optional .fzdeepnet.Trainer.TType type = 12 [default = NONE];
    public static final int TYPE_FIELD_NUMBER = 12;
    private fzdeepnet.Setting.Trainer.TType type_;
    /**
     * <code>optional .fzdeepnet.Trainer.TType type = 12 [default = NONE];</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .fzdeepnet.Trainer.TType type = 12 [default = NONE];</code>
     */
    public fzdeepnet.Setting.Trainer.TType getType() {
      return type_;
    }

    // optional .fzdeepnet.Trainer.RBMBASE rbm_train = 13 [default = NORBM];
    public static final int RBM_TRAIN_FIELD_NUMBER = 13;
    private fzdeepnet.Setting.Trainer.RBMBASE rbmTrain_;
    /**
     * <code>optional .fzdeepnet.Trainer.RBMBASE rbm_train = 13 [default = NORBM];</code>
     */
    public boolean hasRbmTrain() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .fzdeepnet.Trainer.RBMBASE rbm_train = 13 [default = NORBM];</code>
     */
    public fzdeepnet.Setting.Trainer.RBMBASE getRbmTrain() {
      return rbmTrain_;
    }

    // optional int32 gibbs_num = 14 [default = 1];
    public static final int GIBBS_NUM_FIELD_NUMBER = 14;
    private int gibbsNum_;
    /**
     * <code>optional int32 gibbs_num = 14 [default = 1];</code>
     */
    public boolean hasGibbsNum() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 gibbs_num = 14 [default = 1];</code>
     */
    public int getGibbsNum() {
      return gibbsNum_;
    }

    // optional .fzdeepnet.Trainer.AEBASE ae_train = 15 [default = NOAE];
    public static final int AE_TRAIN_FIELD_NUMBER = 15;
    private fzdeepnet.Setting.Trainer.AEBASE aeTrain_;
    /**
     * <code>optional .fzdeepnet.Trainer.AEBASE ae_train = 15 [default = NOAE];</code>
     */
    public boolean hasAeTrain() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional .fzdeepnet.Trainer.AEBASE ae_train = 15 [default = NOAE];</code>
     */
    public fzdeepnet.Setting.Trainer.AEBASE getAeTrain() {
      return aeTrain_;
    }

    // optional .fzdeepnet.Trainer.BAMBASE bam_train = 16 [default = NOBAM];
    public static final int BAM_TRAIN_FIELD_NUMBER = 16;
    private fzdeepnet.Setting.Trainer.BAMBASE bamTrain_;
    /**
     * <code>optional .fzdeepnet.Trainer.BAMBASE bam_train = 16 [default = NOBAM];</code>
     */
    public boolean hasBamTrain() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .fzdeepnet.Trainer.BAMBASE bam_train = 16 [default = NOBAM];</code>
     */
    public fzdeepnet.Setting.Trainer.BAMBASE getBamTrain() {
      return bamTrain_;
    }

    // optional int32 pseudo_gibbs_num = 17 [default = 0];
    public static final int PSEUDO_GIBBS_NUM_FIELD_NUMBER = 17;
    private int pseudoGibbsNum_;
    /**
     * <code>optional int32 pseudo_gibbs_num = 17 [default = 0];</code>
     */
    public boolean hasPseudoGibbsNum() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional int32 pseudo_gibbs_num = 17 [default = 0];</code>
     */
    public int getPseudoGibbsNum() {
      return pseudoGibbsNum_;
    }

    // optional .fzdeepnet.Trainer.DBNBASE dbn_train = 18 [default = NODBN];
    public static final int DBN_TRAIN_FIELD_NUMBER = 18;
    private fzdeepnet.Setting.Trainer.DBNBASE dbnTrain_;
    /**
     * <code>optional .fzdeepnet.Trainer.DBNBASE dbn_train = 18 [default = NODBN];</code>
     */
    public boolean hasDbnTrain() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional .fzdeepnet.Trainer.DBNBASE dbn_train = 18 [default = NODBN];</code>
     */
    public fzdeepnet.Setting.Trainer.DBNBASE getDbnTrain() {
      return dbnTrain_;
    }

    // optional .fzdeepnet.Trainer.DBMBASE dbm_train = 19 [default = NODBM];
    public static final int DBM_TRAIN_FIELD_NUMBER = 19;
    private fzdeepnet.Setting.Trainer.DBMBASE dbmTrain_;
    /**
     * <code>optional .fzdeepnet.Trainer.DBMBASE dbm_train = 19 [default = NODBM];</code>
     */
    public boolean hasDbmTrain() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional .fzdeepnet.Trainer.DBMBASE dbm_train = 19 [default = NODBM];</code>
     */
    public fzdeepnet.Setting.Trainer.DBMBASE getDbmTrain() {
      return dbmTrain_;
    }

    // optional .fzdeepnet.Trainer.DBAMBASE dbam_train = 20 [default = NODBAM];
    public static final int DBAM_TRAIN_FIELD_NUMBER = 20;
    private fzdeepnet.Setting.Trainer.DBAMBASE dbamTrain_;
    /**
     * <code>optional .fzdeepnet.Trainer.DBAMBASE dbam_train = 20 [default = NODBAM];</code>
     */
    public boolean hasDbamTrain() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional .fzdeepnet.Trainer.DBAMBASE dbam_train = 20 [default = NODBAM];</code>
     */
    public fzdeepnet.Setting.Trainer.DBAMBASE getDbamTrain() {
      return dbamTrain_;
    }

    // optional .fzdeepnet.Trainer.NNBASE nn_train = 21;
    public static final int NN_TRAIN_FIELD_NUMBER = 21;
    private fzdeepnet.Setting.Trainer.NNBASE nnTrain_;
    /**
     * <code>optional .fzdeepnet.Trainer.NNBASE nn_train = 21;</code>
     */
    public boolean hasNnTrain() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional .fzdeepnet.Trainer.NNBASE nn_train = 21;</code>
     */
    public fzdeepnet.Setting.Trainer.NNBASE getNnTrain() {
      return nnTrain_;
    }

    // optional .fzdeepnet.Trainer.COSTFUNC nn_cost = 22;
    public static final int NN_COST_FIELD_NUMBER = 22;
    private fzdeepnet.Setting.Trainer.COSTFUNC nnCost_;
    /**
     * <code>optional .fzdeepnet.Trainer.COSTFUNC nn_cost = 22;</code>
     */
    public boolean hasNnCost() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional .fzdeepnet.Trainer.COSTFUNC nn_cost = 22;</code>
     */
    public fzdeepnet.Setting.Trainer.COSTFUNC getNnCost() {
      return nnCost_;
    }

    // optional float weight_norm = 23 [default = 0];
    public static final int WEIGHT_NORM_FIELD_NUMBER = 23;
    private float weightNorm_;
    /**
     * <code>optional float weight_norm = 23 [default = 0];</code>
     *
     * <pre>
     *------------ REGULARIZATION ------
     * Weight  L2 norm	
     * </pre>
     */
    public boolean hasWeightNorm() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional float weight_norm = 23 [default = 0];</code>
     *
     * <pre>
     *------------ REGULARIZATION ------
     * Weight  L2 norm	
     * </pre>
     */
    public float getWeightNorm() {
      return weightNorm_;
    }

    // optional .fzdeepnet.Trainer.SPARSITY sparsity = 24 [default = NOSPARSE];
    public static final int SPARSITY_FIELD_NUMBER = 24;
    private fzdeepnet.Setting.Trainer.SPARSITY sparsity_;
    /**
     * <code>optional .fzdeepnet.Trainer.SPARSITY sparsity = 24 [default = NOSPARSE];</code>
     */
    public boolean hasSparsity() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional .fzdeepnet.Trainer.SPARSITY sparsity = 24 [default = NOSPARSE];</code>
     */
    public fzdeepnet.Setting.Trainer.SPARSITY getSparsity() {
      return sparsity_;
    }

    // optional float s_lambda = 25 [default = 0];
    public static final int S_LAMBDA_FIELD_NUMBER = 25;
    private float sLambda_;
    /**
     * <code>optional float s_lambda = 25 [default = 0];</code>
     */
    public boolean hasSLambda() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional float s_lambda = 25 [default = 0];</code>
     */
    public float getSLambda() {
      return sLambda_;
    }

    // optional float p = 26 [default = 0];
    public static final int P_FIELD_NUMBER = 26;
    private float p_;
    /**
     * <code>optional float p = 26 [default = 0];</code>
     */
    public boolean hasP() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional float p = 26 [default = 0];</code>
     */
    public float getP() {
      return p_;
    }

    // optional int32 early_stopping = 27 [default = 0];
    public static final int EARLY_STOPPING_FIELD_NUMBER = 27;
    private int earlyStopping_;
    /**
     * <code>optional int32 early_stopping = 27 [default = 0];</code>
     *
     * <pre>
     * ----------- EARLY STOPPING
     * </pre>
     */
    public boolean hasEarlyStopping() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional int32 early_stopping = 27 [default = 0];</code>
     *
     * <pre>
     * ----------- EARLY STOPPING
     * </pre>
     */
    public int getEarlyStopping() {
      return earlyStopping_;
    }

    // optional float es_learning_rate_decay = 28 [default = 0];
    public static final int ES_LEARNING_RATE_DECAY_FIELD_NUMBER = 28;
    private float esLearningRateDecay_;
    /**
     * <code>optional float es_learning_rate_decay = 28 [default = 0];</code>
     *
     * <pre>
     * Exponential param
     * </pre>
     */
    public boolean hasEsLearningRateDecay() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional float es_learning_rate_decay = 28 [default = 0];</code>
     *
     * <pre>
     * Exponential param
     * </pre>
     */
    public float getEsLearningRateDecay() {
      return esLearningRateDecay_;
    }

    // optional float es_momentum_decay = 29 [default = 0];
    public static final int ES_MOMENTUM_DECAY_FIELD_NUMBER = 29;
    private float esMomentumDecay_;
    /**
     * <code>optional float es_momentum_decay = 29 [default = 0];</code>
     *
     * <pre>
     * Exponential param
     * </pre>
     */
    public boolean hasEsMomentumDecay() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional float es_momentum_decay = 29 [default = 0];</code>
     *
     * <pre>
     * Exponential param
     * </pre>
     */
    public float getEsMomentumDecay() {
      return esMomentumDecay_;
    }

    private void initFields() {
      epochs_ = 0;
      batches_ = 0;
      batchSize_ = 0;
      learningRate_ = 0.001F;
      learningRateDecay_ = fzdeepnet.Setting.Trainer.Decay.NO_DECAY;
      learningRateDecayParam_ = 0.1F;
      learningRateFinal_ = 0.001F;
      initialMomentum_ = 0F;
      momentumDecay_ = fzdeepnet.Setting.Trainer.Decay.NO_DECAY;
      momentumDecayParam_ = 0.1F;
      finalMomentum_ = 0F;
      type_ = fzdeepnet.Setting.Trainer.TType.NONE;
      rbmTrain_ = fzdeepnet.Setting.Trainer.RBMBASE.NORBM;
      gibbsNum_ = 1;
      aeTrain_ = fzdeepnet.Setting.Trainer.AEBASE.NOAE;
      bamTrain_ = fzdeepnet.Setting.Trainer.BAMBASE.NOBAM;
      pseudoGibbsNum_ = 0;
      dbnTrain_ = fzdeepnet.Setting.Trainer.DBNBASE.NODBN;
      dbmTrain_ = fzdeepnet.Setting.Trainer.DBMBASE.NODBM;
      dbamTrain_ = fzdeepnet.Setting.Trainer.DBAMBASE.NODBAM;
      nnTrain_ = fzdeepnet.Setting.Trainer.NNBASE.GRAD_DESCEND;
      nnCost_ = fzdeepnet.Setting.Trainer.COSTFUNC.L2NORM;
      weightNorm_ = 0F;
      sparsity_ = fzdeepnet.Setting.Trainer.SPARSITY.NOSPARSE;
      sLambda_ = 0F;
      p_ = 0F;
      earlyStopping_ = 0;
      esLearningRateDecay_ = 0F;
      esMomentumDecay_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasEpochs()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBatchSize()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, epochs_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, batches_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, batchSize_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, learningRate_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, learningRateDecay_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, learningRateDecayParam_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(7, learningRateFinal_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, initialMomentum_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeEnum(9, momentumDecay_.getNumber());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(10, momentumDecayParam_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(11, finalMomentum_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeEnum(12, type_.getNumber());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeEnum(13, rbmTrain_.getNumber());
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(14, gibbsNum_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeEnum(15, aeTrain_.getNumber());
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeEnum(16, bamTrain_.getNumber());
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(17, pseudoGibbsNum_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeEnum(18, dbnTrain_.getNumber());
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeEnum(19, dbmTrain_.getNumber());
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeEnum(20, dbamTrain_.getNumber());
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeEnum(21, nnTrain_.getNumber());
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeEnum(22, nnCost_.getNumber());
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeFloat(23, weightNorm_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeEnum(24, sparsity_.getNumber());
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeFloat(25, sLambda_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeFloat(26, p_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeInt32(27, earlyStopping_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeFloat(28, esLearningRateDecay_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeFloat(29, esMomentumDecay_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, epochs_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, batches_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, batchSize_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, learningRate_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, learningRateDecay_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, learningRateDecayParam_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, learningRateFinal_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, initialMomentum_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, momentumDecay_.getNumber());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, momentumDecayParam_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, finalMomentum_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12, type_.getNumber());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(13, rbmTrain_.getNumber());
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, gibbsNum_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(15, aeTrain_.getNumber());
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(16, bamTrain_.getNumber());
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, pseudoGibbsNum_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(18, dbnTrain_.getNumber());
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(19, dbmTrain_.getNumber());
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(20, dbamTrain_.getNumber());
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(21, nnTrain_.getNumber());
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(22, nnCost_.getNumber());
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(23, weightNorm_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(24, sparsity_.getNumber());
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(25, sLambda_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(26, p_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(27, earlyStopping_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(28, esLearningRateDecay_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(29, esMomentumDecay_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static fzdeepnet.Setting.Trainer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fzdeepnet.Setting.Trainer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fzdeepnet.Setting.Trainer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fzdeepnet.Setting.Trainer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fzdeepnet.Setting.Trainer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static fzdeepnet.Setting.Trainer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static fzdeepnet.Setting.Trainer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static fzdeepnet.Setting.Trainer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static fzdeepnet.Setting.Trainer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static fzdeepnet.Setting.Trainer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(fzdeepnet.Setting.Trainer prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code fzdeepnet.Trainer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements fzdeepnet.Setting.TrainerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return fzdeepnet.Setting.internal_static_fzdeepnet_Trainer_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return fzdeepnet.Setting.internal_static_fzdeepnet_Trainer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                fzdeepnet.Setting.Trainer.class, fzdeepnet.Setting.Trainer.Builder.class);
      }

      // Construct using fzdeepnet.Setting.Trainer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        epochs_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        batches_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        batchSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        learningRate_ = 0.001F;
        bitField0_ = (bitField0_ & ~0x00000008);
        learningRateDecay_ = fzdeepnet.Setting.Trainer.Decay.NO_DECAY;
        bitField0_ = (bitField0_ & ~0x00000010);
        learningRateDecayParam_ = 0.1F;
        bitField0_ = (bitField0_ & ~0x00000020);
        learningRateFinal_ = 0.001F;
        bitField0_ = (bitField0_ & ~0x00000040);
        initialMomentum_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        momentumDecay_ = fzdeepnet.Setting.Trainer.Decay.NO_DECAY;
        bitField0_ = (bitField0_ & ~0x00000100);
        momentumDecayParam_ = 0.1F;
        bitField0_ = (bitField0_ & ~0x00000200);
        finalMomentum_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000400);
        type_ = fzdeepnet.Setting.Trainer.TType.NONE;
        bitField0_ = (bitField0_ & ~0x00000800);
        rbmTrain_ = fzdeepnet.Setting.Trainer.RBMBASE.NORBM;
        bitField0_ = (bitField0_ & ~0x00001000);
        gibbsNum_ = 1;
        bitField0_ = (bitField0_ & ~0x00002000);
        aeTrain_ = fzdeepnet.Setting.Trainer.AEBASE.NOAE;
        bitField0_ = (bitField0_ & ~0x00004000);
        bamTrain_ = fzdeepnet.Setting.Trainer.BAMBASE.NOBAM;
        bitField0_ = (bitField0_ & ~0x00008000);
        pseudoGibbsNum_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        dbnTrain_ = fzdeepnet.Setting.Trainer.DBNBASE.NODBN;
        bitField0_ = (bitField0_ & ~0x00020000);
        dbmTrain_ = fzdeepnet.Setting.Trainer.DBMBASE.NODBM;
        bitField0_ = (bitField0_ & ~0x00040000);
        dbamTrain_ = fzdeepnet.Setting.Trainer.DBAMBASE.NODBAM;
        bitField0_ = (bitField0_ & ~0x00080000);
        nnTrain_ = fzdeepnet.Setting.Trainer.NNBASE.GRAD_DESCEND;
        bitField0_ = (bitField0_ & ~0x00100000);
        nnCost_ = fzdeepnet.Setting.Trainer.COSTFUNC.L2NORM;
        bitField0_ = (bitField0_ & ~0x00200000);
        weightNorm_ = 0F;
        bitField0_ = (bitField0_ & ~0x00400000);
        sparsity_ = fzdeepnet.Setting.Trainer.SPARSITY.NOSPARSE;
        bitField0_ = (bitField0_ & ~0x00800000);
        sLambda_ = 0F;
        bitField0_ = (bitField0_ & ~0x01000000);
        p_ = 0F;
        bitField0_ = (bitField0_ & ~0x02000000);
        earlyStopping_ = 0;
        bitField0_ = (bitField0_ & ~0x04000000);
        esLearningRateDecay_ = 0F;
        bitField0_ = (bitField0_ & ~0x08000000);
        esMomentumDecay_ = 0F;
        bitField0_ = (bitField0_ & ~0x10000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return fzdeepnet.Setting.internal_static_fzdeepnet_Trainer_descriptor;
      }

      public fzdeepnet.Setting.Trainer getDefaultInstanceForType() {
        return fzdeepnet.Setting.Trainer.getDefaultInstance();
      }

      public fzdeepnet.Setting.Trainer build() {
        fzdeepnet.Setting.Trainer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public fzdeepnet.Setting.Trainer buildPartial() {
        fzdeepnet.Setting.Trainer result = new fzdeepnet.Setting.Trainer(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.epochs_ = epochs_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.batches_ = batches_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.batchSize_ = batchSize_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.learningRate_ = learningRate_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.learningRateDecay_ = learningRateDecay_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.learningRateDecayParam_ = learningRateDecayParam_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.learningRateFinal_ = learningRateFinal_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.initialMomentum_ = initialMomentum_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.momentumDecay_ = momentumDecay_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.momentumDecayParam_ = momentumDecayParam_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.finalMomentum_ = finalMomentum_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.rbmTrain_ = rbmTrain_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.gibbsNum_ = gibbsNum_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.aeTrain_ = aeTrain_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.bamTrain_ = bamTrain_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.pseudoGibbsNum_ = pseudoGibbsNum_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.dbnTrain_ = dbnTrain_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.dbmTrain_ = dbmTrain_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.dbamTrain_ = dbamTrain_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.nnTrain_ = nnTrain_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.nnCost_ = nnCost_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.weightNorm_ = weightNorm_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.sparsity_ = sparsity_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.sLambda_ = sLambda_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.p_ = p_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.earlyStopping_ = earlyStopping_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.esLearningRateDecay_ = esLearningRateDecay_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.esMomentumDecay_ = esMomentumDecay_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof fzdeepnet.Setting.Trainer) {
          return mergeFrom((fzdeepnet.Setting.Trainer)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(fzdeepnet.Setting.Trainer other) {
        if (other == fzdeepnet.Setting.Trainer.getDefaultInstance()) return this;
        if (other.hasEpochs()) {
          setEpochs(other.getEpochs());
        }
        if (other.hasBatches()) {
          setBatches(other.getBatches());
        }
        if (other.hasBatchSize()) {
          setBatchSize(other.getBatchSize());
        }
        if (other.hasLearningRate()) {
          setLearningRate(other.getLearningRate());
        }
        if (other.hasLearningRateDecay()) {
          setLearningRateDecay(other.getLearningRateDecay());
        }
        if (other.hasLearningRateDecayParam()) {
          setLearningRateDecayParam(other.getLearningRateDecayParam());
        }
        if (other.hasLearningRateFinal()) {
          setLearningRateFinal(other.getLearningRateFinal());
        }
        if (other.hasInitialMomentum()) {
          setInitialMomentum(other.getInitialMomentum());
        }
        if (other.hasMomentumDecay()) {
          setMomentumDecay(other.getMomentumDecay());
        }
        if (other.hasMomentumDecayParam()) {
          setMomentumDecayParam(other.getMomentumDecayParam());
        }
        if (other.hasFinalMomentum()) {
          setFinalMomentum(other.getFinalMomentum());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasRbmTrain()) {
          setRbmTrain(other.getRbmTrain());
        }
        if (other.hasGibbsNum()) {
          setGibbsNum(other.getGibbsNum());
        }
        if (other.hasAeTrain()) {
          setAeTrain(other.getAeTrain());
        }
        if (other.hasBamTrain()) {
          setBamTrain(other.getBamTrain());
        }
        if (other.hasPseudoGibbsNum()) {
          setPseudoGibbsNum(other.getPseudoGibbsNum());
        }
        if (other.hasDbnTrain()) {
          setDbnTrain(other.getDbnTrain());
        }
        if (other.hasDbmTrain()) {
          setDbmTrain(other.getDbmTrain());
        }
        if (other.hasDbamTrain()) {
          setDbamTrain(other.getDbamTrain());
        }
        if (other.hasNnTrain()) {
          setNnTrain(other.getNnTrain());
        }
        if (other.hasNnCost()) {
          setNnCost(other.getNnCost());
        }
        if (other.hasWeightNorm()) {
          setWeightNorm(other.getWeightNorm());
        }
        if (other.hasSparsity()) {
          setSparsity(other.getSparsity());
        }
        if (other.hasSLambda()) {
          setSLambda(other.getSLambda());
        }
        if (other.hasP()) {
          setP(other.getP());
        }
        if (other.hasEarlyStopping()) {
          setEarlyStopping(other.getEarlyStopping());
        }
        if (other.hasEsLearningRateDecay()) {
          setEsLearningRateDecay(other.getEsLearningRateDecay());
        }
        if (other.hasEsMomentumDecay()) {
          setEsMomentumDecay(other.getEsMomentumDecay());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasEpochs()) {
          
          return false;
        }
        if (!hasBatchSize()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        fzdeepnet.Setting.Trainer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (fzdeepnet.Setting.Trainer) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 epochs = 1;
      private int epochs_ ;
      /**
       * <code>required int32 epochs = 1;</code>
       */
      public boolean hasEpochs() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 epochs = 1;</code>
       */
      public int getEpochs() {
        return epochs_;
      }
      /**
       * <code>required int32 epochs = 1;</code>
       */
      public Builder setEpochs(int value) {
        bitField0_ |= 0x00000001;
        epochs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 epochs = 1;</code>
       */
      public Builder clearEpochs() {
        bitField0_ = (bitField0_ & ~0x00000001);
        epochs_ = 0;
        onChanged();
        return this;
      }

      // optional int32 batches = 2 [default = 0];
      private int batches_ ;
      /**
       * <code>optional int32 batches = 2 [default = 0];</code>
       */
      public boolean hasBatches() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 batches = 2 [default = 0];</code>
       */
      public int getBatches() {
        return batches_;
      }
      /**
       * <code>optional int32 batches = 2 [default = 0];</code>
       */
      public Builder setBatches(int value) {
        bitField0_ |= 0x00000002;
        batches_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 batches = 2 [default = 0];</code>
       */
      public Builder clearBatches() {
        bitField0_ = (bitField0_ & ~0x00000002);
        batches_ = 0;
        onChanged();
        return this;
      }

      // required int32 batch_size = 3;
      private int batchSize_ ;
      /**
       * <code>required int32 batch_size = 3;</code>
       */
      public boolean hasBatchSize() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 batch_size = 3;</code>
       */
      public int getBatchSize() {
        return batchSize_;
      }
      /**
       * <code>required int32 batch_size = 3;</code>
       */
      public Builder setBatchSize(int value) {
        bitField0_ |= 0x00000004;
        batchSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 batch_size = 3;</code>
       */
      public Builder clearBatchSize() {
        bitField0_ = (bitField0_ & ~0x00000004);
        batchSize_ = 0;
        onChanged();
        return this;
      }

      // optional float learning_rate = 4 [default = 0.001];
      private float learningRate_ = 0.001F;
      /**
       * <code>optional float learning_rate = 4 [default = 0.001];</code>
       */
      public boolean hasLearningRate() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float learning_rate = 4 [default = 0.001];</code>
       */
      public float getLearningRate() {
        return learningRate_;
      }
      /**
       * <code>optional float learning_rate = 4 [default = 0.001];</code>
       */
      public Builder setLearningRate(float value) {
        bitField0_ |= 0x00000008;
        learningRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float learning_rate = 4 [default = 0.001];</code>
       */
      public Builder clearLearningRate() {
        bitField0_ = (bitField0_ & ~0x00000008);
        learningRate_ = 0.001F;
        onChanged();
        return this;
      }

      // optional .fzdeepnet.Trainer.Decay learning_rate_decay = 5 [default = NO_DECAY];
      private fzdeepnet.Setting.Trainer.Decay learningRateDecay_ = fzdeepnet.Setting.Trainer.Decay.NO_DECAY;
      /**
       * <code>optional .fzdeepnet.Trainer.Decay learning_rate_decay = 5 [default = NO_DECAY];</code>
       */
      public boolean hasLearningRateDecay() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .fzdeepnet.Trainer.Decay learning_rate_decay = 5 [default = NO_DECAY];</code>
       */
      public fzdeepnet.Setting.Trainer.Decay getLearningRateDecay() {
        return learningRateDecay_;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.Decay learning_rate_decay = 5 [default = NO_DECAY];</code>
       */
      public Builder setLearningRateDecay(fzdeepnet.Setting.Trainer.Decay value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        learningRateDecay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.Decay learning_rate_decay = 5 [default = NO_DECAY];</code>
       */
      public Builder clearLearningRateDecay() {
        bitField0_ = (bitField0_ & ~0x00000010);
        learningRateDecay_ = fzdeepnet.Setting.Trainer.Decay.NO_DECAY;
        onChanged();
        return this;
      }

      // optional float learning_rate_decay_param = 6 [default = 0.1];
      private float learningRateDecayParam_ = 0.1F;
      /**
       * <code>optional float learning_rate_decay_param = 6 [default = 0.1];</code>
       */
      public boolean hasLearningRateDecayParam() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float learning_rate_decay_param = 6 [default = 0.1];</code>
       */
      public float getLearningRateDecayParam() {
        return learningRateDecayParam_;
      }
      /**
       * <code>optional float learning_rate_decay_param = 6 [default = 0.1];</code>
       */
      public Builder setLearningRateDecayParam(float value) {
        bitField0_ |= 0x00000020;
        learningRateDecayParam_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float learning_rate_decay_param = 6 [default = 0.1];</code>
       */
      public Builder clearLearningRateDecayParam() {
        bitField0_ = (bitField0_ & ~0x00000020);
        learningRateDecayParam_ = 0.1F;
        onChanged();
        return this;
      }

      // optional float learning_rate_final = 7 [default = 0.001];
      private float learningRateFinal_ = 0.001F;
      /**
       * <code>optional float learning_rate_final = 7 [default = 0.001];</code>
       *
       * <pre>
       * use the step to change
       * </pre>
       */
      public boolean hasLearningRateFinal() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float learning_rate_final = 7 [default = 0.001];</code>
       *
       * <pre>
       * use the step to change
       * </pre>
       */
      public float getLearningRateFinal() {
        return learningRateFinal_;
      }
      /**
       * <code>optional float learning_rate_final = 7 [default = 0.001];</code>
       *
       * <pre>
       * use the step to change
       * </pre>
       */
      public Builder setLearningRateFinal(float value) {
        bitField0_ |= 0x00000040;
        learningRateFinal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float learning_rate_final = 7 [default = 0.001];</code>
       *
       * <pre>
       * use the step to change
       * </pre>
       */
      public Builder clearLearningRateFinal() {
        bitField0_ = (bitField0_ & ~0x00000040);
        learningRateFinal_ = 0.001F;
        onChanged();
        return this;
      }

      // optional float initial_momentum = 8 [default = 0];
      private float initialMomentum_ ;
      /**
       * <code>optional float initial_momentum = 8 [default = 0];</code>
       *
       * <pre>
       * momentum
       * </pre>
       */
      public boolean hasInitialMomentum() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float initial_momentum = 8 [default = 0];</code>
       *
       * <pre>
       * momentum
       * </pre>
       */
      public float getInitialMomentum() {
        return initialMomentum_;
      }
      /**
       * <code>optional float initial_momentum = 8 [default = 0];</code>
       *
       * <pre>
       * momentum
       * </pre>
       */
      public Builder setInitialMomentum(float value) {
        bitField0_ |= 0x00000080;
        initialMomentum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float initial_momentum = 8 [default = 0];</code>
       *
       * <pre>
       * momentum
       * </pre>
       */
      public Builder clearInitialMomentum() {
        bitField0_ = (bitField0_ & ~0x00000080);
        initialMomentum_ = 0F;
        onChanged();
        return this;
      }

      // optional .fzdeepnet.Trainer.Decay momentum_decay = 9 [default = NO_DECAY];
      private fzdeepnet.Setting.Trainer.Decay momentumDecay_ = fzdeepnet.Setting.Trainer.Decay.NO_DECAY;
      /**
       * <code>optional .fzdeepnet.Trainer.Decay momentum_decay = 9 [default = NO_DECAY];</code>
       */
      public boolean hasMomentumDecay() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .fzdeepnet.Trainer.Decay momentum_decay = 9 [default = NO_DECAY];</code>
       */
      public fzdeepnet.Setting.Trainer.Decay getMomentumDecay() {
        return momentumDecay_;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.Decay momentum_decay = 9 [default = NO_DECAY];</code>
       */
      public Builder setMomentumDecay(fzdeepnet.Setting.Trainer.Decay value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000100;
        momentumDecay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.Decay momentum_decay = 9 [default = NO_DECAY];</code>
       */
      public Builder clearMomentumDecay() {
        bitField0_ = (bitField0_ & ~0x00000100);
        momentumDecay_ = fzdeepnet.Setting.Trainer.Decay.NO_DECAY;
        onChanged();
        return this;
      }

      // optional float momentum_decay_param = 10 [default = 0.1];
      private float momentumDecayParam_ = 0.1F;
      /**
       * <code>optional float momentum_decay_param = 10 [default = 0.1];</code>
       */
      public boolean hasMomentumDecayParam() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional float momentum_decay_param = 10 [default = 0.1];</code>
       */
      public float getMomentumDecayParam() {
        return momentumDecayParam_;
      }
      /**
       * <code>optional float momentum_decay_param = 10 [default = 0.1];</code>
       */
      public Builder setMomentumDecayParam(float value) {
        bitField0_ |= 0x00000200;
        momentumDecayParam_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float momentum_decay_param = 10 [default = 0.1];</code>
       */
      public Builder clearMomentumDecayParam() {
        bitField0_ = (bitField0_ & ~0x00000200);
        momentumDecayParam_ = 0.1F;
        onChanged();
        return this;
      }

      // optional float final_momentum = 11 [default = 0];
      private float finalMomentum_ ;
      /**
       * <code>optional float final_momentum = 11 [default = 0];</code>
       */
      public boolean hasFinalMomentum() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional float final_momentum = 11 [default = 0];</code>
       */
      public float getFinalMomentum() {
        return finalMomentum_;
      }
      /**
       * <code>optional float final_momentum = 11 [default = 0];</code>
       */
      public Builder setFinalMomentum(float value) {
        bitField0_ |= 0x00000400;
        finalMomentum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float final_momentum = 11 [default = 0];</code>
       */
      public Builder clearFinalMomentum() {
        bitField0_ = (bitField0_ & ~0x00000400);
        finalMomentum_ = 0F;
        onChanged();
        return this;
      }

      // optional .fzdeepnet.Trainer.TType type = 12 [default = NONE];
      private fzdeepnet.Setting.Trainer.TType type_ = fzdeepnet.Setting.Trainer.TType.NONE;
      /**
       * <code>optional .fzdeepnet.Trainer.TType type = 12 [default = NONE];</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .fzdeepnet.Trainer.TType type = 12 [default = NONE];</code>
       */
      public fzdeepnet.Setting.Trainer.TType getType() {
        return type_;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.TType type = 12 [default = NONE];</code>
       */
      public Builder setType(fzdeepnet.Setting.Trainer.TType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000800;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.TType type = 12 [default = NONE];</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000800);
        type_ = fzdeepnet.Setting.Trainer.TType.NONE;
        onChanged();
        return this;
      }

      // optional .fzdeepnet.Trainer.RBMBASE rbm_train = 13 [default = NORBM];
      private fzdeepnet.Setting.Trainer.RBMBASE rbmTrain_ = fzdeepnet.Setting.Trainer.RBMBASE.NORBM;
      /**
       * <code>optional .fzdeepnet.Trainer.RBMBASE rbm_train = 13 [default = NORBM];</code>
       */
      public boolean hasRbmTrain() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .fzdeepnet.Trainer.RBMBASE rbm_train = 13 [default = NORBM];</code>
       */
      public fzdeepnet.Setting.Trainer.RBMBASE getRbmTrain() {
        return rbmTrain_;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.RBMBASE rbm_train = 13 [default = NORBM];</code>
       */
      public Builder setRbmTrain(fzdeepnet.Setting.Trainer.RBMBASE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00001000;
        rbmTrain_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.RBMBASE rbm_train = 13 [default = NORBM];</code>
       */
      public Builder clearRbmTrain() {
        bitField0_ = (bitField0_ & ~0x00001000);
        rbmTrain_ = fzdeepnet.Setting.Trainer.RBMBASE.NORBM;
        onChanged();
        return this;
      }

      // optional int32 gibbs_num = 14 [default = 1];
      private int gibbsNum_ = 1;
      /**
       * <code>optional int32 gibbs_num = 14 [default = 1];</code>
       */
      public boolean hasGibbsNum() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 gibbs_num = 14 [default = 1];</code>
       */
      public int getGibbsNum() {
        return gibbsNum_;
      }
      /**
       * <code>optional int32 gibbs_num = 14 [default = 1];</code>
       */
      public Builder setGibbsNum(int value) {
        bitField0_ |= 0x00002000;
        gibbsNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 gibbs_num = 14 [default = 1];</code>
       */
      public Builder clearGibbsNum() {
        bitField0_ = (bitField0_ & ~0x00002000);
        gibbsNum_ = 1;
        onChanged();
        return this;
      }

      // optional .fzdeepnet.Trainer.AEBASE ae_train = 15 [default = NOAE];
      private fzdeepnet.Setting.Trainer.AEBASE aeTrain_ = fzdeepnet.Setting.Trainer.AEBASE.NOAE;
      /**
       * <code>optional .fzdeepnet.Trainer.AEBASE ae_train = 15 [default = NOAE];</code>
       */
      public boolean hasAeTrain() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .fzdeepnet.Trainer.AEBASE ae_train = 15 [default = NOAE];</code>
       */
      public fzdeepnet.Setting.Trainer.AEBASE getAeTrain() {
        return aeTrain_;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.AEBASE ae_train = 15 [default = NOAE];</code>
       */
      public Builder setAeTrain(fzdeepnet.Setting.Trainer.AEBASE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00004000;
        aeTrain_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.AEBASE ae_train = 15 [default = NOAE];</code>
       */
      public Builder clearAeTrain() {
        bitField0_ = (bitField0_ & ~0x00004000);
        aeTrain_ = fzdeepnet.Setting.Trainer.AEBASE.NOAE;
        onChanged();
        return this;
      }

      // optional .fzdeepnet.Trainer.BAMBASE bam_train = 16 [default = NOBAM];
      private fzdeepnet.Setting.Trainer.BAMBASE bamTrain_ = fzdeepnet.Setting.Trainer.BAMBASE.NOBAM;
      /**
       * <code>optional .fzdeepnet.Trainer.BAMBASE bam_train = 16 [default = NOBAM];</code>
       */
      public boolean hasBamTrain() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .fzdeepnet.Trainer.BAMBASE bam_train = 16 [default = NOBAM];</code>
       */
      public fzdeepnet.Setting.Trainer.BAMBASE getBamTrain() {
        return bamTrain_;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.BAMBASE bam_train = 16 [default = NOBAM];</code>
       */
      public Builder setBamTrain(fzdeepnet.Setting.Trainer.BAMBASE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00008000;
        bamTrain_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.BAMBASE bam_train = 16 [default = NOBAM];</code>
       */
      public Builder clearBamTrain() {
        bitField0_ = (bitField0_ & ~0x00008000);
        bamTrain_ = fzdeepnet.Setting.Trainer.BAMBASE.NOBAM;
        onChanged();
        return this;
      }

      // optional int32 pseudo_gibbs_num = 17 [default = 0];
      private int pseudoGibbsNum_ ;
      /**
       * <code>optional int32 pseudo_gibbs_num = 17 [default = 0];</code>
       */
      public boolean hasPseudoGibbsNum() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 pseudo_gibbs_num = 17 [default = 0];</code>
       */
      public int getPseudoGibbsNum() {
        return pseudoGibbsNum_;
      }
      /**
       * <code>optional int32 pseudo_gibbs_num = 17 [default = 0];</code>
       */
      public Builder setPseudoGibbsNum(int value) {
        bitField0_ |= 0x00010000;
        pseudoGibbsNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pseudo_gibbs_num = 17 [default = 0];</code>
       */
      public Builder clearPseudoGibbsNum() {
        bitField0_ = (bitField0_ & ~0x00010000);
        pseudoGibbsNum_ = 0;
        onChanged();
        return this;
      }

      // optional .fzdeepnet.Trainer.DBNBASE dbn_train = 18 [default = NODBN];
      private fzdeepnet.Setting.Trainer.DBNBASE dbnTrain_ = fzdeepnet.Setting.Trainer.DBNBASE.NODBN;
      /**
       * <code>optional .fzdeepnet.Trainer.DBNBASE dbn_train = 18 [default = NODBN];</code>
       */
      public boolean hasDbnTrain() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .fzdeepnet.Trainer.DBNBASE dbn_train = 18 [default = NODBN];</code>
       */
      public fzdeepnet.Setting.Trainer.DBNBASE getDbnTrain() {
        return dbnTrain_;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.DBNBASE dbn_train = 18 [default = NODBN];</code>
       */
      public Builder setDbnTrain(fzdeepnet.Setting.Trainer.DBNBASE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00020000;
        dbnTrain_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.DBNBASE dbn_train = 18 [default = NODBN];</code>
       */
      public Builder clearDbnTrain() {
        bitField0_ = (bitField0_ & ~0x00020000);
        dbnTrain_ = fzdeepnet.Setting.Trainer.DBNBASE.NODBN;
        onChanged();
        return this;
      }

      // optional .fzdeepnet.Trainer.DBMBASE dbm_train = 19 [default = NODBM];
      private fzdeepnet.Setting.Trainer.DBMBASE dbmTrain_ = fzdeepnet.Setting.Trainer.DBMBASE.NODBM;
      /**
       * <code>optional .fzdeepnet.Trainer.DBMBASE dbm_train = 19 [default = NODBM];</code>
       */
      public boolean hasDbmTrain() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional .fzdeepnet.Trainer.DBMBASE dbm_train = 19 [default = NODBM];</code>
       */
      public fzdeepnet.Setting.Trainer.DBMBASE getDbmTrain() {
        return dbmTrain_;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.DBMBASE dbm_train = 19 [default = NODBM];</code>
       */
      public Builder setDbmTrain(fzdeepnet.Setting.Trainer.DBMBASE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00040000;
        dbmTrain_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.DBMBASE dbm_train = 19 [default = NODBM];</code>
       */
      public Builder clearDbmTrain() {
        bitField0_ = (bitField0_ & ~0x00040000);
        dbmTrain_ = fzdeepnet.Setting.Trainer.DBMBASE.NODBM;
        onChanged();
        return this;
      }

      // optional .fzdeepnet.Trainer.DBAMBASE dbam_train = 20 [default = NODBAM];
      private fzdeepnet.Setting.Trainer.DBAMBASE dbamTrain_ = fzdeepnet.Setting.Trainer.DBAMBASE.NODBAM;
      /**
       * <code>optional .fzdeepnet.Trainer.DBAMBASE dbam_train = 20 [default = NODBAM];</code>
       */
      public boolean hasDbamTrain() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional .fzdeepnet.Trainer.DBAMBASE dbam_train = 20 [default = NODBAM];</code>
       */
      public fzdeepnet.Setting.Trainer.DBAMBASE getDbamTrain() {
        return dbamTrain_;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.DBAMBASE dbam_train = 20 [default = NODBAM];</code>
       */
      public Builder setDbamTrain(fzdeepnet.Setting.Trainer.DBAMBASE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00080000;
        dbamTrain_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.DBAMBASE dbam_train = 20 [default = NODBAM];</code>
       */
      public Builder clearDbamTrain() {
        bitField0_ = (bitField0_ & ~0x00080000);
        dbamTrain_ = fzdeepnet.Setting.Trainer.DBAMBASE.NODBAM;
        onChanged();
        return this;
      }

      // optional .fzdeepnet.Trainer.NNBASE nn_train = 21;
      private fzdeepnet.Setting.Trainer.NNBASE nnTrain_ = fzdeepnet.Setting.Trainer.NNBASE.GRAD_DESCEND;
      /**
       * <code>optional .fzdeepnet.Trainer.NNBASE nn_train = 21;</code>
       */
      public boolean hasNnTrain() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional .fzdeepnet.Trainer.NNBASE nn_train = 21;</code>
       */
      public fzdeepnet.Setting.Trainer.NNBASE getNnTrain() {
        return nnTrain_;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.NNBASE nn_train = 21;</code>
       */
      public Builder setNnTrain(fzdeepnet.Setting.Trainer.NNBASE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00100000;
        nnTrain_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.NNBASE nn_train = 21;</code>
       */
      public Builder clearNnTrain() {
        bitField0_ = (bitField0_ & ~0x00100000);
        nnTrain_ = fzdeepnet.Setting.Trainer.NNBASE.GRAD_DESCEND;
        onChanged();
        return this;
      }

      // optional .fzdeepnet.Trainer.COSTFUNC nn_cost = 22;
      private fzdeepnet.Setting.Trainer.COSTFUNC nnCost_ = fzdeepnet.Setting.Trainer.COSTFUNC.L2NORM;
      /**
       * <code>optional .fzdeepnet.Trainer.COSTFUNC nn_cost = 22;</code>
       */
      public boolean hasNnCost() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional .fzdeepnet.Trainer.COSTFUNC nn_cost = 22;</code>
       */
      public fzdeepnet.Setting.Trainer.COSTFUNC getNnCost() {
        return nnCost_;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.COSTFUNC nn_cost = 22;</code>
       */
      public Builder setNnCost(fzdeepnet.Setting.Trainer.COSTFUNC value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00200000;
        nnCost_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.COSTFUNC nn_cost = 22;</code>
       */
      public Builder clearNnCost() {
        bitField0_ = (bitField0_ & ~0x00200000);
        nnCost_ = fzdeepnet.Setting.Trainer.COSTFUNC.L2NORM;
        onChanged();
        return this;
      }

      // optional float weight_norm = 23 [default = 0];
      private float weightNorm_ ;
      /**
       * <code>optional float weight_norm = 23 [default = 0];</code>
       *
       * <pre>
       *------------ REGULARIZATION ------
       * Weight  L2 norm	
       * </pre>
       */
      public boolean hasWeightNorm() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional float weight_norm = 23 [default = 0];</code>
       *
       * <pre>
       *------------ REGULARIZATION ------
       * Weight  L2 norm	
       * </pre>
       */
      public float getWeightNorm() {
        return weightNorm_;
      }
      /**
       * <code>optional float weight_norm = 23 [default = 0];</code>
       *
       * <pre>
       *------------ REGULARIZATION ------
       * Weight  L2 norm	
       * </pre>
       */
      public Builder setWeightNorm(float value) {
        bitField0_ |= 0x00400000;
        weightNorm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float weight_norm = 23 [default = 0];</code>
       *
       * <pre>
       *------------ REGULARIZATION ------
       * Weight  L2 norm	
       * </pre>
       */
      public Builder clearWeightNorm() {
        bitField0_ = (bitField0_ & ~0x00400000);
        weightNorm_ = 0F;
        onChanged();
        return this;
      }

      // optional .fzdeepnet.Trainer.SPARSITY sparsity = 24 [default = NOSPARSE];
      private fzdeepnet.Setting.Trainer.SPARSITY sparsity_ = fzdeepnet.Setting.Trainer.SPARSITY.NOSPARSE;
      /**
       * <code>optional .fzdeepnet.Trainer.SPARSITY sparsity = 24 [default = NOSPARSE];</code>
       */
      public boolean hasSparsity() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional .fzdeepnet.Trainer.SPARSITY sparsity = 24 [default = NOSPARSE];</code>
       */
      public fzdeepnet.Setting.Trainer.SPARSITY getSparsity() {
        return sparsity_;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.SPARSITY sparsity = 24 [default = NOSPARSE];</code>
       */
      public Builder setSparsity(fzdeepnet.Setting.Trainer.SPARSITY value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00800000;
        sparsity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer.SPARSITY sparsity = 24 [default = NOSPARSE];</code>
       */
      public Builder clearSparsity() {
        bitField0_ = (bitField0_ & ~0x00800000);
        sparsity_ = fzdeepnet.Setting.Trainer.SPARSITY.NOSPARSE;
        onChanged();
        return this;
      }

      // optional float s_lambda = 25 [default = 0];
      private float sLambda_ ;
      /**
       * <code>optional float s_lambda = 25 [default = 0];</code>
       */
      public boolean hasSLambda() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional float s_lambda = 25 [default = 0];</code>
       */
      public float getSLambda() {
        return sLambda_;
      }
      /**
       * <code>optional float s_lambda = 25 [default = 0];</code>
       */
      public Builder setSLambda(float value) {
        bitField0_ |= 0x01000000;
        sLambda_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float s_lambda = 25 [default = 0];</code>
       */
      public Builder clearSLambda() {
        bitField0_ = (bitField0_ & ~0x01000000);
        sLambda_ = 0F;
        onChanged();
        return this;
      }

      // optional float p = 26 [default = 0];
      private float p_ ;
      /**
       * <code>optional float p = 26 [default = 0];</code>
       */
      public boolean hasP() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional float p = 26 [default = 0];</code>
       */
      public float getP() {
        return p_;
      }
      /**
       * <code>optional float p = 26 [default = 0];</code>
       */
      public Builder setP(float value) {
        bitField0_ |= 0x02000000;
        p_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float p = 26 [default = 0];</code>
       */
      public Builder clearP() {
        bitField0_ = (bitField0_ & ~0x02000000);
        p_ = 0F;
        onChanged();
        return this;
      }

      // optional int32 early_stopping = 27 [default = 0];
      private int earlyStopping_ ;
      /**
       * <code>optional int32 early_stopping = 27 [default = 0];</code>
       *
       * <pre>
       * ----------- EARLY STOPPING
       * </pre>
       */
      public boolean hasEarlyStopping() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional int32 early_stopping = 27 [default = 0];</code>
       *
       * <pre>
       * ----------- EARLY STOPPING
       * </pre>
       */
      public int getEarlyStopping() {
        return earlyStopping_;
      }
      /**
       * <code>optional int32 early_stopping = 27 [default = 0];</code>
       *
       * <pre>
       * ----------- EARLY STOPPING
       * </pre>
       */
      public Builder setEarlyStopping(int value) {
        bitField0_ |= 0x04000000;
        earlyStopping_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 early_stopping = 27 [default = 0];</code>
       *
       * <pre>
       * ----------- EARLY STOPPING
       * </pre>
       */
      public Builder clearEarlyStopping() {
        bitField0_ = (bitField0_ & ~0x04000000);
        earlyStopping_ = 0;
        onChanged();
        return this;
      }

      // optional float es_learning_rate_decay = 28 [default = 0];
      private float esLearningRateDecay_ ;
      /**
       * <code>optional float es_learning_rate_decay = 28 [default = 0];</code>
       *
       * <pre>
       * Exponential param
       * </pre>
       */
      public boolean hasEsLearningRateDecay() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional float es_learning_rate_decay = 28 [default = 0];</code>
       *
       * <pre>
       * Exponential param
       * </pre>
       */
      public float getEsLearningRateDecay() {
        return esLearningRateDecay_;
      }
      /**
       * <code>optional float es_learning_rate_decay = 28 [default = 0];</code>
       *
       * <pre>
       * Exponential param
       * </pre>
       */
      public Builder setEsLearningRateDecay(float value) {
        bitField0_ |= 0x08000000;
        esLearningRateDecay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float es_learning_rate_decay = 28 [default = 0];</code>
       *
       * <pre>
       * Exponential param
       * </pre>
       */
      public Builder clearEsLearningRateDecay() {
        bitField0_ = (bitField0_ & ~0x08000000);
        esLearningRateDecay_ = 0F;
        onChanged();
        return this;
      }

      // optional float es_momentum_decay = 29 [default = 0];
      private float esMomentumDecay_ ;
      /**
       * <code>optional float es_momentum_decay = 29 [default = 0];</code>
       *
       * <pre>
       * Exponential param
       * </pre>
       */
      public boolean hasEsMomentumDecay() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional float es_momentum_decay = 29 [default = 0];</code>
       *
       * <pre>
       * Exponential param
       * </pre>
       */
      public float getEsMomentumDecay() {
        return esMomentumDecay_;
      }
      /**
       * <code>optional float es_momentum_decay = 29 [default = 0];</code>
       *
       * <pre>
       * Exponential param
       * </pre>
       */
      public Builder setEsMomentumDecay(float value) {
        bitField0_ |= 0x10000000;
        esMomentumDecay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float es_momentum_decay = 29 [default = 0];</code>
       *
       * <pre>
       * Exponential param
       * </pre>
       */
      public Builder clearEsMomentumDecay() {
        bitField0_ = (bitField0_ & ~0x10000000);
        esMomentumDecay_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:fzdeepnet.Trainer)
    }

    static {
      defaultInstance = new Trainer(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:fzdeepnet.Trainer)
  }

  public interface DataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 part = 1;
    /**
     * <code>optional int32 part = 1;</code>
     */
    boolean hasPart();
    /**
     * <code>optional int32 part = 1;</code>
     */
    int getPart();

    // optional .fzdeepnet.Data.DTYPE data_type = 2 [default = TRAINING];
    /**
     * <code>optional .fzdeepnet.Data.DTYPE data_type = 2 [default = TRAINING];</code>
     */
    boolean hasDataType();
    /**
     * <code>optional .fzdeepnet.Data.DTYPE data_type = 2 [default = TRAINING];</code>
     */
    fzdeepnet.Setting.Data.DTYPE getDataType();

    // required string dat_path = 3;
    /**
     * <code>required string dat_path = 3;</code>
     */
    boolean hasDatPath();
    /**
     * <code>required string dat_path = 3;</code>
     */
    java.lang.String getDatPath();
    /**
     * <code>required string dat_path = 3;</code>
     */
    com.google.protobuf.ByteString
        getDatPathBytes();

    // optional string lab_path = 4 [default = ""];
    /**
     * <code>optional string lab_path = 4 [default = ""];</code>
     */
    boolean hasLabPath();
    /**
     * <code>optional string lab_path = 4 [default = ""];</code>
     */
    java.lang.String getLabPath();
    /**
     * <code>optional string lab_path = 4 [default = ""];</code>
     */
    com.google.protobuf.ByteString
        getLabPathBytes();

    // optional string additional_file_path = 5;
    /**
     * <code>optional string additional_file_path = 5;</code>
     */
    boolean hasAdditionalFilePath();
    /**
     * <code>optional string additional_file_path = 5;</code>
     */
    java.lang.String getAdditionalFilePath();
    /**
     * <code>optional string additional_file_path = 5;</code>
     */
    com.google.protobuf.ByteString
        getAdditionalFilePathBytes();
  }
  /**
   * Protobuf type {@code fzdeepnet.Data}
   */
  public static final class Data extends
      com.google.protobuf.GeneratedMessage
      implements DataOrBuilder {
    // Use Data.newBuilder() to construct.
    private Data(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Data(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Data defaultInstance;
    public static Data getDefaultInstance() {
      return defaultInstance;
    }

    public Data getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Data(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              part_ = input.readInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              fzdeepnet.Setting.Data.DTYPE value = fzdeepnet.Setting.Data.DTYPE.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                dataType_ = value;
              }
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              datPath_ = input.readBytes();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              labPath_ = input.readBytes();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              additionalFilePath_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return fzdeepnet.Setting.internal_static_fzdeepnet_Data_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return fzdeepnet.Setting.internal_static_fzdeepnet_Data_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              fzdeepnet.Setting.Data.class, fzdeepnet.Setting.Data.Builder.class);
    }

    public static com.google.protobuf.Parser<Data> PARSER =
        new com.google.protobuf.AbstractParser<Data>() {
      public Data parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Data(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Data> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code fzdeepnet.Data.DTYPE}
     */
    public enum DTYPE
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>TRAINING = 0;</code>
       */
      TRAINING(0, 0),
      /**
       * <code>VALIDATION = 1;</code>
       */
      VALIDATION(1, 1),
      /**
       * <code>TEST = 2;</code>
       */
      TEST(2, 2),
      ;

      /**
       * <code>TRAINING = 0;</code>
       */
      public static final int TRAINING_VALUE = 0;
      /**
       * <code>VALIDATION = 1;</code>
       */
      public static final int VALIDATION_VALUE = 1;
      /**
       * <code>TEST = 2;</code>
       */
      public static final int TEST_VALUE = 2;


      public final int getNumber() { return value; }

      public static DTYPE valueOf(int value) {
        switch (value) {
          case 0: return TRAINING;
          case 1: return VALIDATION;
          case 2: return TEST;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<DTYPE>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<DTYPE>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<DTYPE>() {
              public DTYPE findValueByNumber(int number) {
                return DTYPE.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return fzdeepnet.Setting.Data.getDescriptor().getEnumTypes().get(0);
      }

      private static final DTYPE[] VALUES = values();

      public static DTYPE valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private DTYPE(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:fzdeepnet.Data.DTYPE)
    }

    private int bitField0_;
    // optional int32 part = 1;
    public static final int PART_FIELD_NUMBER = 1;
    private int part_;
    /**
     * <code>optional int32 part = 1;</code>
     */
    public boolean hasPart() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 part = 1;</code>
     */
    public int getPart() {
      return part_;
    }

    // optional .fzdeepnet.Data.DTYPE data_type = 2 [default = TRAINING];
    public static final int DATA_TYPE_FIELD_NUMBER = 2;
    private fzdeepnet.Setting.Data.DTYPE dataType_;
    /**
     * <code>optional .fzdeepnet.Data.DTYPE data_type = 2 [default = TRAINING];</code>
     */
    public boolean hasDataType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .fzdeepnet.Data.DTYPE data_type = 2 [default = TRAINING];</code>
     */
    public fzdeepnet.Setting.Data.DTYPE getDataType() {
      return dataType_;
    }

    // required string dat_path = 3;
    public static final int DAT_PATH_FIELD_NUMBER = 3;
    private java.lang.Object datPath_;
    /**
     * <code>required string dat_path = 3;</code>
     */
    public boolean hasDatPath() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required string dat_path = 3;</code>
     */
    public java.lang.String getDatPath() {
      java.lang.Object ref = datPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          datPath_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string dat_path = 3;</code>
     */
    public com.google.protobuf.ByteString
        getDatPathBytes() {
      java.lang.Object ref = datPath_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        datPath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string lab_path = 4 [default = ""];
    public static final int LAB_PATH_FIELD_NUMBER = 4;
    private java.lang.Object labPath_;
    /**
     * <code>optional string lab_path = 4 [default = ""];</code>
     */
    public boolean hasLabPath() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string lab_path = 4 [default = ""];</code>
     */
    public java.lang.String getLabPath() {
      java.lang.Object ref = labPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          labPath_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string lab_path = 4 [default = ""];</code>
     */
    public com.google.protobuf.ByteString
        getLabPathBytes() {
      java.lang.Object ref = labPath_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        labPath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string additional_file_path = 5;
    public static final int ADDITIONAL_FILE_PATH_FIELD_NUMBER = 5;
    private java.lang.Object additionalFilePath_;
    /**
     * <code>optional string additional_file_path = 5;</code>
     */
    public boolean hasAdditionalFilePath() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string additional_file_path = 5;</code>
     */
    public java.lang.String getAdditionalFilePath() {
      java.lang.Object ref = additionalFilePath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          additionalFilePath_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string additional_file_path = 5;</code>
     */
    public com.google.protobuf.ByteString
        getAdditionalFilePathBytes() {
      java.lang.Object ref = additionalFilePath_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        additionalFilePath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      part_ = 0;
      dataType_ = fzdeepnet.Setting.Data.DTYPE.TRAINING;
      datPath_ = "";
      labPath_ = "";
      additionalFilePath_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasDatPath()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, part_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, dataType_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getDatPathBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getLabPathBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, getAdditionalFilePathBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, part_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, dataType_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getDatPathBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getLabPathBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getAdditionalFilePathBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static fzdeepnet.Setting.Data parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fzdeepnet.Setting.Data parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fzdeepnet.Setting.Data parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fzdeepnet.Setting.Data parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fzdeepnet.Setting.Data parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static fzdeepnet.Setting.Data parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static fzdeepnet.Setting.Data parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static fzdeepnet.Setting.Data parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static fzdeepnet.Setting.Data parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static fzdeepnet.Setting.Data parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(fzdeepnet.Setting.Data prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code fzdeepnet.Data}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements fzdeepnet.Setting.DataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return fzdeepnet.Setting.internal_static_fzdeepnet_Data_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return fzdeepnet.Setting.internal_static_fzdeepnet_Data_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                fzdeepnet.Setting.Data.class, fzdeepnet.Setting.Data.Builder.class);
      }

      // Construct using fzdeepnet.Setting.Data.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        part_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        dataType_ = fzdeepnet.Setting.Data.DTYPE.TRAINING;
        bitField0_ = (bitField0_ & ~0x00000002);
        datPath_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        labPath_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        additionalFilePath_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return fzdeepnet.Setting.internal_static_fzdeepnet_Data_descriptor;
      }

      public fzdeepnet.Setting.Data getDefaultInstanceForType() {
        return fzdeepnet.Setting.Data.getDefaultInstance();
      }

      public fzdeepnet.Setting.Data build() {
        fzdeepnet.Setting.Data result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public fzdeepnet.Setting.Data buildPartial() {
        fzdeepnet.Setting.Data result = new fzdeepnet.Setting.Data(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.part_ = part_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.dataType_ = dataType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.datPath_ = datPath_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.labPath_ = labPath_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.additionalFilePath_ = additionalFilePath_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof fzdeepnet.Setting.Data) {
          return mergeFrom((fzdeepnet.Setting.Data)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(fzdeepnet.Setting.Data other) {
        if (other == fzdeepnet.Setting.Data.getDefaultInstance()) return this;
        if (other.hasPart()) {
          setPart(other.getPart());
        }
        if (other.hasDataType()) {
          setDataType(other.getDataType());
        }
        if (other.hasDatPath()) {
          bitField0_ |= 0x00000004;
          datPath_ = other.datPath_;
          onChanged();
        }
        if (other.hasLabPath()) {
          bitField0_ |= 0x00000008;
          labPath_ = other.labPath_;
          onChanged();
        }
        if (other.hasAdditionalFilePath()) {
          bitField0_ |= 0x00000010;
          additionalFilePath_ = other.additionalFilePath_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasDatPath()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        fzdeepnet.Setting.Data parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (fzdeepnet.Setting.Data) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 part = 1;
      private int part_ ;
      /**
       * <code>optional int32 part = 1;</code>
       */
      public boolean hasPart() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 part = 1;</code>
       */
      public int getPart() {
        return part_;
      }
      /**
       * <code>optional int32 part = 1;</code>
       */
      public Builder setPart(int value) {
        bitField0_ |= 0x00000001;
        part_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 part = 1;</code>
       */
      public Builder clearPart() {
        bitField0_ = (bitField0_ & ~0x00000001);
        part_ = 0;
        onChanged();
        return this;
      }

      // optional .fzdeepnet.Data.DTYPE data_type = 2 [default = TRAINING];
      private fzdeepnet.Setting.Data.DTYPE dataType_ = fzdeepnet.Setting.Data.DTYPE.TRAINING;
      /**
       * <code>optional .fzdeepnet.Data.DTYPE data_type = 2 [default = TRAINING];</code>
       */
      public boolean hasDataType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .fzdeepnet.Data.DTYPE data_type = 2 [default = TRAINING];</code>
       */
      public fzdeepnet.Setting.Data.DTYPE getDataType() {
        return dataType_;
      }
      /**
       * <code>optional .fzdeepnet.Data.DTYPE data_type = 2 [default = TRAINING];</code>
       */
      public Builder setDataType(fzdeepnet.Setting.Data.DTYPE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        dataType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Data.DTYPE data_type = 2 [default = TRAINING];</code>
       */
      public Builder clearDataType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        dataType_ = fzdeepnet.Setting.Data.DTYPE.TRAINING;
        onChanged();
        return this;
      }

      // required string dat_path = 3;
      private java.lang.Object datPath_ = "";
      /**
       * <code>required string dat_path = 3;</code>
       */
      public boolean hasDatPath() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required string dat_path = 3;</code>
       */
      public java.lang.String getDatPath() {
        java.lang.Object ref = datPath_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          datPath_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string dat_path = 3;</code>
       */
      public com.google.protobuf.ByteString
          getDatPathBytes() {
        java.lang.Object ref = datPath_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          datPath_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string dat_path = 3;</code>
       */
      public Builder setDatPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        datPath_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string dat_path = 3;</code>
       */
      public Builder clearDatPath() {
        bitField0_ = (bitField0_ & ~0x00000004);
        datPath_ = getDefaultInstance().getDatPath();
        onChanged();
        return this;
      }
      /**
       * <code>required string dat_path = 3;</code>
       */
      public Builder setDatPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        datPath_ = value;
        onChanged();
        return this;
      }

      // optional string lab_path = 4 [default = ""];
      private java.lang.Object labPath_ = "";
      /**
       * <code>optional string lab_path = 4 [default = ""];</code>
       */
      public boolean hasLabPath() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string lab_path = 4 [default = ""];</code>
       */
      public java.lang.String getLabPath() {
        java.lang.Object ref = labPath_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          labPath_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string lab_path = 4 [default = ""];</code>
       */
      public com.google.protobuf.ByteString
          getLabPathBytes() {
        java.lang.Object ref = labPath_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          labPath_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string lab_path = 4 [default = ""];</code>
       */
      public Builder setLabPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        labPath_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string lab_path = 4 [default = ""];</code>
       */
      public Builder clearLabPath() {
        bitField0_ = (bitField0_ & ~0x00000008);
        labPath_ = getDefaultInstance().getLabPath();
        onChanged();
        return this;
      }
      /**
       * <code>optional string lab_path = 4 [default = ""];</code>
       */
      public Builder setLabPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        labPath_ = value;
        onChanged();
        return this;
      }

      // optional string additional_file_path = 5;
      private java.lang.Object additionalFilePath_ = "";
      /**
       * <code>optional string additional_file_path = 5;</code>
       */
      public boolean hasAdditionalFilePath() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string additional_file_path = 5;</code>
       */
      public java.lang.String getAdditionalFilePath() {
        java.lang.Object ref = additionalFilePath_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          additionalFilePath_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string additional_file_path = 5;</code>
       */
      public com.google.protobuf.ByteString
          getAdditionalFilePathBytes() {
        java.lang.Object ref = additionalFilePath_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          additionalFilePath_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string additional_file_path = 5;</code>
       */
      public Builder setAdditionalFilePath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        additionalFilePath_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string additional_file_path = 5;</code>
       */
      public Builder clearAdditionalFilePath() {
        bitField0_ = (bitField0_ & ~0x00000010);
        additionalFilePath_ = getDefaultInstance().getAdditionalFilePath();
        onChanged();
        return this;
      }
      /**
       * <code>optional string additional_file_path = 5;</code>
       */
      public Builder setAdditionalFilePathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        additionalFilePath_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:fzdeepnet.Data)
    }

    static {
      defaultInstance = new Data(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:fzdeepnet.Data)
  }

  public interface ModelOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string model_name = 1;
    /**
     * <code>required string model_name = 1;</code>
     */
    boolean hasModelName();
    /**
     * <code>required string model_name = 1;</code>
     */
    java.lang.String getModelName();
    /**
     * <code>required string model_name = 1;</code>
     */
    com.google.protobuf.ByteString
        getModelNameBytes();

    // required string model_base = 2;
    /**
     * <code>required string model_base = 2;</code>
     */
    boolean hasModelBase();
    /**
     * <code>required string model_base = 2;</code>
     */
    java.lang.String getModelBase();
    /**
     * <code>required string model_base = 2;</code>
     */
    com.google.protobuf.ByteString
        getModelBaseBytes();

    // optional string app_name = 3;
    /**
     * <code>optional string app_name = 3;</code>
     */
    boolean hasAppName();
    /**
     * <code>optional string app_name = 3;</code>
     */
    java.lang.String getAppName();
    /**
     * <code>optional string app_name = 3;</code>
     */
    com.google.protobuf.ByteString
        getAppNameBytes();

    // optional .fzdeepnet.Model.COMP computation = 4 [default = CPU];
    /**
     * <code>optional .fzdeepnet.Model.COMP computation = 4 [default = CPU];</code>
     */
    boolean hasComputation();
    /**
     * <code>optional .fzdeepnet.Model.COMP computation = 4 [default = CPU];</code>
     */
    fzdeepnet.Setting.Model.COMP getComputation();

    // repeated .fzdeepnet.Layer layer = 5;
    /**
     * <code>repeated .fzdeepnet.Layer layer = 5;</code>
     */
    java.util.List<fzdeepnet.Setting.Layer> 
        getLayerList();
    /**
     * <code>repeated .fzdeepnet.Layer layer = 5;</code>
     */
    fzdeepnet.Setting.Layer getLayer(int index);
    /**
     * <code>repeated .fzdeepnet.Layer layer = 5;</code>
     */
    int getLayerCount();
    /**
     * <code>repeated .fzdeepnet.Layer layer = 5;</code>
     */
    java.util.List<? extends fzdeepnet.Setting.LayerOrBuilder> 
        getLayerOrBuilderList();
    /**
     * <code>repeated .fzdeepnet.Layer layer = 5;</code>
     */
    fzdeepnet.Setting.LayerOrBuilder getLayerOrBuilder(
        int index);

    // repeated .fzdeepnet.DeepLayer deeplayer = 6;
    /**
     * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
     */
    java.util.List<fzdeepnet.Setting.DeepLayer> 
        getDeeplayerList();
    /**
     * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
     */
    fzdeepnet.Setting.DeepLayer getDeeplayer(int index);
    /**
     * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
     */
    int getDeeplayerCount();
    /**
     * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
     */
    java.util.List<? extends fzdeepnet.Setting.DeepLayerOrBuilder> 
        getDeeplayerOrBuilderList();
    /**
     * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
     */
    fzdeepnet.Setting.DeepLayerOrBuilder getDeeplayerOrBuilder(
        int index);

    // optional .fzdeepnet.Trainer gen_ftune = 7;
    /**
     * <code>optional .fzdeepnet.Trainer gen_ftune = 7;</code>
     */
    boolean hasGenFtune();
    /**
     * <code>optional .fzdeepnet.Trainer gen_ftune = 7;</code>
     */
    fzdeepnet.Setting.Trainer getGenFtune();
    /**
     * <code>optional .fzdeepnet.Trainer gen_ftune = 7;</code>
     */
    fzdeepnet.Setting.TrainerOrBuilder getGenFtuneOrBuilder();

    // optional .fzdeepnet.Trainer dis_ftune = 8;
    /**
     * <code>optional .fzdeepnet.Trainer dis_ftune = 8;</code>
     */
    boolean hasDisFtune();
    /**
     * <code>optional .fzdeepnet.Trainer dis_ftune = 8;</code>
     */
    fzdeepnet.Setting.Trainer getDisFtune();
    /**
     * <code>optional .fzdeepnet.Trainer dis_ftune = 8;</code>
     */
    fzdeepnet.Setting.TrainerOrBuilder getDisFtuneOrBuilder();

    // repeated .fzdeepnet.Data trn_dat = 9;
    /**
     * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
     */
    java.util.List<fzdeepnet.Setting.Data> 
        getTrnDatList();
    /**
     * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
     */
    fzdeepnet.Setting.Data getTrnDat(int index);
    /**
     * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
     */
    int getTrnDatCount();
    /**
     * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
     */
    java.util.List<? extends fzdeepnet.Setting.DataOrBuilder> 
        getTrnDatOrBuilderList();
    /**
     * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
     */
    fzdeepnet.Setting.DataOrBuilder getTrnDatOrBuilder(
        int index);

    // repeated .fzdeepnet.Data vld_dat = 10;
    /**
     * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
     */
    java.util.List<fzdeepnet.Setting.Data> 
        getVldDatList();
    /**
     * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
     */
    fzdeepnet.Setting.Data getVldDat(int index);
    /**
     * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
     */
    int getVldDatCount();
    /**
     * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
     */
    java.util.List<? extends fzdeepnet.Setting.DataOrBuilder> 
        getVldDatOrBuilderList();
    /**
     * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
     */
    fzdeepnet.Setting.DataOrBuilder getVldDatOrBuilder(
        int index);

    // repeated .fzdeepnet.Data tst_dat = 11;
    /**
     * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
     */
    java.util.List<fzdeepnet.Setting.Data> 
        getTstDatList();
    /**
     * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
     */
    fzdeepnet.Setting.Data getTstDat(int index);
    /**
     * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
     */
    int getTstDatCount();
    /**
     * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
     */
    java.util.List<? extends fzdeepnet.Setting.DataOrBuilder> 
        getTstDatOrBuilderList();
    /**
     * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
     */
    fzdeepnet.Setting.DataOrBuilder getTstDatOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code fzdeepnet.Model}
   */
  public static final class Model extends
      com.google.protobuf.GeneratedMessage
      implements ModelOrBuilder {
    // Use Model.newBuilder() to construct.
    private Model(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Model(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Model defaultInstance;
    public static Model getDefaultInstance() {
      return defaultInstance;
    }

    public Model getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Model(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              modelName_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              modelBase_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              appName_ = input.readBytes();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              fzdeepnet.Setting.Model.COMP value = fzdeepnet.Setting.Model.COMP.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                computation_ = value;
              }
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                layer_ = new java.util.ArrayList<fzdeepnet.Setting.Layer>();
                mutable_bitField0_ |= 0x00000010;
              }
              layer_.add(input.readMessage(fzdeepnet.Setting.Layer.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                deeplayer_ = new java.util.ArrayList<fzdeepnet.Setting.DeepLayer>();
                mutable_bitField0_ |= 0x00000020;
              }
              deeplayer_.add(input.readMessage(fzdeepnet.Setting.DeepLayer.PARSER, extensionRegistry));
              break;
            }
            case 58: {
              fzdeepnet.Setting.Trainer.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = genFtune_.toBuilder();
              }
              genFtune_ = input.readMessage(fzdeepnet.Setting.Trainer.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(genFtune_);
                genFtune_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 66: {
              fzdeepnet.Setting.Trainer.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = disFtune_.toBuilder();
              }
              disFtune_ = input.readMessage(fzdeepnet.Setting.Trainer.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(disFtune_);
                disFtune_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                trnDat_ = new java.util.ArrayList<fzdeepnet.Setting.Data>();
                mutable_bitField0_ |= 0x00000100;
              }
              trnDat_.add(input.readMessage(fzdeepnet.Setting.Data.PARSER, extensionRegistry));
              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                vldDat_ = new java.util.ArrayList<fzdeepnet.Setting.Data>();
                mutable_bitField0_ |= 0x00000200;
              }
              vldDat_.add(input.readMessage(fzdeepnet.Setting.Data.PARSER, extensionRegistry));
              break;
            }
            case 90: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                tstDat_ = new java.util.ArrayList<fzdeepnet.Setting.Data>();
                mutable_bitField0_ |= 0x00000400;
              }
              tstDat_.add(input.readMessage(fzdeepnet.Setting.Data.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          layer_ = java.util.Collections.unmodifiableList(layer_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          deeplayer_ = java.util.Collections.unmodifiableList(deeplayer_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          trnDat_ = java.util.Collections.unmodifiableList(trnDat_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          vldDat_ = java.util.Collections.unmodifiableList(vldDat_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          tstDat_ = java.util.Collections.unmodifiableList(tstDat_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return fzdeepnet.Setting.internal_static_fzdeepnet_Model_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return fzdeepnet.Setting.internal_static_fzdeepnet_Model_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              fzdeepnet.Setting.Model.class, fzdeepnet.Setting.Model.Builder.class);
    }

    public static com.google.protobuf.Parser<Model> PARSER =
        new com.google.protobuf.AbstractParser<Model>() {
      public Model parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Model(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Model> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code fzdeepnet.Model.COMP}
     */
    public enum COMP
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>CPU = 0;</code>
       */
      CPU(0, 0),
      /**
       * <code>GPU = 1;</code>
       */
      GPU(1, 1),
      /**
       * <code>CUDNN = 2;</code>
       */
      CUDNN(2, 2),
      ;

      /**
       * <code>CPU = 0;</code>
       */
      public static final int CPU_VALUE = 0;
      /**
       * <code>GPU = 1;</code>
       */
      public static final int GPU_VALUE = 1;
      /**
       * <code>CUDNN = 2;</code>
       */
      public static final int CUDNN_VALUE = 2;


      public final int getNumber() { return value; }

      public static COMP valueOf(int value) {
        switch (value) {
          case 0: return CPU;
          case 1: return GPU;
          case 2: return CUDNN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<COMP>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<COMP>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<COMP>() {
              public COMP findValueByNumber(int number) {
                return COMP.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return fzdeepnet.Setting.Model.getDescriptor().getEnumTypes().get(0);
      }

      private static final COMP[] VALUES = values();

      public static COMP valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private COMP(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:fzdeepnet.Model.COMP)
    }

    private int bitField0_;
    // required string model_name = 1;
    public static final int MODEL_NAME_FIELD_NUMBER = 1;
    private java.lang.Object modelName_;
    /**
     * <code>required string model_name = 1;</code>
     */
    public boolean hasModelName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string model_name = 1;</code>
     */
    public java.lang.String getModelName() {
      java.lang.Object ref = modelName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          modelName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string model_name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getModelNameBytes() {
      java.lang.Object ref = modelName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        modelName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string model_base = 2;
    public static final int MODEL_BASE_FIELD_NUMBER = 2;
    private java.lang.Object modelBase_;
    /**
     * <code>required string model_base = 2;</code>
     */
    public boolean hasModelBase() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string model_base = 2;</code>
     */
    public java.lang.String getModelBase() {
      java.lang.Object ref = modelBase_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          modelBase_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string model_base = 2;</code>
     */
    public com.google.protobuf.ByteString
        getModelBaseBytes() {
      java.lang.Object ref = modelBase_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        modelBase_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string app_name = 3;
    public static final int APP_NAME_FIELD_NUMBER = 3;
    private java.lang.Object appName_;
    /**
     * <code>optional string app_name = 3;</code>
     */
    public boolean hasAppName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string app_name = 3;</code>
     */
    public java.lang.String getAppName() {
      java.lang.Object ref = appName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          appName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string app_name = 3;</code>
     */
    public com.google.protobuf.ByteString
        getAppNameBytes() {
      java.lang.Object ref = appName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        appName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .fzdeepnet.Model.COMP computation = 4 [default = CPU];
    public static final int COMPUTATION_FIELD_NUMBER = 4;
    private fzdeepnet.Setting.Model.COMP computation_;
    /**
     * <code>optional .fzdeepnet.Model.COMP computation = 4 [default = CPU];</code>
     */
    public boolean hasComputation() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .fzdeepnet.Model.COMP computation = 4 [default = CPU];</code>
     */
    public fzdeepnet.Setting.Model.COMP getComputation() {
      return computation_;
    }

    // repeated .fzdeepnet.Layer layer = 5;
    public static final int LAYER_FIELD_NUMBER = 5;
    private java.util.List<fzdeepnet.Setting.Layer> layer_;
    /**
     * <code>repeated .fzdeepnet.Layer layer = 5;</code>
     */
    public java.util.List<fzdeepnet.Setting.Layer> getLayerList() {
      return layer_;
    }
    /**
     * <code>repeated .fzdeepnet.Layer layer = 5;</code>
     */
    public java.util.List<? extends fzdeepnet.Setting.LayerOrBuilder> 
        getLayerOrBuilderList() {
      return layer_;
    }
    /**
     * <code>repeated .fzdeepnet.Layer layer = 5;</code>
     */
    public int getLayerCount() {
      return layer_.size();
    }
    /**
     * <code>repeated .fzdeepnet.Layer layer = 5;</code>
     */
    public fzdeepnet.Setting.Layer getLayer(int index) {
      return layer_.get(index);
    }
    /**
     * <code>repeated .fzdeepnet.Layer layer = 5;</code>
     */
    public fzdeepnet.Setting.LayerOrBuilder getLayerOrBuilder(
        int index) {
      return layer_.get(index);
    }

    // repeated .fzdeepnet.DeepLayer deeplayer = 6;
    public static final int DEEPLAYER_FIELD_NUMBER = 6;
    private java.util.List<fzdeepnet.Setting.DeepLayer> deeplayer_;
    /**
     * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
     */
    public java.util.List<fzdeepnet.Setting.DeepLayer> getDeeplayerList() {
      return deeplayer_;
    }
    /**
     * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
     */
    public java.util.List<? extends fzdeepnet.Setting.DeepLayerOrBuilder> 
        getDeeplayerOrBuilderList() {
      return deeplayer_;
    }
    /**
     * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
     */
    public int getDeeplayerCount() {
      return deeplayer_.size();
    }
    /**
     * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
     */
    public fzdeepnet.Setting.DeepLayer getDeeplayer(int index) {
      return deeplayer_.get(index);
    }
    /**
     * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
     */
    public fzdeepnet.Setting.DeepLayerOrBuilder getDeeplayerOrBuilder(
        int index) {
      return deeplayer_.get(index);
    }

    // optional .fzdeepnet.Trainer gen_ftune = 7;
    public static final int GEN_FTUNE_FIELD_NUMBER = 7;
    private fzdeepnet.Setting.Trainer genFtune_;
    /**
     * <code>optional .fzdeepnet.Trainer gen_ftune = 7;</code>
     */
    public boolean hasGenFtune() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .fzdeepnet.Trainer gen_ftune = 7;</code>
     */
    public fzdeepnet.Setting.Trainer getGenFtune() {
      return genFtune_;
    }
    /**
     * <code>optional .fzdeepnet.Trainer gen_ftune = 7;</code>
     */
    public fzdeepnet.Setting.TrainerOrBuilder getGenFtuneOrBuilder() {
      return genFtune_;
    }

    // optional .fzdeepnet.Trainer dis_ftune = 8;
    public static final int DIS_FTUNE_FIELD_NUMBER = 8;
    private fzdeepnet.Setting.Trainer disFtune_;
    /**
     * <code>optional .fzdeepnet.Trainer dis_ftune = 8;</code>
     */
    public boolean hasDisFtune() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .fzdeepnet.Trainer dis_ftune = 8;</code>
     */
    public fzdeepnet.Setting.Trainer getDisFtune() {
      return disFtune_;
    }
    /**
     * <code>optional .fzdeepnet.Trainer dis_ftune = 8;</code>
     */
    public fzdeepnet.Setting.TrainerOrBuilder getDisFtuneOrBuilder() {
      return disFtune_;
    }

    // repeated .fzdeepnet.Data trn_dat = 9;
    public static final int TRN_DAT_FIELD_NUMBER = 9;
    private java.util.List<fzdeepnet.Setting.Data> trnDat_;
    /**
     * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
     */
    public java.util.List<fzdeepnet.Setting.Data> getTrnDatList() {
      return trnDat_;
    }
    /**
     * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
     */
    public java.util.List<? extends fzdeepnet.Setting.DataOrBuilder> 
        getTrnDatOrBuilderList() {
      return trnDat_;
    }
    /**
     * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
     */
    public int getTrnDatCount() {
      return trnDat_.size();
    }
    /**
     * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
     */
    public fzdeepnet.Setting.Data getTrnDat(int index) {
      return trnDat_.get(index);
    }
    /**
     * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
     */
    public fzdeepnet.Setting.DataOrBuilder getTrnDatOrBuilder(
        int index) {
      return trnDat_.get(index);
    }

    // repeated .fzdeepnet.Data vld_dat = 10;
    public static final int VLD_DAT_FIELD_NUMBER = 10;
    private java.util.List<fzdeepnet.Setting.Data> vldDat_;
    /**
     * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
     */
    public java.util.List<fzdeepnet.Setting.Data> getVldDatList() {
      return vldDat_;
    }
    /**
     * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
     */
    public java.util.List<? extends fzdeepnet.Setting.DataOrBuilder> 
        getVldDatOrBuilderList() {
      return vldDat_;
    }
    /**
     * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
     */
    public int getVldDatCount() {
      return vldDat_.size();
    }
    /**
     * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
     */
    public fzdeepnet.Setting.Data getVldDat(int index) {
      return vldDat_.get(index);
    }
    /**
     * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
     */
    public fzdeepnet.Setting.DataOrBuilder getVldDatOrBuilder(
        int index) {
      return vldDat_.get(index);
    }

    // repeated .fzdeepnet.Data tst_dat = 11;
    public static final int TST_DAT_FIELD_NUMBER = 11;
    private java.util.List<fzdeepnet.Setting.Data> tstDat_;
    /**
     * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
     */
    public java.util.List<fzdeepnet.Setting.Data> getTstDatList() {
      return tstDat_;
    }
    /**
     * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
     */
    public java.util.List<? extends fzdeepnet.Setting.DataOrBuilder> 
        getTstDatOrBuilderList() {
      return tstDat_;
    }
    /**
     * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
     */
    public int getTstDatCount() {
      return tstDat_.size();
    }
    /**
     * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
     */
    public fzdeepnet.Setting.Data getTstDat(int index) {
      return tstDat_.get(index);
    }
    /**
     * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
     */
    public fzdeepnet.Setting.DataOrBuilder getTstDatOrBuilder(
        int index) {
      return tstDat_.get(index);
    }

    private void initFields() {
      modelName_ = "";
      modelBase_ = "";
      appName_ = "";
      computation_ = fzdeepnet.Setting.Model.COMP.CPU;
      layer_ = java.util.Collections.emptyList();
      deeplayer_ = java.util.Collections.emptyList();
      genFtune_ = fzdeepnet.Setting.Trainer.getDefaultInstance();
      disFtune_ = fzdeepnet.Setting.Trainer.getDefaultInstance();
      trnDat_ = java.util.Collections.emptyList();
      vldDat_ = java.util.Collections.emptyList();
      tstDat_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasModelName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasModelBase()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getLayerCount(); i++) {
        if (!getLayer(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getDeeplayerCount(); i++) {
        if (!getDeeplayer(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasGenFtune()) {
        if (!getGenFtune().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasDisFtune()) {
        if (!getDisFtune().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getTrnDatCount(); i++) {
        if (!getTrnDat(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getVldDatCount(); i++) {
        if (!getVldDat(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getTstDatCount(); i++) {
        if (!getTstDat(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getModelNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getModelBaseBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getAppNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, computation_.getNumber());
      }
      for (int i = 0; i < layer_.size(); i++) {
        output.writeMessage(5, layer_.get(i));
      }
      for (int i = 0; i < deeplayer_.size(); i++) {
        output.writeMessage(6, deeplayer_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(7, genFtune_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(8, disFtune_);
      }
      for (int i = 0; i < trnDat_.size(); i++) {
        output.writeMessage(9, trnDat_.get(i));
      }
      for (int i = 0; i < vldDat_.size(); i++) {
        output.writeMessage(10, vldDat_.get(i));
      }
      for (int i = 0; i < tstDat_.size(); i++) {
        output.writeMessage(11, tstDat_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getModelNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getModelBaseBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getAppNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, computation_.getNumber());
      }
      for (int i = 0; i < layer_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, layer_.get(i));
      }
      for (int i = 0; i < deeplayer_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, deeplayer_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, genFtune_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, disFtune_);
      }
      for (int i = 0; i < trnDat_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, trnDat_.get(i));
      }
      for (int i = 0; i < vldDat_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, vldDat_.get(i));
      }
      for (int i = 0; i < tstDat_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, tstDat_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static fzdeepnet.Setting.Model parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fzdeepnet.Setting.Model parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fzdeepnet.Setting.Model parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fzdeepnet.Setting.Model parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fzdeepnet.Setting.Model parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static fzdeepnet.Setting.Model parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static fzdeepnet.Setting.Model parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static fzdeepnet.Setting.Model parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static fzdeepnet.Setting.Model parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static fzdeepnet.Setting.Model parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(fzdeepnet.Setting.Model prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code fzdeepnet.Model}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements fzdeepnet.Setting.ModelOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return fzdeepnet.Setting.internal_static_fzdeepnet_Model_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return fzdeepnet.Setting.internal_static_fzdeepnet_Model_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                fzdeepnet.Setting.Model.class, fzdeepnet.Setting.Model.Builder.class);
      }

      // Construct using fzdeepnet.Setting.Model.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLayerFieldBuilder();
          getDeeplayerFieldBuilder();
          getGenFtuneFieldBuilder();
          getDisFtuneFieldBuilder();
          getTrnDatFieldBuilder();
          getVldDatFieldBuilder();
          getTstDatFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        modelName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        modelBase_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        appName_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        computation_ = fzdeepnet.Setting.Model.COMP.CPU;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (layerBuilder_ == null) {
          layer_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          layerBuilder_.clear();
        }
        if (deeplayerBuilder_ == null) {
          deeplayer_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          deeplayerBuilder_.clear();
        }
        if (genFtuneBuilder_ == null) {
          genFtune_ = fzdeepnet.Setting.Trainer.getDefaultInstance();
        } else {
          genFtuneBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (disFtuneBuilder_ == null) {
          disFtune_ = fzdeepnet.Setting.Trainer.getDefaultInstance();
        } else {
          disFtuneBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (trnDatBuilder_ == null) {
          trnDat_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          trnDatBuilder_.clear();
        }
        if (vldDatBuilder_ == null) {
          vldDat_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          vldDatBuilder_.clear();
        }
        if (tstDatBuilder_ == null) {
          tstDat_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          tstDatBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return fzdeepnet.Setting.internal_static_fzdeepnet_Model_descriptor;
      }

      public fzdeepnet.Setting.Model getDefaultInstanceForType() {
        return fzdeepnet.Setting.Model.getDefaultInstance();
      }

      public fzdeepnet.Setting.Model build() {
        fzdeepnet.Setting.Model result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public fzdeepnet.Setting.Model buildPartial() {
        fzdeepnet.Setting.Model result = new fzdeepnet.Setting.Model(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.modelName_ = modelName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.modelBase_ = modelBase_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.appName_ = appName_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.computation_ = computation_;
        if (layerBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            layer_ = java.util.Collections.unmodifiableList(layer_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.layer_ = layer_;
        } else {
          result.layer_ = layerBuilder_.build();
        }
        if (deeplayerBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            deeplayer_ = java.util.Collections.unmodifiableList(deeplayer_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.deeplayer_ = deeplayer_;
        } else {
          result.deeplayer_ = deeplayerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        if (genFtuneBuilder_ == null) {
          result.genFtune_ = genFtune_;
        } else {
          result.genFtune_ = genFtuneBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        if (disFtuneBuilder_ == null) {
          result.disFtune_ = disFtune_;
        } else {
          result.disFtune_ = disFtuneBuilder_.build();
        }
        if (trnDatBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            trnDat_ = java.util.Collections.unmodifiableList(trnDat_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.trnDat_ = trnDat_;
        } else {
          result.trnDat_ = trnDatBuilder_.build();
        }
        if (vldDatBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            vldDat_ = java.util.Collections.unmodifiableList(vldDat_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.vldDat_ = vldDat_;
        } else {
          result.vldDat_ = vldDatBuilder_.build();
        }
        if (tstDatBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400)) {
            tstDat_ = java.util.Collections.unmodifiableList(tstDat_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.tstDat_ = tstDat_;
        } else {
          result.tstDat_ = tstDatBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof fzdeepnet.Setting.Model) {
          return mergeFrom((fzdeepnet.Setting.Model)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(fzdeepnet.Setting.Model other) {
        if (other == fzdeepnet.Setting.Model.getDefaultInstance()) return this;
        if (other.hasModelName()) {
          bitField0_ |= 0x00000001;
          modelName_ = other.modelName_;
          onChanged();
        }
        if (other.hasModelBase()) {
          bitField0_ |= 0x00000002;
          modelBase_ = other.modelBase_;
          onChanged();
        }
        if (other.hasAppName()) {
          bitField0_ |= 0x00000004;
          appName_ = other.appName_;
          onChanged();
        }
        if (other.hasComputation()) {
          setComputation(other.getComputation());
        }
        if (layerBuilder_ == null) {
          if (!other.layer_.isEmpty()) {
            if (layer_.isEmpty()) {
              layer_ = other.layer_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureLayerIsMutable();
              layer_.addAll(other.layer_);
            }
            onChanged();
          }
        } else {
          if (!other.layer_.isEmpty()) {
            if (layerBuilder_.isEmpty()) {
              layerBuilder_.dispose();
              layerBuilder_ = null;
              layer_ = other.layer_;
              bitField0_ = (bitField0_ & ~0x00000010);
              layerBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLayerFieldBuilder() : null;
            } else {
              layerBuilder_.addAllMessages(other.layer_);
            }
          }
        }
        if (deeplayerBuilder_ == null) {
          if (!other.deeplayer_.isEmpty()) {
            if (deeplayer_.isEmpty()) {
              deeplayer_ = other.deeplayer_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureDeeplayerIsMutable();
              deeplayer_.addAll(other.deeplayer_);
            }
            onChanged();
          }
        } else {
          if (!other.deeplayer_.isEmpty()) {
            if (deeplayerBuilder_.isEmpty()) {
              deeplayerBuilder_.dispose();
              deeplayerBuilder_ = null;
              deeplayer_ = other.deeplayer_;
              bitField0_ = (bitField0_ & ~0x00000020);
              deeplayerBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDeeplayerFieldBuilder() : null;
            } else {
              deeplayerBuilder_.addAllMessages(other.deeplayer_);
            }
          }
        }
        if (other.hasGenFtune()) {
          mergeGenFtune(other.getGenFtune());
        }
        if (other.hasDisFtune()) {
          mergeDisFtune(other.getDisFtune());
        }
        if (trnDatBuilder_ == null) {
          if (!other.trnDat_.isEmpty()) {
            if (trnDat_.isEmpty()) {
              trnDat_ = other.trnDat_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureTrnDatIsMutable();
              trnDat_.addAll(other.trnDat_);
            }
            onChanged();
          }
        } else {
          if (!other.trnDat_.isEmpty()) {
            if (trnDatBuilder_.isEmpty()) {
              trnDatBuilder_.dispose();
              trnDatBuilder_ = null;
              trnDat_ = other.trnDat_;
              bitField0_ = (bitField0_ & ~0x00000100);
              trnDatBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTrnDatFieldBuilder() : null;
            } else {
              trnDatBuilder_.addAllMessages(other.trnDat_);
            }
          }
        }
        if (vldDatBuilder_ == null) {
          if (!other.vldDat_.isEmpty()) {
            if (vldDat_.isEmpty()) {
              vldDat_ = other.vldDat_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureVldDatIsMutable();
              vldDat_.addAll(other.vldDat_);
            }
            onChanged();
          }
        } else {
          if (!other.vldDat_.isEmpty()) {
            if (vldDatBuilder_.isEmpty()) {
              vldDatBuilder_.dispose();
              vldDatBuilder_ = null;
              vldDat_ = other.vldDat_;
              bitField0_ = (bitField0_ & ~0x00000200);
              vldDatBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getVldDatFieldBuilder() : null;
            } else {
              vldDatBuilder_.addAllMessages(other.vldDat_);
            }
          }
        }
        if (tstDatBuilder_ == null) {
          if (!other.tstDat_.isEmpty()) {
            if (tstDat_.isEmpty()) {
              tstDat_ = other.tstDat_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureTstDatIsMutable();
              tstDat_.addAll(other.tstDat_);
            }
            onChanged();
          }
        } else {
          if (!other.tstDat_.isEmpty()) {
            if (tstDatBuilder_.isEmpty()) {
              tstDatBuilder_.dispose();
              tstDatBuilder_ = null;
              tstDat_ = other.tstDat_;
              bitField0_ = (bitField0_ & ~0x00000400);
              tstDatBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTstDatFieldBuilder() : null;
            } else {
              tstDatBuilder_.addAllMessages(other.tstDat_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasModelName()) {
          
          return false;
        }
        if (!hasModelBase()) {
          
          return false;
        }
        for (int i = 0; i < getLayerCount(); i++) {
          if (!getLayer(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getDeeplayerCount(); i++) {
          if (!getDeeplayer(i).isInitialized()) {
            
            return false;
          }
        }
        if (hasGenFtune()) {
          if (!getGenFtune().isInitialized()) {
            
            return false;
          }
        }
        if (hasDisFtune()) {
          if (!getDisFtune().isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getTrnDatCount(); i++) {
          if (!getTrnDat(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getVldDatCount(); i++) {
          if (!getVldDat(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getTstDatCount(); i++) {
          if (!getTstDat(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        fzdeepnet.Setting.Model parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (fzdeepnet.Setting.Model) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string model_name = 1;
      private java.lang.Object modelName_ = "";
      /**
       * <code>required string model_name = 1;</code>
       */
      public boolean hasModelName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string model_name = 1;</code>
       */
      public java.lang.String getModelName() {
        java.lang.Object ref = modelName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          modelName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string model_name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getModelNameBytes() {
        java.lang.Object ref = modelName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          modelName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string model_name = 1;</code>
       */
      public Builder setModelName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        modelName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string model_name = 1;</code>
       */
      public Builder clearModelName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        modelName_ = getDefaultInstance().getModelName();
        onChanged();
        return this;
      }
      /**
       * <code>required string model_name = 1;</code>
       */
      public Builder setModelNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        modelName_ = value;
        onChanged();
        return this;
      }

      // required string model_base = 2;
      private java.lang.Object modelBase_ = "";
      /**
       * <code>required string model_base = 2;</code>
       */
      public boolean hasModelBase() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string model_base = 2;</code>
       */
      public java.lang.String getModelBase() {
        java.lang.Object ref = modelBase_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          modelBase_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string model_base = 2;</code>
       */
      public com.google.protobuf.ByteString
          getModelBaseBytes() {
        java.lang.Object ref = modelBase_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          modelBase_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string model_base = 2;</code>
       */
      public Builder setModelBase(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        modelBase_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string model_base = 2;</code>
       */
      public Builder clearModelBase() {
        bitField0_ = (bitField0_ & ~0x00000002);
        modelBase_ = getDefaultInstance().getModelBase();
        onChanged();
        return this;
      }
      /**
       * <code>required string model_base = 2;</code>
       */
      public Builder setModelBaseBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        modelBase_ = value;
        onChanged();
        return this;
      }

      // optional string app_name = 3;
      private java.lang.Object appName_ = "";
      /**
       * <code>optional string app_name = 3;</code>
       */
      public boolean hasAppName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string app_name = 3;</code>
       */
      public java.lang.String getAppName() {
        java.lang.Object ref = appName_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          appName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string app_name = 3;</code>
       */
      public com.google.protobuf.ByteString
          getAppNameBytes() {
        java.lang.Object ref = appName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          appName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string app_name = 3;</code>
       */
      public Builder setAppName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        appName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string app_name = 3;</code>
       */
      public Builder clearAppName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        appName_ = getDefaultInstance().getAppName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string app_name = 3;</code>
       */
      public Builder setAppNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        appName_ = value;
        onChanged();
        return this;
      }

      // optional .fzdeepnet.Model.COMP computation = 4 [default = CPU];
      private fzdeepnet.Setting.Model.COMP computation_ = fzdeepnet.Setting.Model.COMP.CPU;
      /**
       * <code>optional .fzdeepnet.Model.COMP computation = 4 [default = CPU];</code>
       */
      public boolean hasComputation() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .fzdeepnet.Model.COMP computation = 4 [default = CPU];</code>
       */
      public fzdeepnet.Setting.Model.COMP getComputation() {
        return computation_;
      }
      /**
       * <code>optional .fzdeepnet.Model.COMP computation = 4 [default = CPU];</code>
       */
      public Builder setComputation(fzdeepnet.Setting.Model.COMP value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        computation_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Model.COMP computation = 4 [default = CPU];</code>
       */
      public Builder clearComputation() {
        bitField0_ = (bitField0_ & ~0x00000008);
        computation_ = fzdeepnet.Setting.Model.COMP.CPU;
        onChanged();
        return this;
      }

      // repeated .fzdeepnet.Layer layer = 5;
      private java.util.List<fzdeepnet.Setting.Layer> layer_ =
        java.util.Collections.emptyList();
      private void ensureLayerIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          layer_ = new java.util.ArrayList<fzdeepnet.Setting.Layer>(layer_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          fzdeepnet.Setting.Layer, fzdeepnet.Setting.Layer.Builder, fzdeepnet.Setting.LayerOrBuilder> layerBuilder_;

      /**
       * <code>repeated .fzdeepnet.Layer layer = 5;</code>
       */
      public java.util.List<fzdeepnet.Setting.Layer> getLayerList() {
        if (layerBuilder_ == null) {
          return java.util.Collections.unmodifiableList(layer_);
        } else {
          return layerBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .fzdeepnet.Layer layer = 5;</code>
       */
      public int getLayerCount() {
        if (layerBuilder_ == null) {
          return layer_.size();
        } else {
          return layerBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .fzdeepnet.Layer layer = 5;</code>
       */
      public fzdeepnet.Setting.Layer getLayer(int index) {
        if (layerBuilder_ == null) {
          return layer_.get(index);
        } else {
          return layerBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .fzdeepnet.Layer layer = 5;</code>
       */
      public Builder setLayer(
          int index, fzdeepnet.Setting.Layer value) {
        if (layerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLayerIsMutable();
          layer_.set(index, value);
          onChanged();
        } else {
          layerBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Layer layer = 5;</code>
       */
      public Builder setLayer(
          int index, fzdeepnet.Setting.Layer.Builder builderForValue) {
        if (layerBuilder_ == null) {
          ensureLayerIsMutable();
          layer_.set(index, builderForValue.build());
          onChanged();
        } else {
          layerBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Layer layer = 5;</code>
       */
      public Builder addLayer(fzdeepnet.Setting.Layer value) {
        if (layerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLayerIsMutable();
          layer_.add(value);
          onChanged();
        } else {
          layerBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Layer layer = 5;</code>
       */
      public Builder addLayer(
          int index, fzdeepnet.Setting.Layer value) {
        if (layerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLayerIsMutable();
          layer_.add(index, value);
          onChanged();
        } else {
          layerBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Layer layer = 5;</code>
       */
      public Builder addLayer(
          fzdeepnet.Setting.Layer.Builder builderForValue) {
        if (layerBuilder_ == null) {
          ensureLayerIsMutable();
          layer_.add(builderForValue.build());
          onChanged();
        } else {
          layerBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Layer layer = 5;</code>
       */
      public Builder addLayer(
          int index, fzdeepnet.Setting.Layer.Builder builderForValue) {
        if (layerBuilder_ == null) {
          ensureLayerIsMutable();
          layer_.add(index, builderForValue.build());
          onChanged();
        } else {
          layerBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Layer layer = 5;</code>
       */
      public Builder addAllLayer(
          java.lang.Iterable<? extends fzdeepnet.Setting.Layer> values) {
        if (layerBuilder_ == null) {
          ensureLayerIsMutable();
          super.addAll(values, layer_);
          onChanged();
        } else {
          layerBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Layer layer = 5;</code>
       */
      public Builder clearLayer() {
        if (layerBuilder_ == null) {
          layer_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          layerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Layer layer = 5;</code>
       */
      public Builder removeLayer(int index) {
        if (layerBuilder_ == null) {
          ensureLayerIsMutable();
          layer_.remove(index);
          onChanged();
        } else {
          layerBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Layer layer = 5;</code>
       */
      public fzdeepnet.Setting.Layer.Builder getLayerBuilder(
          int index) {
        return getLayerFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .fzdeepnet.Layer layer = 5;</code>
       */
      public fzdeepnet.Setting.LayerOrBuilder getLayerOrBuilder(
          int index) {
        if (layerBuilder_ == null) {
          return layer_.get(index);  } else {
          return layerBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .fzdeepnet.Layer layer = 5;</code>
       */
      public java.util.List<? extends fzdeepnet.Setting.LayerOrBuilder> 
           getLayerOrBuilderList() {
        if (layerBuilder_ != null) {
          return layerBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(layer_);
        }
      }
      /**
       * <code>repeated .fzdeepnet.Layer layer = 5;</code>
       */
      public fzdeepnet.Setting.Layer.Builder addLayerBuilder() {
        return getLayerFieldBuilder().addBuilder(
            fzdeepnet.Setting.Layer.getDefaultInstance());
      }
      /**
       * <code>repeated .fzdeepnet.Layer layer = 5;</code>
       */
      public fzdeepnet.Setting.Layer.Builder addLayerBuilder(
          int index) {
        return getLayerFieldBuilder().addBuilder(
            index, fzdeepnet.Setting.Layer.getDefaultInstance());
      }
      /**
       * <code>repeated .fzdeepnet.Layer layer = 5;</code>
       */
      public java.util.List<fzdeepnet.Setting.Layer.Builder> 
           getLayerBuilderList() {
        return getLayerFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          fzdeepnet.Setting.Layer, fzdeepnet.Setting.Layer.Builder, fzdeepnet.Setting.LayerOrBuilder> 
          getLayerFieldBuilder() {
        if (layerBuilder_ == null) {
          layerBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              fzdeepnet.Setting.Layer, fzdeepnet.Setting.Layer.Builder, fzdeepnet.Setting.LayerOrBuilder>(
                  layer_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          layer_ = null;
        }
        return layerBuilder_;
      }

      // repeated .fzdeepnet.DeepLayer deeplayer = 6;
      private java.util.List<fzdeepnet.Setting.DeepLayer> deeplayer_ =
        java.util.Collections.emptyList();
      private void ensureDeeplayerIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          deeplayer_ = new java.util.ArrayList<fzdeepnet.Setting.DeepLayer>(deeplayer_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          fzdeepnet.Setting.DeepLayer, fzdeepnet.Setting.DeepLayer.Builder, fzdeepnet.Setting.DeepLayerOrBuilder> deeplayerBuilder_;

      /**
       * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
       */
      public java.util.List<fzdeepnet.Setting.DeepLayer> getDeeplayerList() {
        if (deeplayerBuilder_ == null) {
          return java.util.Collections.unmodifiableList(deeplayer_);
        } else {
          return deeplayerBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
       */
      public int getDeeplayerCount() {
        if (deeplayerBuilder_ == null) {
          return deeplayer_.size();
        } else {
          return deeplayerBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
       */
      public fzdeepnet.Setting.DeepLayer getDeeplayer(int index) {
        if (deeplayerBuilder_ == null) {
          return deeplayer_.get(index);
        } else {
          return deeplayerBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
       */
      public Builder setDeeplayer(
          int index, fzdeepnet.Setting.DeepLayer value) {
        if (deeplayerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDeeplayerIsMutable();
          deeplayer_.set(index, value);
          onChanged();
        } else {
          deeplayerBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
       */
      public Builder setDeeplayer(
          int index, fzdeepnet.Setting.DeepLayer.Builder builderForValue) {
        if (deeplayerBuilder_ == null) {
          ensureDeeplayerIsMutable();
          deeplayer_.set(index, builderForValue.build());
          onChanged();
        } else {
          deeplayerBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
       */
      public Builder addDeeplayer(fzdeepnet.Setting.DeepLayer value) {
        if (deeplayerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDeeplayerIsMutable();
          deeplayer_.add(value);
          onChanged();
        } else {
          deeplayerBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
       */
      public Builder addDeeplayer(
          int index, fzdeepnet.Setting.DeepLayer value) {
        if (deeplayerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDeeplayerIsMutable();
          deeplayer_.add(index, value);
          onChanged();
        } else {
          deeplayerBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
       */
      public Builder addDeeplayer(
          fzdeepnet.Setting.DeepLayer.Builder builderForValue) {
        if (deeplayerBuilder_ == null) {
          ensureDeeplayerIsMutable();
          deeplayer_.add(builderForValue.build());
          onChanged();
        } else {
          deeplayerBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
       */
      public Builder addDeeplayer(
          int index, fzdeepnet.Setting.DeepLayer.Builder builderForValue) {
        if (deeplayerBuilder_ == null) {
          ensureDeeplayerIsMutable();
          deeplayer_.add(index, builderForValue.build());
          onChanged();
        } else {
          deeplayerBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
       */
      public Builder addAllDeeplayer(
          java.lang.Iterable<? extends fzdeepnet.Setting.DeepLayer> values) {
        if (deeplayerBuilder_ == null) {
          ensureDeeplayerIsMutable();
          super.addAll(values, deeplayer_);
          onChanged();
        } else {
          deeplayerBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
       */
      public Builder clearDeeplayer() {
        if (deeplayerBuilder_ == null) {
          deeplayer_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          deeplayerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
       */
      public Builder removeDeeplayer(int index) {
        if (deeplayerBuilder_ == null) {
          ensureDeeplayerIsMutable();
          deeplayer_.remove(index);
          onChanged();
        } else {
          deeplayerBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
       */
      public fzdeepnet.Setting.DeepLayer.Builder getDeeplayerBuilder(
          int index) {
        return getDeeplayerFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
       */
      public fzdeepnet.Setting.DeepLayerOrBuilder getDeeplayerOrBuilder(
          int index) {
        if (deeplayerBuilder_ == null) {
          return deeplayer_.get(index);  } else {
          return deeplayerBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
       */
      public java.util.List<? extends fzdeepnet.Setting.DeepLayerOrBuilder> 
           getDeeplayerOrBuilderList() {
        if (deeplayerBuilder_ != null) {
          return deeplayerBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(deeplayer_);
        }
      }
      /**
       * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
       */
      public fzdeepnet.Setting.DeepLayer.Builder addDeeplayerBuilder() {
        return getDeeplayerFieldBuilder().addBuilder(
            fzdeepnet.Setting.DeepLayer.getDefaultInstance());
      }
      /**
       * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
       */
      public fzdeepnet.Setting.DeepLayer.Builder addDeeplayerBuilder(
          int index) {
        return getDeeplayerFieldBuilder().addBuilder(
            index, fzdeepnet.Setting.DeepLayer.getDefaultInstance());
      }
      /**
       * <code>repeated .fzdeepnet.DeepLayer deeplayer = 6;</code>
       */
      public java.util.List<fzdeepnet.Setting.DeepLayer.Builder> 
           getDeeplayerBuilderList() {
        return getDeeplayerFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          fzdeepnet.Setting.DeepLayer, fzdeepnet.Setting.DeepLayer.Builder, fzdeepnet.Setting.DeepLayerOrBuilder> 
          getDeeplayerFieldBuilder() {
        if (deeplayerBuilder_ == null) {
          deeplayerBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              fzdeepnet.Setting.DeepLayer, fzdeepnet.Setting.DeepLayer.Builder, fzdeepnet.Setting.DeepLayerOrBuilder>(
                  deeplayer_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          deeplayer_ = null;
        }
        return deeplayerBuilder_;
      }

      // optional .fzdeepnet.Trainer gen_ftune = 7;
      private fzdeepnet.Setting.Trainer genFtune_ = fzdeepnet.Setting.Trainer.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          fzdeepnet.Setting.Trainer, fzdeepnet.Setting.Trainer.Builder, fzdeepnet.Setting.TrainerOrBuilder> genFtuneBuilder_;
      /**
       * <code>optional .fzdeepnet.Trainer gen_ftune = 7;</code>
       */
      public boolean hasGenFtune() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .fzdeepnet.Trainer gen_ftune = 7;</code>
       */
      public fzdeepnet.Setting.Trainer getGenFtune() {
        if (genFtuneBuilder_ == null) {
          return genFtune_;
        } else {
          return genFtuneBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .fzdeepnet.Trainer gen_ftune = 7;</code>
       */
      public Builder setGenFtune(fzdeepnet.Setting.Trainer value) {
        if (genFtuneBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          genFtune_ = value;
          onChanged();
        } else {
          genFtuneBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer gen_ftune = 7;</code>
       */
      public Builder setGenFtune(
          fzdeepnet.Setting.Trainer.Builder builderForValue) {
        if (genFtuneBuilder_ == null) {
          genFtune_ = builderForValue.build();
          onChanged();
        } else {
          genFtuneBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer gen_ftune = 7;</code>
       */
      public Builder mergeGenFtune(fzdeepnet.Setting.Trainer value) {
        if (genFtuneBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              genFtune_ != fzdeepnet.Setting.Trainer.getDefaultInstance()) {
            genFtune_ =
              fzdeepnet.Setting.Trainer.newBuilder(genFtune_).mergeFrom(value).buildPartial();
          } else {
            genFtune_ = value;
          }
          onChanged();
        } else {
          genFtuneBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer gen_ftune = 7;</code>
       */
      public Builder clearGenFtune() {
        if (genFtuneBuilder_ == null) {
          genFtune_ = fzdeepnet.Setting.Trainer.getDefaultInstance();
          onChanged();
        } else {
          genFtuneBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer gen_ftune = 7;</code>
       */
      public fzdeepnet.Setting.Trainer.Builder getGenFtuneBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getGenFtuneFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .fzdeepnet.Trainer gen_ftune = 7;</code>
       */
      public fzdeepnet.Setting.TrainerOrBuilder getGenFtuneOrBuilder() {
        if (genFtuneBuilder_ != null) {
          return genFtuneBuilder_.getMessageOrBuilder();
        } else {
          return genFtune_;
        }
      }
      /**
       * <code>optional .fzdeepnet.Trainer gen_ftune = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          fzdeepnet.Setting.Trainer, fzdeepnet.Setting.Trainer.Builder, fzdeepnet.Setting.TrainerOrBuilder> 
          getGenFtuneFieldBuilder() {
        if (genFtuneBuilder_ == null) {
          genFtuneBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              fzdeepnet.Setting.Trainer, fzdeepnet.Setting.Trainer.Builder, fzdeepnet.Setting.TrainerOrBuilder>(
                  genFtune_,
                  getParentForChildren(),
                  isClean());
          genFtune_ = null;
        }
        return genFtuneBuilder_;
      }

      // optional .fzdeepnet.Trainer dis_ftune = 8;
      private fzdeepnet.Setting.Trainer disFtune_ = fzdeepnet.Setting.Trainer.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          fzdeepnet.Setting.Trainer, fzdeepnet.Setting.Trainer.Builder, fzdeepnet.Setting.TrainerOrBuilder> disFtuneBuilder_;
      /**
       * <code>optional .fzdeepnet.Trainer dis_ftune = 8;</code>
       */
      public boolean hasDisFtune() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .fzdeepnet.Trainer dis_ftune = 8;</code>
       */
      public fzdeepnet.Setting.Trainer getDisFtune() {
        if (disFtuneBuilder_ == null) {
          return disFtune_;
        } else {
          return disFtuneBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .fzdeepnet.Trainer dis_ftune = 8;</code>
       */
      public Builder setDisFtune(fzdeepnet.Setting.Trainer value) {
        if (disFtuneBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          disFtune_ = value;
          onChanged();
        } else {
          disFtuneBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer dis_ftune = 8;</code>
       */
      public Builder setDisFtune(
          fzdeepnet.Setting.Trainer.Builder builderForValue) {
        if (disFtuneBuilder_ == null) {
          disFtune_ = builderForValue.build();
          onChanged();
        } else {
          disFtuneBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer dis_ftune = 8;</code>
       */
      public Builder mergeDisFtune(fzdeepnet.Setting.Trainer value) {
        if (disFtuneBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              disFtune_ != fzdeepnet.Setting.Trainer.getDefaultInstance()) {
            disFtune_ =
              fzdeepnet.Setting.Trainer.newBuilder(disFtune_).mergeFrom(value).buildPartial();
          } else {
            disFtune_ = value;
          }
          onChanged();
        } else {
          disFtuneBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer dis_ftune = 8;</code>
       */
      public Builder clearDisFtune() {
        if (disFtuneBuilder_ == null) {
          disFtune_ = fzdeepnet.Setting.Trainer.getDefaultInstance();
          onChanged();
        } else {
          disFtuneBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .fzdeepnet.Trainer dis_ftune = 8;</code>
       */
      public fzdeepnet.Setting.Trainer.Builder getDisFtuneBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getDisFtuneFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .fzdeepnet.Trainer dis_ftune = 8;</code>
       */
      public fzdeepnet.Setting.TrainerOrBuilder getDisFtuneOrBuilder() {
        if (disFtuneBuilder_ != null) {
          return disFtuneBuilder_.getMessageOrBuilder();
        } else {
          return disFtune_;
        }
      }
      /**
       * <code>optional .fzdeepnet.Trainer dis_ftune = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          fzdeepnet.Setting.Trainer, fzdeepnet.Setting.Trainer.Builder, fzdeepnet.Setting.TrainerOrBuilder> 
          getDisFtuneFieldBuilder() {
        if (disFtuneBuilder_ == null) {
          disFtuneBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              fzdeepnet.Setting.Trainer, fzdeepnet.Setting.Trainer.Builder, fzdeepnet.Setting.TrainerOrBuilder>(
                  disFtune_,
                  getParentForChildren(),
                  isClean());
          disFtune_ = null;
        }
        return disFtuneBuilder_;
      }

      // repeated .fzdeepnet.Data trn_dat = 9;
      private java.util.List<fzdeepnet.Setting.Data> trnDat_ =
        java.util.Collections.emptyList();
      private void ensureTrnDatIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          trnDat_ = new java.util.ArrayList<fzdeepnet.Setting.Data>(trnDat_);
          bitField0_ |= 0x00000100;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          fzdeepnet.Setting.Data, fzdeepnet.Setting.Data.Builder, fzdeepnet.Setting.DataOrBuilder> trnDatBuilder_;

      /**
       * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
       */
      public java.util.List<fzdeepnet.Setting.Data> getTrnDatList() {
        if (trnDatBuilder_ == null) {
          return java.util.Collections.unmodifiableList(trnDat_);
        } else {
          return trnDatBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
       */
      public int getTrnDatCount() {
        if (trnDatBuilder_ == null) {
          return trnDat_.size();
        } else {
          return trnDatBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
       */
      public fzdeepnet.Setting.Data getTrnDat(int index) {
        if (trnDatBuilder_ == null) {
          return trnDat_.get(index);
        } else {
          return trnDatBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
       */
      public Builder setTrnDat(
          int index, fzdeepnet.Setting.Data value) {
        if (trnDatBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTrnDatIsMutable();
          trnDat_.set(index, value);
          onChanged();
        } else {
          trnDatBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
       */
      public Builder setTrnDat(
          int index, fzdeepnet.Setting.Data.Builder builderForValue) {
        if (trnDatBuilder_ == null) {
          ensureTrnDatIsMutable();
          trnDat_.set(index, builderForValue.build());
          onChanged();
        } else {
          trnDatBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
       */
      public Builder addTrnDat(fzdeepnet.Setting.Data value) {
        if (trnDatBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTrnDatIsMutable();
          trnDat_.add(value);
          onChanged();
        } else {
          trnDatBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
       */
      public Builder addTrnDat(
          int index, fzdeepnet.Setting.Data value) {
        if (trnDatBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTrnDatIsMutable();
          trnDat_.add(index, value);
          onChanged();
        } else {
          trnDatBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
       */
      public Builder addTrnDat(
          fzdeepnet.Setting.Data.Builder builderForValue) {
        if (trnDatBuilder_ == null) {
          ensureTrnDatIsMutable();
          trnDat_.add(builderForValue.build());
          onChanged();
        } else {
          trnDatBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
       */
      public Builder addTrnDat(
          int index, fzdeepnet.Setting.Data.Builder builderForValue) {
        if (trnDatBuilder_ == null) {
          ensureTrnDatIsMutable();
          trnDat_.add(index, builderForValue.build());
          onChanged();
        } else {
          trnDatBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
       */
      public Builder addAllTrnDat(
          java.lang.Iterable<? extends fzdeepnet.Setting.Data> values) {
        if (trnDatBuilder_ == null) {
          ensureTrnDatIsMutable();
          super.addAll(values, trnDat_);
          onChanged();
        } else {
          trnDatBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
       */
      public Builder clearTrnDat() {
        if (trnDatBuilder_ == null) {
          trnDat_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          trnDatBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
       */
      public Builder removeTrnDat(int index) {
        if (trnDatBuilder_ == null) {
          ensureTrnDatIsMutable();
          trnDat_.remove(index);
          onChanged();
        } else {
          trnDatBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
       */
      public fzdeepnet.Setting.Data.Builder getTrnDatBuilder(
          int index) {
        return getTrnDatFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
       */
      public fzdeepnet.Setting.DataOrBuilder getTrnDatOrBuilder(
          int index) {
        if (trnDatBuilder_ == null) {
          return trnDat_.get(index);  } else {
          return trnDatBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
       */
      public java.util.List<? extends fzdeepnet.Setting.DataOrBuilder> 
           getTrnDatOrBuilderList() {
        if (trnDatBuilder_ != null) {
          return trnDatBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(trnDat_);
        }
      }
      /**
       * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
       */
      public fzdeepnet.Setting.Data.Builder addTrnDatBuilder() {
        return getTrnDatFieldBuilder().addBuilder(
            fzdeepnet.Setting.Data.getDefaultInstance());
      }
      /**
       * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
       */
      public fzdeepnet.Setting.Data.Builder addTrnDatBuilder(
          int index) {
        return getTrnDatFieldBuilder().addBuilder(
            index, fzdeepnet.Setting.Data.getDefaultInstance());
      }
      /**
       * <code>repeated .fzdeepnet.Data trn_dat = 9;</code>
       */
      public java.util.List<fzdeepnet.Setting.Data.Builder> 
           getTrnDatBuilderList() {
        return getTrnDatFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          fzdeepnet.Setting.Data, fzdeepnet.Setting.Data.Builder, fzdeepnet.Setting.DataOrBuilder> 
          getTrnDatFieldBuilder() {
        if (trnDatBuilder_ == null) {
          trnDatBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              fzdeepnet.Setting.Data, fzdeepnet.Setting.Data.Builder, fzdeepnet.Setting.DataOrBuilder>(
                  trnDat_,
                  ((bitField0_ & 0x00000100) == 0x00000100),
                  getParentForChildren(),
                  isClean());
          trnDat_ = null;
        }
        return trnDatBuilder_;
      }

      // repeated .fzdeepnet.Data vld_dat = 10;
      private java.util.List<fzdeepnet.Setting.Data> vldDat_ =
        java.util.Collections.emptyList();
      private void ensureVldDatIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          vldDat_ = new java.util.ArrayList<fzdeepnet.Setting.Data>(vldDat_);
          bitField0_ |= 0x00000200;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          fzdeepnet.Setting.Data, fzdeepnet.Setting.Data.Builder, fzdeepnet.Setting.DataOrBuilder> vldDatBuilder_;

      /**
       * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
       */
      public java.util.List<fzdeepnet.Setting.Data> getVldDatList() {
        if (vldDatBuilder_ == null) {
          return java.util.Collections.unmodifiableList(vldDat_);
        } else {
          return vldDatBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
       */
      public int getVldDatCount() {
        if (vldDatBuilder_ == null) {
          return vldDat_.size();
        } else {
          return vldDatBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
       */
      public fzdeepnet.Setting.Data getVldDat(int index) {
        if (vldDatBuilder_ == null) {
          return vldDat_.get(index);
        } else {
          return vldDatBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
       */
      public Builder setVldDat(
          int index, fzdeepnet.Setting.Data value) {
        if (vldDatBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureVldDatIsMutable();
          vldDat_.set(index, value);
          onChanged();
        } else {
          vldDatBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
       */
      public Builder setVldDat(
          int index, fzdeepnet.Setting.Data.Builder builderForValue) {
        if (vldDatBuilder_ == null) {
          ensureVldDatIsMutable();
          vldDat_.set(index, builderForValue.build());
          onChanged();
        } else {
          vldDatBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
       */
      public Builder addVldDat(fzdeepnet.Setting.Data value) {
        if (vldDatBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureVldDatIsMutable();
          vldDat_.add(value);
          onChanged();
        } else {
          vldDatBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
       */
      public Builder addVldDat(
          int index, fzdeepnet.Setting.Data value) {
        if (vldDatBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureVldDatIsMutable();
          vldDat_.add(index, value);
          onChanged();
        } else {
          vldDatBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
       */
      public Builder addVldDat(
          fzdeepnet.Setting.Data.Builder builderForValue) {
        if (vldDatBuilder_ == null) {
          ensureVldDatIsMutable();
          vldDat_.add(builderForValue.build());
          onChanged();
        } else {
          vldDatBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
       */
      public Builder addVldDat(
          int index, fzdeepnet.Setting.Data.Builder builderForValue) {
        if (vldDatBuilder_ == null) {
          ensureVldDatIsMutable();
          vldDat_.add(index, builderForValue.build());
          onChanged();
        } else {
          vldDatBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
       */
      public Builder addAllVldDat(
          java.lang.Iterable<? extends fzdeepnet.Setting.Data> values) {
        if (vldDatBuilder_ == null) {
          ensureVldDatIsMutable();
          super.addAll(values, vldDat_);
          onChanged();
        } else {
          vldDatBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
       */
      public Builder clearVldDat() {
        if (vldDatBuilder_ == null) {
          vldDat_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          vldDatBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
       */
      public Builder removeVldDat(int index) {
        if (vldDatBuilder_ == null) {
          ensureVldDatIsMutable();
          vldDat_.remove(index);
          onChanged();
        } else {
          vldDatBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
       */
      public fzdeepnet.Setting.Data.Builder getVldDatBuilder(
          int index) {
        return getVldDatFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
       */
      public fzdeepnet.Setting.DataOrBuilder getVldDatOrBuilder(
          int index) {
        if (vldDatBuilder_ == null) {
          return vldDat_.get(index);  } else {
          return vldDatBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
       */
      public java.util.List<? extends fzdeepnet.Setting.DataOrBuilder> 
           getVldDatOrBuilderList() {
        if (vldDatBuilder_ != null) {
          return vldDatBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(vldDat_);
        }
      }
      /**
       * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
       */
      public fzdeepnet.Setting.Data.Builder addVldDatBuilder() {
        return getVldDatFieldBuilder().addBuilder(
            fzdeepnet.Setting.Data.getDefaultInstance());
      }
      /**
       * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
       */
      public fzdeepnet.Setting.Data.Builder addVldDatBuilder(
          int index) {
        return getVldDatFieldBuilder().addBuilder(
            index, fzdeepnet.Setting.Data.getDefaultInstance());
      }
      /**
       * <code>repeated .fzdeepnet.Data vld_dat = 10;</code>
       */
      public java.util.List<fzdeepnet.Setting.Data.Builder> 
           getVldDatBuilderList() {
        return getVldDatFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          fzdeepnet.Setting.Data, fzdeepnet.Setting.Data.Builder, fzdeepnet.Setting.DataOrBuilder> 
          getVldDatFieldBuilder() {
        if (vldDatBuilder_ == null) {
          vldDatBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              fzdeepnet.Setting.Data, fzdeepnet.Setting.Data.Builder, fzdeepnet.Setting.DataOrBuilder>(
                  vldDat_,
                  ((bitField0_ & 0x00000200) == 0x00000200),
                  getParentForChildren(),
                  isClean());
          vldDat_ = null;
        }
        return vldDatBuilder_;
      }

      // repeated .fzdeepnet.Data tst_dat = 11;
      private java.util.List<fzdeepnet.Setting.Data> tstDat_ =
        java.util.Collections.emptyList();
      private void ensureTstDatIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          tstDat_ = new java.util.ArrayList<fzdeepnet.Setting.Data>(tstDat_);
          bitField0_ |= 0x00000400;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          fzdeepnet.Setting.Data, fzdeepnet.Setting.Data.Builder, fzdeepnet.Setting.DataOrBuilder> tstDatBuilder_;

      /**
       * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
       */
      public java.util.List<fzdeepnet.Setting.Data> getTstDatList() {
        if (tstDatBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tstDat_);
        } else {
          return tstDatBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
       */
      public int getTstDatCount() {
        if (tstDatBuilder_ == null) {
          return tstDat_.size();
        } else {
          return tstDatBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
       */
      public fzdeepnet.Setting.Data getTstDat(int index) {
        if (tstDatBuilder_ == null) {
          return tstDat_.get(index);
        } else {
          return tstDatBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
       */
      public Builder setTstDat(
          int index, fzdeepnet.Setting.Data value) {
        if (tstDatBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTstDatIsMutable();
          tstDat_.set(index, value);
          onChanged();
        } else {
          tstDatBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
       */
      public Builder setTstDat(
          int index, fzdeepnet.Setting.Data.Builder builderForValue) {
        if (tstDatBuilder_ == null) {
          ensureTstDatIsMutable();
          tstDat_.set(index, builderForValue.build());
          onChanged();
        } else {
          tstDatBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
       */
      public Builder addTstDat(fzdeepnet.Setting.Data value) {
        if (tstDatBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTstDatIsMutable();
          tstDat_.add(value);
          onChanged();
        } else {
          tstDatBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
       */
      public Builder addTstDat(
          int index, fzdeepnet.Setting.Data value) {
        if (tstDatBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTstDatIsMutable();
          tstDat_.add(index, value);
          onChanged();
        } else {
          tstDatBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
       */
      public Builder addTstDat(
          fzdeepnet.Setting.Data.Builder builderForValue) {
        if (tstDatBuilder_ == null) {
          ensureTstDatIsMutable();
          tstDat_.add(builderForValue.build());
          onChanged();
        } else {
          tstDatBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
       */
      public Builder addTstDat(
          int index, fzdeepnet.Setting.Data.Builder builderForValue) {
        if (tstDatBuilder_ == null) {
          ensureTstDatIsMutable();
          tstDat_.add(index, builderForValue.build());
          onChanged();
        } else {
          tstDatBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
       */
      public Builder addAllTstDat(
          java.lang.Iterable<? extends fzdeepnet.Setting.Data> values) {
        if (tstDatBuilder_ == null) {
          ensureTstDatIsMutable();
          super.addAll(values, tstDat_);
          onChanged();
        } else {
          tstDatBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
       */
      public Builder clearTstDat() {
        if (tstDatBuilder_ == null) {
          tstDat_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          tstDatBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
       */
      public Builder removeTstDat(int index) {
        if (tstDatBuilder_ == null) {
          ensureTstDatIsMutable();
          tstDat_.remove(index);
          onChanged();
        } else {
          tstDatBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
       */
      public fzdeepnet.Setting.Data.Builder getTstDatBuilder(
          int index) {
        return getTstDatFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
       */
      public fzdeepnet.Setting.DataOrBuilder getTstDatOrBuilder(
          int index) {
        if (tstDatBuilder_ == null) {
          return tstDat_.get(index);  } else {
          return tstDatBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
       */
      public java.util.List<? extends fzdeepnet.Setting.DataOrBuilder> 
           getTstDatOrBuilderList() {
        if (tstDatBuilder_ != null) {
          return tstDatBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tstDat_);
        }
      }
      /**
       * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
       */
      public fzdeepnet.Setting.Data.Builder addTstDatBuilder() {
        return getTstDatFieldBuilder().addBuilder(
            fzdeepnet.Setting.Data.getDefaultInstance());
      }
      /**
       * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
       */
      public fzdeepnet.Setting.Data.Builder addTstDatBuilder(
          int index) {
        return getTstDatFieldBuilder().addBuilder(
            index, fzdeepnet.Setting.Data.getDefaultInstance());
      }
      /**
       * <code>repeated .fzdeepnet.Data tst_dat = 11;</code>
       */
      public java.util.List<fzdeepnet.Setting.Data.Builder> 
           getTstDatBuilderList() {
        return getTstDatFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          fzdeepnet.Setting.Data, fzdeepnet.Setting.Data.Builder, fzdeepnet.Setting.DataOrBuilder> 
          getTstDatFieldBuilder() {
        if (tstDatBuilder_ == null) {
          tstDatBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              fzdeepnet.Setting.Data, fzdeepnet.Setting.Data.Builder, fzdeepnet.Setting.DataOrBuilder>(
                  tstDat_,
                  ((bitField0_ & 0x00000400) == 0x00000400),
                  getParentForChildren(),
                  isClean());
          tstDat_ = null;
        }
        return tstDatBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:fzdeepnet.Model)
    }

    static {
      defaultInstance = new Model(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:fzdeepnet.Model)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_fzdeepnet_Layer_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_fzdeepnet_Layer_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_fzdeepnet_Dependence_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_fzdeepnet_Dependence_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_fzdeepnet_DeepLayer_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_fzdeepnet_DeepLayer_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_fzdeepnet_Trainer_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_fzdeepnet_Trainer_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_fzdeepnet_Data_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_fzdeepnet_Data_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_fzdeepnet_Model_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_fzdeepnet_Model_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rsetting.proto\022\tfzdeepnet\"\201\003\n\005Layer\022\013\n\003" +
      "lid\030\001 \002(\t\022+\n\004type\030\002 \001(\0162\026.fzdeepnet.Laye" +
      "r.UType:\005INTER\022\022\n\ndimensions\030\003 \002(\005\022\n\n\002dx" +
      "\030\004 \003(\005\022-\n\004unit\030\005 \002(\0162\025.fzdeepnet.Layer.U" +
      "nit:\010BINOMIAL\022\021\n\tthreshold\030\006 \001(\005\022%\n\006depe" +
      "nd\030\007 \003(\0132\025.fzdeepnet.Dependence\"(\n\005UType" +
      "\022\t\n\005INPUT\020\000\022\t\n\005INTER\020\001\022\t\n\005LABEL\020\002\"\212\001\n\004Un" +
      "it\022\n\n\006LINEAR\020\000\022\n\n\006LOGSIG\020\001\022\014\n\010BINOMIAL\020\002" +
      "\022\014\n\010GAUSSIAN\020\003\022\n\n\006TANSIG\020\004\022\010\n\004RELU\020\005\022\t\n\005" +
      "RELUS\020\006\022\013\n\007SOFTMAX\020\007\022\016\n\nREPSOFTMAX\020\010\022\007\n\003",
      "SIN\020\t\022\007\n\003COS\020\n\"\237\001\n\nDependence\022\020\n\010layer_i" +
      "d\030\001 \002(\t\022;\n\tdirection\030\002 \001(\0162\037.fzdeepnet.D" +
      "ependence.Direction:\007FORWARD\022\032\n\013convolut" +
      "ion\030\003 \001(\010:\005false\"&\n\tDirection\022\013\n\007FORWARD" +
      "\020\000\022\014\n\010BIDIRECT\020\001\"\233\002\n\tDeepLayer\022\017\n\007vis_li" +
      "d\030\001 \002(\t\022\017\n\007hid_lid\030\002 \002(\t\022\r\n\005order\030\003 \002(\005\022" +
      "&\n\npretrainer\030\004 \001(\0132\022.fzdeepnet.Trainer\022" +
      "\031\n\013weight_seed\030\005 \001(\002:\0040.01\022\025\n\nvbias_seed" +
      "\030\006 \001(\002:\0010\022\025\n\nhbias_seed\030\007 \001(\002:\0010\022>\n\tinfe" +
      "rence\030\010 \001(\0162\036.fzdeepnet.DeepLayer.INFERE",
      "NCE:\013PROPAGATION\",\n\tINFERENCE\022\017\n\013PROPAGA" +
      "TION\020\000\022\016\n\nRECONSTRUC\020\001\"\240\r\n\007Trainer\022\016\n\006ep" +
      "ochs\030\001 \002(\005\022\022\n\007batches\030\002 \001(\005:\0010\022\022\n\nbatch_" +
      "size\030\003 \002(\005\022\034\n\rlearning_rate\030\004 \001(\002:\0050.001" +
      "\022?\n\023learning_rate_decay\030\005 \001(\0162\030.fzdeepne" +
      "t.Trainer.Decay:\010NO_DECAY\022&\n\031learning_ra" +
      "te_decay_param\030\006 \001(\002:\0030.1\022\"\n\023learning_ra" +
      "te_final\030\007 \001(\002:\0050.001\022\033\n\020initial_momentu" +
      "m\030\010 \001(\002:\0010\022:\n\016momentum_decay\030\t \001(\0162\030.fzd" +
      "eepnet.Trainer.Decay:\010NO_DECAY\022!\n\024moment",
      "um_decay_param\030\n \001(\002:\0030.1\022\031\n\016final_momen" +
      "tum\030\013 \001(\002:\0010\022,\n\004type\030\014 \001(\0162\030.fzdeepnet.T" +
      "rainer.TType:\004NONE\0224\n\trbm_train\030\r \001(\0162\032." +
      "fzdeepnet.Trainer.RBMBASE:\005NORBM\022\024\n\tgibb" +
      "s_num\030\016 \001(\005:\0011\0221\n\010ae_train\030\017 \001(\0162\031.fzdee" +
      "pnet.Trainer.AEBASE:\004NOAE\0224\n\tbam_train\030\020" +
      " \001(\0162\032.fzdeepnet.Trainer.BAMBASE:\005NOBAM\022" +
      "\033\n\020pseudo_gibbs_num\030\021 \001(\005:\0010\0224\n\tdbn_trai" +
      "n\030\022 \001(\0162\032.fzdeepnet.Trainer.DBNBASE:\005NOD" +
      "BN\0224\n\tdbm_train\030\023 \001(\0162\032.fzdeepnet.Traine",
      "r.DBMBASE:\005NODBM\0227\n\ndbam_train\030\024 \001(\0162\033.f" +
      "zdeepnet.Trainer.DBAMBASE:\006NODBAM\022+\n\010nn_" +
      "train\030\025 \001(\0162\031.fzdeepnet.Trainer.NNBASE\022," +
      "\n\007nn_cost\030\026 \001(\0162\033.fzdeepnet.Trainer.COST" +
      "FUNC\022\026\n\013weight_norm\030\027 \001(\002:\0010\0227\n\010sparsity" +
      "\030\030 \001(\0162\033.fzdeepnet.Trainer.SPARSITY:\010NOS" +
      "PARSE\022\023\n\010s_lambda\030\031 \001(\002:\0010\022\014\n\001p\030\032 \001(\002:\0010" +
      "\022\031\n\016early_stopping\030\033 \001(\005:\0010\022!\n\026es_learni" +
      "ng_rate_decay\030\034 \001(\002:\0010\022\034\n\021es_momentum_de" +
      "cay\030\035 \001(\002:\0010\"C\n\005Decay\022\014\n\010NO_DECAY\020\000\022\r\n\tI",
      "NVERSE_T\020\001\022\017\n\013EXPONENTIAL\020\002\022\014\n\010TWO_STEP\020" +
      "\003\"D\n\005TType\022\010\n\004NONE\020\000\022\r\n\tPRE_TRAIN\020\001\022\020\n\014G" +
      "EN_FINETUNE\020\002\022\020\n\014DIS_FINETUNE\020\003\"G\n\007RBMBA" +
      "SE\022\t\n\005NORBM\020\000\022\006\n\002CD\020\001\022\007\n\003PCD\020\002\022\017\n\013FAST_W" +
      "EIGHT\020\003\022\017\n\013ADAPTIVE_LR\020\004\"4\n\006AEBASE\022\010\n\004NO" +
      "AE\020\000\022\021\n\rCROSS_ENTROPY\020\001\022\r\n\tBACK_PROB\020\002\" " +
      "\n\007BAMBASE\022\t\n\005NOBAM\020\000\022\n\n\006EN_MIN\020\001\"%\n\007DBNB" +
      "ASE\022\t\n\005NODBN\020\000\022\017\n\013SLEEP_AWAKE\020\001\"5\n\007DBMBA" +
      "SE\022\t\n\005NODBM\020\000\022\016\n\nMEAN_FIELD\020\001\022\017\n\013ADAPTIV" +
      "E_MC\020\002\"&\n\010DBAMBASE\022\n\n\006NODBAM\020\000\022\016\n\nALL_EN",
      "_MIN\020\001\"5\n\006NNBASE\022\020\n\014GRAD_DESCEND\020\000\022\r\n\tCO" +
      "NJUGATE\020\001\022\n\n\006L_BFGS\020\002\")\n\010COSTFUNC\022\n\n\006L2N" +
      "ORM\020\000\022\007\n\003MLE\020\001\022\010\n\004C_EN\020\002\"7\n\010SPARSITY\022\014\n\010" +
      "NOSPARSE\020\000\022\010\n\004EMIN\020\001\022\t\n\005KLMIN\020\002\022\010\n\004PROJ\020" +
      "\003\"\275\001\n\004Data\022\014\n\004part\030\001 \001(\005\0222\n\tdata_type\030\002 " +
      "\001(\0162\025.fzdeepnet.Data.DTYPE:\010TRAINING\022\020\n\010" +
      "dat_path\030\003 \002(\t\022\022\n\010lab_path\030\004 \001(\t:\000\022\034\n\024ad" +
      "ditional_file_path\030\005 \001(\t\"/\n\005DTYPE\022\014\n\010TRA" +
      "INING\020\000\022\016\n\nVALIDATION\020\001\022\010\n\004TEST\020\002\"\225\003\n\005Mo" +
      "del\022\022\n\nmodel_name\030\001 \002(\t\022\022\n\nmodel_base\030\002 ",
      "\002(\t\022\020\n\010app_name\030\003 \001(\t\022/\n\013computation\030\004 \001" +
      "(\0162\025.fzdeepnet.Model.COMP:\003CPU\022\037\n\005layer\030" +
      "\005 \003(\0132\020.fzdeepnet.Layer\022\'\n\tdeeplayer\030\006 \003" +
      "(\0132\024.fzdeepnet.DeepLayer\022%\n\tgen_ftune\030\007 " +
      "\001(\0132\022.fzdeepnet.Trainer\022%\n\tdis_ftune\030\010 \001" +
      "(\0132\022.fzdeepnet.Trainer\022 \n\007trn_dat\030\t \003(\0132" +
      "\017.fzdeepnet.Data\022 \n\007vld_dat\030\n \003(\0132\017.fzde" +
      "epnet.Data\022 \n\007tst_dat\030\013 \003(\0132\017.fzdeepnet." +
      "Data\"#\n\004COMP\022\007\n\003CPU\020\000\022\007\n\003GPU\020\001\022\t\n\005CUDNN\020" +
      "\002"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_fzdeepnet_Layer_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_fzdeepnet_Layer_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_fzdeepnet_Layer_descriptor,
              new java.lang.String[] { "Lid", "Type", "Dimensions", "Dx", "Unit", "Threshold", "Depend", });
          internal_static_fzdeepnet_Dependence_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_fzdeepnet_Dependence_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_fzdeepnet_Dependence_descriptor,
              new java.lang.String[] { "LayerId", "Direction", "Convolution", });
          internal_static_fzdeepnet_DeepLayer_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_fzdeepnet_DeepLayer_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_fzdeepnet_DeepLayer_descriptor,
              new java.lang.String[] { "VisLid", "HidLid", "Order", "Pretrainer", "WeightSeed", "VbiasSeed", "HbiasSeed", "Inference", });
          internal_static_fzdeepnet_Trainer_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_fzdeepnet_Trainer_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_fzdeepnet_Trainer_descriptor,
              new java.lang.String[] { "Epochs", "Batches", "BatchSize", "LearningRate", "LearningRateDecay", "LearningRateDecayParam", "LearningRateFinal", "InitialMomentum", "MomentumDecay", "MomentumDecayParam", "FinalMomentum", "Type", "RbmTrain", "GibbsNum", "AeTrain", "BamTrain", "PseudoGibbsNum", "DbnTrain", "DbmTrain", "DbamTrain", "NnTrain", "NnCost", "WeightNorm", "Sparsity", "SLambda", "P", "EarlyStopping", "EsLearningRateDecay", "EsMomentumDecay", });
          internal_static_fzdeepnet_Data_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_fzdeepnet_Data_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_fzdeepnet_Data_descriptor,
              new java.lang.String[] { "Part", "DataType", "DatPath", "LabPath", "AdditionalFilePath", });
          internal_static_fzdeepnet_Model_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_fzdeepnet_Model_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_fzdeepnet_Model_descriptor,
              new java.lang.String[] { "ModelName", "ModelBase", "AppName", "Computation", "Layer", "Deeplayer", "GenFtune", "DisFtune", "TrnDat", "VldDat", "TstDat", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
